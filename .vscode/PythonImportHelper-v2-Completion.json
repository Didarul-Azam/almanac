[
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "standardDeviation",
        "importPath": "almanac.utils.standardDeviation",
        "description": "almanac.utils.standardDeviation",
        "isExtraImport": true,
        "detail": "almanac.utils.standardDeviation",
        "documentation": {}
    },
    {
        "label": "standardDeviation",
        "importPath": "almanac.utils.standardDeviation",
        "description": "almanac.utils.standardDeviation",
        "isExtraImport": true,
        "detail": "almanac.utils.standardDeviation",
        "documentation": {}
    },
    {
        "label": "standardDeviation",
        "importPath": "almanac.utils.standardDeviation",
        "description": "almanac.utils.standardDeviation",
        "isExtraImport": true,
        "detail": "almanac.utils.standardDeviation",
        "documentation": {}
    },
    {
        "label": "standardDeviation",
        "importPath": "almanac.utils.standardDeviation",
        "description": "almanac.utils.standardDeviation",
        "isExtraImport": true,
        "detail": "almanac.utils.standardDeviation",
        "documentation": {}
    },
    {
        "label": "standardDeviation",
        "importPath": "almanac.utils.standardDeviation",
        "description": "almanac.utils.standardDeviation",
        "isExtraImport": true,
        "detail": "almanac.utils.standardDeviation",
        "documentation": {}
    },
    {
        "label": "standardDeviation",
        "importPath": "almanac.utils.standardDeviation",
        "description": "almanac.utils.standardDeviation",
        "isExtraImport": true,
        "detail": "almanac.utils.standardDeviation",
        "documentation": {}
    },
    {
        "label": "standardDeviation",
        "importPath": "almanac.utils.standardDeviation",
        "description": "almanac.utils.standardDeviation",
        "isExtraImport": true,
        "detail": "almanac.utils.standardDeviation",
        "documentation": {}
    },
    {
        "label": "standardDeviation",
        "importPath": "almanac.utils.standardDeviation",
        "description": "almanac.utils.standardDeviation",
        "isExtraImport": true,
        "detail": "almanac.utils.standardDeviation",
        "documentation": {}
    },
    {
        "label": "standardDeviation",
        "importPath": "almanac.utils.standardDeviation",
        "description": "almanac.utils.standardDeviation",
        "isExtraImport": true,
        "detail": "almanac.utils.standardDeviation",
        "documentation": {}
    },
    {
        "label": "standardDeviation",
        "importPath": "almanac.utils.standardDeviation",
        "description": "almanac.utils.standardDeviation",
        "isExtraImport": true,
        "detail": "almanac.utils.standardDeviation",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "calculate_costs_deflated_for_vol",
        "importPath": "almanac.analysis.cost_calculation",
        "description": "almanac.analysis.cost_calculation",
        "isExtraImport": true,
        "detail": "almanac.analysis.cost_calculation",
        "documentation": {}
    },
    {
        "label": "calculate_costs_deflated_for_vol",
        "importPath": "almanac.analysis.cost_calculation",
        "description": "almanac.analysis.cost_calculation",
        "isExtraImport": true,
        "detail": "almanac.analysis.cost_calculation",
        "documentation": {}
    },
    {
        "label": "norm",
        "importPath": "scipy.stats",
        "description": "scipy.stats",
        "isExtraImport": true,
        "detail": "scipy.stats",
        "documentation": {}
    },
    {
        "label": "norm",
        "importPath": "scipy.stats",
        "description": "scipy.stats",
        "isExtraImport": true,
        "detail": "scipy.stats",
        "documentation": {}
    },
    {
        "label": "norm",
        "importPath": "scipy.stats",
        "description": "scipy.stats",
        "isExtraImport": true,
        "detail": "scipy.stats",
        "documentation": {}
    },
    {
        "label": "norm",
        "importPath": "scipy.stats",
        "description": "scipy.stats",
        "isExtraImport": true,
        "detail": "scipy.stats",
        "documentation": {}
    },
    {
        "label": "norm",
        "importPath": "scipy.stats",
        "description": "scipy.stats",
        "isExtraImport": true,
        "detail": "scipy.stats",
        "documentation": {}
    },
    {
        "label": "norm",
        "importPath": "scipy.stats",
        "description": "scipy.stats",
        "isExtraImport": true,
        "detail": "scipy.stats",
        "documentation": {}
    },
    {
        "label": "norm",
        "importPath": "scipy.stats",
        "description": "scipy.stats",
        "isExtraImport": true,
        "detail": "scipy.stats",
        "documentation": {}
    },
    {
        "label": "periods_per_year",
        "importPath": "almanac.utils.utils",
        "description": "almanac.utils.utils",
        "isExtraImport": true,
        "detail": "almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "demeaned_remove_zeros",
        "importPath": "almanac.utils.utils",
        "description": "almanac.utils.utils",
        "isExtraImport": true,
        "detail": "almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "almanac.utils.utils",
        "description": "almanac.utils.utils",
        "isExtraImport": true,
        "detail": "almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "almanac.utils.utils",
        "description": "almanac.utils.utils",
        "isExtraImport": true,
        "detail": "almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "periods_per_year",
        "importPath": "almanac.utils.utils",
        "description": "almanac.utils.utils",
        "isExtraImport": true,
        "detail": "almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "demeaned_remove_zeros",
        "importPath": "almanac.utils.utils",
        "description": "almanac.utils.utils",
        "isExtraImport": true,
        "detail": "almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "almanac.utils.utils",
        "description": "almanac.utils.utils",
        "isExtraImport": true,
        "detail": "almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "almanac.utils.utils",
        "description": "almanac.utils.utils",
        "isExtraImport": true,
        "detail": "almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "BUSINESS_DAYS_IN_YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "DEFAULT_DATE_FORMAT",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "DEFAULT_DATE_FORMAT",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "Frequency",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "NATURAL",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "MONTH",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "WEEK",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "BUSINESS_DAYS_IN_YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "WEEKS_PER_YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "MONTHS_PER_YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "SECONDS_PER_YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "PERIODS_PER_YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "BUSINESS_DAYS_IN_YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "DEFAULT_DATE_FORMAT",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "DEFAULT_DATE_FORMAT",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "Frequency",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "NATURAL",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "MONTH",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "WEEK",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "BUSINESS_DAYS_IN_YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "WEEKS_PER_YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "MONTHS_PER_YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "SECONDS_PER_YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "PERIODS_PER_YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "cost_per_contract_dict",
        "importPath": "almanac.config.instruments",
        "description": "almanac.config.instruments",
        "isExtraImport": true,
        "detail": "almanac.config.instruments",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "almanac.config.instruments",
        "description": "almanac.config.instruments",
        "isExtraImport": true,
        "detail": "almanac.config.instruments",
        "documentation": {}
    },
    {
        "label": "INSTRUMENT_LIST",
        "importPath": "almanac.config.instruments",
        "description": "almanac.config.instruments",
        "isExtraImport": true,
        "detail": "almanac.config.instruments",
        "documentation": {}
    },
    {
        "label": "instrument_weights",
        "importPath": "almanac.config.instruments",
        "description": "almanac.config.instruments",
        "isExtraImport": true,
        "detail": "almanac.config.instruments",
        "documentation": {}
    },
    {
        "label": "multipliers",
        "importPath": "almanac.config.instruments",
        "description": "almanac.config.instruments",
        "isExtraImport": true,
        "detail": "almanac.config.instruments",
        "documentation": {}
    },
    {
        "label": "cost_per_contract_dict",
        "importPath": "almanac.config.instruments",
        "description": "almanac.config.instruments",
        "isExtraImport": true,
        "detail": "almanac.config.instruments",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "almanac.config.instruments",
        "description": "almanac.config.instruments",
        "isExtraImport": true,
        "detail": "almanac.config.instruments",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "almanac.config.instruments",
        "description": "almanac.config.instruments",
        "isExtraImport": true,
        "detail": "almanac.config.instruments",
        "documentation": {}
    },
    {
        "label": "cost_per_contract_dict",
        "importPath": "almanac.config.instruments",
        "description": "almanac.config.instruments",
        "isExtraImport": true,
        "detail": "almanac.config.instruments",
        "documentation": {}
    },
    {
        "label": "multipliers",
        "importPath": "almanac.config.instruments",
        "description": "almanac.config.instruments",
        "isExtraImport": true,
        "detail": "almanac.config.instruments",
        "documentation": {}
    },
    {
        "label": "instrument_weights",
        "importPath": "almanac.config.instruments",
        "description": "almanac.config.instruments",
        "isExtraImport": true,
        "detail": "almanac.config.instruments",
        "documentation": {}
    },
    {
        "label": "cost_per_contract_dict",
        "importPath": "almanac.config.instruments",
        "description": "almanac.config.instruments",
        "isExtraImport": true,
        "detail": "almanac.config.instruments",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "almanac.config.instruments",
        "description": "almanac.config.instruments",
        "isExtraImport": true,
        "detail": "almanac.config.instruments",
        "documentation": {}
    },
    {
        "label": "INSTRUMENT_LIST",
        "importPath": "almanac.config.instruments",
        "description": "almanac.config.instruments",
        "isExtraImport": true,
        "detail": "almanac.config.instruments",
        "documentation": {}
    },
    {
        "label": "instrument_weights",
        "importPath": "almanac.config.instruments",
        "description": "almanac.config.instruments",
        "isExtraImport": true,
        "detail": "almanac.config.instruments",
        "documentation": {}
    },
    {
        "label": "multipliers",
        "importPath": "almanac.config.instruments",
        "description": "almanac.config.instruments",
        "isExtraImport": true,
        "detail": "almanac.config.instruments",
        "documentation": {}
    },
    {
        "label": "cost_per_contract_dict",
        "importPath": "almanac.config.instruments",
        "description": "almanac.config.instruments",
        "isExtraImport": true,
        "detail": "almanac.config.instruments",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "almanac.config.instruments",
        "description": "almanac.config.instruments",
        "isExtraImport": true,
        "detail": "almanac.config.instruments",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "almanac.config.instruments",
        "description": "almanac.config.instruments",
        "isExtraImport": true,
        "detail": "almanac.config.instruments",
        "documentation": {}
    },
    {
        "label": "cost_per_contract_dict",
        "importPath": "almanac.config.instruments",
        "description": "almanac.config.instruments",
        "isExtraImport": true,
        "detail": "almanac.config.instruments",
        "documentation": {}
    },
    {
        "label": "multipliers",
        "importPath": "almanac.config.instruments",
        "description": "almanac.config.instruments",
        "isExtraImport": true,
        "detail": "almanac.config.instruments",
        "documentation": {}
    },
    {
        "label": "instrument_weights",
        "importPath": "almanac.config.instruments",
        "description": "almanac.config.instruments",
        "isExtraImport": true,
        "detail": "almanac.config.instruments",
        "documentation": {}
    },
    {
        "label": "hierarchy",
        "importPath": "scipy.cluster",
        "description": "scipy.cluster",
        "isExtraImport": true,
        "detail": "scipy.cluster",
        "documentation": {}
    },
    {
        "label": "hierarchy",
        "importPath": "scipy.cluster",
        "description": "scipy.cluster",
        "isExtraImport": true,
        "detail": "scipy.cluster",
        "documentation": {}
    },
    {
        "label": "pd_readcsv",
        "importPath": "almanac.data.data",
        "description": "almanac.data.data",
        "isExtraImport": true,
        "detail": "almanac.data.data",
        "documentation": {}
    },
    {
        "label": "get_data_dict",
        "importPath": "almanac.data.data",
        "description": "almanac.data.data",
        "isExtraImport": true,
        "detail": "almanac.data.data",
        "documentation": {}
    },
    {
        "label": "pd_readcsv",
        "importPath": "almanac.data.data",
        "description": "almanac.data.data",
        "isExtraImport": true,
        "detail": "almanac.data.data",
        "documentation": {}
    },
    {
        "label": "pd_readcsv",
        "importPath": "almanac.data.data",
        "description": "almanac.data.data",
        "isExtraImport": true,
        "detail": "almanac.data.data",
        "documentation": {}
    },
    {
        "label": "pd_readcsv",
        "importPath": "almanac.data.data",
        "description": "almanac.data.data",
        "isExtraImport": true,
        "detail": "almanac.data.data",
        "documentation": {}
    },
    {
        "label": "get_data_dict",
        "importPath": "almanac.data.data",
        "description": "almanac.data.data",
        "isExtraImport": true,
        "detail": "almanac.data.data",
        "documentation": {}
    },
    {
        "label": "get_data_dict",
        "importPath": "almanac.data.data",
        "description": "almanac.data.data",
        "isExtraImport": true,
        "detail": "almanac.data.data",
        "documentation": {}
    },
    {
        "label": "get_data_dict",
        "importPath": "almanac.data.data",
        "description": "almanac.data.data",
        "isExtraImport": true,
        "detail": "almanac.data.data",
        "documentation": {}
    },
    {
        "label": "get_data_dict",
        "importPath": "almanac.data.data",
        "description": "almanac.data.data",
        "isExtraImport": true,
        "detail": "almanac.data.data",
        "documentation": {}
    },
    {
        "label": "pd_readcsv",
        "importPath": "almanac.data.data",
        "description": "almanac.data.data",
        "isExtraImport": true,
        "detail": "almanac.data.data",
        "documentation": {}
    },
    {
        "label": "pd_readcsv",
        "importPath": "almanac.data.data",
        "description": "almanac.data.data",
        "isExtraImport": true,
        "detail": "almanac.data.data",
        "documentation": {}
    },
    {
        "label": "get_data_dict",
        "importPath": "almanac.data.data",
        "description": "almanac.data.data",
        "isExtraImport": true,
        "detail": "almanac.data.data",
        "documentation": {}
    },
    {
        "label": "pd_readcsv",
        "importPath": "almanac.data.data",
        "description": "almanac.data.data",
        "isExtraImport": true,
        "detail": "almanac.data.data",
        "documentation": {}
    },
    {
        "label": "pd_readcsv",
        "importPath": "almanac.data.data",
        "description": "almanac.data.data",
        "isExtraImport": true,
        "detail": "almanac.data.data",
        "documentation": {}
    },
    {
        "label": "pd_readcsv",
        "importPath": "almanac.data.data",
        "description": "almanac.data.data",
        "isExtraImport": true,
        "detail": "almanac.data.data",
        "documentation": {}
    },
    {
        "label": "get_data_dict",
        "importPath": "almanac.data.data",
        "description": "almanac.data.data",
        "isExtraImport": true,
        "detail": "almanac.data.data",
        "documentation": {}
    },
    {
        "label": "get_data_dict",
        "importPath": "almanac.data.data",
        "description": "almanac.data.data",
        "isExtraImport": true,
        "detail": "almanac.data.data",
        "documentation": {}
    },
    {
        "label": "get_data_dict",
        "importPath": "almanac.data.data",
        "description": "almanac.data.data",
        "isExtraImport": true,
        "detail": "almanac.data.data",
        "documentation": {}
    },
    {
        "label": "get_data_dict",
        "importPath": "almanac.data.data",
        "description": "almanac.data.data",
        "isExtraImport": true,
        "detail": "almanac.data.data",
        "documentation": {}
    },
    {
        "label": "pd_readcsv",
        "importPath": "almanac.data.data",
        "description": "almanac.data.data",
        "isExtraImport": true,
        "detail": "almanac.data.data",
        "documentation": {}
    },
    {
        "label": "ewmac",
        "importPath": "almanac.analysis.forecasts",
        "description": "almanac.analysis.forecasts",
        "isExtraImport": true,
        "detail": "almanac.analysis.forecasts",
        "documentation": {}
    },
    {
        "label": "calculate_forecast_for_ewmac",
        "importPath": "almanac.analysis.forecasts",
        "description": "almanac.analysis.forecasts",
        "isExtraImport": true,
        "detail": "almanac.analysis.forecasts",
        "documentation": {}
    },
    {
        "label": "calculate_scaled_forecast_for_ewmac",
        "importPath": "almanac.analysis.forecasts",
        "description": "almanac.analysis.forecasts",
        "isExtraImport": true,
        "detail": "almanac.analysis.forecasts",
        "documentation": {}
    },
    {
        "label": "calculate_risk_adjusted_forecast_for_ewmac",
        "importPath": "almanac.analysis.forecasts",
        "description": "almanac.analysis.forecasts",
        "isExtraImport": true,
        "detail": "almanac.analysis.forecasts",
        "documentation": {}
    },
    {
        "label": "ewmac",
        "importPath": "almanac.analysis.forecasts",
        "description": "almanac.analysis.forecasts",
        "isExtraImport": true,
        "detail": "almanac.analysis.forecasts",
        "documentation": {}
    },
    {
        "label": "calculate_forecast_for_ewmac",
        "importPath": "almanac.analysis.forecasts",
        "description": "almanac.analysis.forecasts",
        "isExtraImport": true,
        "detail": "almanac.analysis.forecasts",
        "documentation": {}
    },
    {
        "label": "calculate_scaled_forecast_for_ewmac",
        "importPath": "almanac.analysis.forecasts",
        "description": "almanac.analysis.forecasts",
        "isExtraImport": true,
        "detail": "almanac.analysis.forecasts",
        "documentation": {}
    },
    {
        "label": "calculate_risk_adjusted_forecast_for_ewmac",
        "importPath": "almanac.analysis.forecasts",
        "description": "almanac.analysis.forecasts",
        "isExtraImport": true,
        "detail": "almanac.analysis.forecasts",
        "documentation": {}
    },
    {
        "label": "copy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "copy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "copy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "copy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "create_fx_series_given_adjusted_prices_dict",
        "importPath": "almanac.utils.fx_series",
        "description": "almanac.utils.fx_series",
        "isExtraImport": true,
        "detail": "almanac.utils.fx_series",
        "documentation": {}
    },
    {
        "label": "create_fx_series_given_adjusted_prices_dict",
        "importPath": "almanac.utils.fx_series",
        "description": "almanac.utils.fx_series",
        "isExtraImport": true,
        "detail": "almanac.utils.fx_series",
        "documentation": {}
    },
    {
        "label": "calculate_variable_standard_deviation_for_risk_targeting_from_dict",
        "importPath": "almanac.analysis.std_for_risk",
        "description": "almanac.analysis.std_for_risk",
        "isExtraImport": true,
        "detail": "almanac.analysis.std_for_risk",
        "documentation": {}
    },
    {
        "label": "calculate_standard_deviation_for_risk_targeting",
        "importPath": "almanac.analysis.std_for_risk",
        "description": "almanac.analysis.std_for_risk",
        "isExtraImport": true,
        "detail": "almanac.analysis.std_for_risk",
        "documentation": {}
    },
    {
        "label": "calculate_standard_deviation_for_risk_targeting",
        "importPath": "almanac.analysis.std_for_risk",
        "description": "almanac.analysis.std_for_risk",
        "isExtraImport": true,
        "detail": "almanac.analysis.std_for_risk",
        "documentation": {}
    },
    {
        "label": "calculate_variable_standard_deviation_for_risk_targeting",
        "importPath": "almanac.analysis.std_for_risk",
        "description": "almanac.analysis.std_for_risk",
        "isExtraImport": true,
        "detail": "almanac.analysis.std_for_risk",
        "documentation": {}
    },
    {
        "label": "calculate_variable_standard_deviation_for_risk_targeting_from_dict",
        "importPath": "almanac.analysis.std_for_risk",
        "description": "almanac.analysis.std_for_risk",
        "isExtraImport": true,
        "detail": "almanac.analysis.std_for_risk",
        "documentation": {}
    },
    {
        "label": "calculate_standard_deviation_for_risk_targeting",
        "importPath": "almanac.analysis.std_for_risk",
        "description": "almanac.analysis.std_for_risk",
        "isExtraImport": true,
        "detail": "almanac.analysis.std_for_risk",
        "documentation": {}
    },
    {
        "label": "calculate_standard_deviation_for_risk_targeting",
        "importPath": "almanac.analysis.std_for_risk",
        "description": "almanac.analysis.std_for_risk",
        "isExtraImport": true,
        "detail": "almanac.analysis.std_for_risk",
        "documentation": {}
    },
    {
        "label": "calculate_variable_standard_deviation_for_risk_targeting",
        "importPath": "almanac.analysis.std_for_risk",
        "description": "almanac.analysis.std_for_risk",
        "isExtraImport": true,
        "detail": "almanac.analysis.std_for_risk",
        "documentation": {}
    },
    {
        "label": "calculate_position_series_given_variable_risk_for_dict",
        "importPath": "almanac.analysis.positions",
        "description": "almanac.analysis.positions",
        "isExtraImport": true,
        "detail": "almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_dict_with_trend_filter_applied",
        "importPath": "almanac.analysis.positions",
        "description": "almanac.analysis.positions",
        "isExtraImport": true,
        "detail": "almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_series_given_fixed_risk",
        "importPath": "almanac.analysis.positions",
        "description": "almanac.analysis.positions",
        "isExtraImport": true,
        "detail": "almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_series_given_fixed_risk",
        "importPath": "almanac.analysis.positions",
        "description": "almanac.analysis.positions",
        "isExtraImport": true,
        "detail": "almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_series_given_variable_risk",
        "importPath": "almanac.analysis.positions",
        "description": "almanac.analysis.positions",
        "isExtraImport": true,
        "detail": "almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_series_given_variable_risk_for_dict",
        "importPath": "almanac.analysis.positions",
        "description": "almanac.analysis.positions",
        "isExtraImport": true,
        "detail": "almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_series_given_variable_risk_for_dict",
        "importPath": "almanac.analysis.positions",
        "description": "almanac.analysis.positions",
        "isExtraImport": true,
        "detail": "almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_dict_with_trend_filter_applied",
        "importPath": "almanac.analysis.positions",
        "description": "almanac.analysis.positions",
        "isExtraImport": true,
        "detail": "almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_series_given_variable_risk_for_dict",
        "importPath": "almanac.analysis.positions",
        "description": "almanac.analysis.positions",
        "isExtraImport": true,
        "detail": "almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_dict_with_symmetric_trend_filter_applied",
        "importPath": "almanac.analysis.positions",
        "description": "almanac.analysis.positions",
        "isExtraImport": true,
        "detail": "almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_series_given_variable_risk_for_dict",
        "importPath": "almanac.analysis.positions",
        "description": "almanac.analysis.positions",
        "isExtraImport": true,
        "detail": "almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_dict_with_trend_forecast_applied",
        "importPath": "almanac.analysis.positions",
        "description": "almanac.analysis.positions",
        "isExtraImport": true,
        "detail": "almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_with_trend_forecast_applied",
        "importPath": "almanac.analysis.positions",
        "description": "almanac.analysis.positions",
        "isExtraImport": true,
        "detail": "almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_series_given_variable_risk_for_dict",
        "importPath": "almanac.analysis.positions",
        "description": "almanac.analysis.positions",
        "isExtraImport": true,
        "detail": "almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_dict_with_trend_filter_applied",
        "importPath": "almanac.analysis.positions",
        "description": "almanac.analysis.positions",
        "isExtraImport": true,
        "detail": "almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_series_given_fixed_risk",
        "importPath": "almanac.analysis.positions",
        "description": "almanac.analysis.positions",
        "isExtraImport": true,
        "detail": "almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_series_given_fixed_risk",
        "importPath": "almanac.analysis.positions",
        "description": "almanac.analysis.positions",
        "isExtraImport": true,
        "detail": "almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_series_given_variable_risk",
        "importPath": "almanac.analysis.positions",
        "description": "almanac.analysis.positions",
        "isExtraImport": true,
        "detail": "almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_series_given_variable_risk_for_dict",
        "importPath": "almanac.analysis.positions",
        "description": "almanac.analysis.positions",
        "isExtraImport": true,
        "detail": "almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_series_given_variable_risk_for_dict",
        "importPath": "almanac.analysis.positions",
        "description": "almanac.analysis.positions",
        "isExtraImport": true,
        "detail": "almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_dict_with_trend_filter_applied",
        "importPath": "almanac.analysis.positions",
        "description": "almanac.analysis.positions",
        "isExtraImport": true,
        "detail": "almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_series_given_variable_risk_for_dict",
        "importPath": "almanac.analysis.positions",
        "description": "almanac.analysis.positions",
        "isExtraImport": true,
        "detail": "almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_dict_with_symmetric_trend_filter_applied",
        "importPath": "almanac.analysis.positions",
        "description": "almanac.analysis.positions",
        "isExtraImport": true,
        "detail": "almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_series_given_variable_risk_for_dict",
        "importPath": "almanac.analysis.positions",
        "description": "almanac.analysis.positions",
        "isExtraImport": true,
        "detail": "almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_dict_with_trend_forecast_applied",
        "importPath": "almanac.analysis.positions",
        "description": "almanac.analysis.positions",
        "isExtraImport": true,
        "detail": "almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_with_trend_forecast_applied",
        "importPath": "almanac.analysis.positions",
        "description": "almanac.analysis.positions",
        "isExtraImport": true,
        "detail": "almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns_for_dict_with_costs",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "aggregate_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_percentage_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_daily_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "aggregate_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns_for_dict",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "aggregate_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns_for_dict_with_costs",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "aggregate_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns_for_dict_with_costs",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "aggregate_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns_for_dict_with_costs",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns_for_dict_with_costs",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "aggregate_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_percentage_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_daily_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "aggregate_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns_for_dict",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "aggregate_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns_for_dict_with_costs",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "aggregate_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns_for_dict_with_costs",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "aggregate_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns_for_dict_with_costs",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "quantstats",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "quantstats",
        "description": "quantstats",
        "detail": "quantstats",
        "documentation": {}
    },
    {
        "label": "Stats",
        "importPath": "almanac.analysis.calculate_stats",
        "description": "almanac.analysis.calculate_stats",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_stats",
        "documentation": {}
    },
    {
        "label": "Stats",
        "importPath": "almanac.analysis.calculate_stats",
        "description": "almanac.analysis.calculate_stats",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_stats",
        "documentation": {}
    },
    {
        "label": "Stats",
        "importPath": "almanac.analysis.calculate_stats",
        "description": "almanac.analysis.calculate_stats",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_stats",
        "documentation": {}
    },
    {
        "label": "Stats",
        "importPath": "almanac.analysis.calculate_stats",
        "description": "almanac.analysis.calculate_stats",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_stats",
        "documentation": {}
    },
    {
        "label": "Stats",
        "importPath": "almanac.analysis.calculate_stats",
        "description": "almanac.analysis.calculate_stats",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_stats",
        "documentation": {}
    },
    {
        "label": "Stats",
        "importPath": "almanac.analysis.calculate_stats",
        "description": "almanac.analysis.calculate_stats",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_stats",
        "documentation": {}
    },
    {
        "label": "StrategyBase",
        "importPath": "almanac.strategy.baseStrategy",
        "description": "almanac.strategy.baseStrategy",
        "isExtraImport": true,
        "detail": "almanac.strategy.baseStrategy",
        "documentation": {}
    },
    {
        "label": "StrategyBase",
        "importPath": "almanac.strategy.baseStrategy",
        "description": "almanac.strategy.baseStrategy",
        "isExtraImport": true,
        "detail": "almanac.strategy.baseStrategy",
        "documentation": {}
    },
    {
        "label": "StrategyBase",
        "importPath": "almanac.strategy.baseStrategy",
        "description": "almanac.strategy.baseStrategy",
        "isExtraImport": true,
        "detail": "almanac.strategy.baseStrategy",
        "documentation": {}
    },
    {
        "label": "StrategyBase",
        "importPath": "almanac.strategy.baseStrategy",
        "description": "almanac.strategy.baseStrategy",
        "isExtraImport": true,
        "detail": "almanac.strategy.baseStrategy",
        "documentation": {}
    },
    {
        "label": "StrategyBase",
        "importPath": "almanac.strategy.baseStrategy",
        "description": "almanac.strategy.baseStrategy",
        "isExtraImport": true,
        "detail": "almanac.strategy.baseStrategy",
        "documentation": {}
    },
    {
        "label": "StrategyBase",
        "importPath": "almanac.strategy.baseStrategy",
        "description": "almanac.strategy.baseStrategy",
        "isExtraImport": true,
        "detail": "almanac.strategy.baseStrategy",
        "documentation": {}
    },
    {
        "label": "StrategyBase",
        "importPath": "almanac.strategy.baseStrategy",
        "description": "almanac.strategy.baseStrategy",
        "isExtraImport": true,
        "detail": "almanac.strategy.baseStrategy",
        "documentation": {}
    },
    {
        "label": "StrategyBase",
        "importPath": "almanac.strategy.baseStrategy",
        "description": "almanac.strategy.baseStrategy",
        "isExtraImport": true,
        "detail": "almanac.strategy.baseStrategy",
        "documentation": {}
    },
    {
        "label": "StrategyBase",
        "importPath": "almanac.strategy.baseStrategy",
        "description": "almanac.strategy.baseStrategy",
        "isExtraImport": true,
        "detail": "almanac.strategy.baseStrategy",
        "documentation": {}
    },
    {
        "label": "StrategyBase",
        "importPath": "almanac.strategy.baseStrategy",
        "description": "almanac.strategy.baseStrategy",
        "isExtraImport": true,
        "detail": "almanac.strategy.baseStrategy",
        "documentation": {}
    },
    {
        "label": "handcrafting_algo",
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "isExtraImport": true,
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "handcrafting_algo",
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "isExtraImport": true,
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "fx_dict",
        "importPath": "almanac.config.fx_dict",
        "description": "almanac.config.fx_dict",
        "isExtraImport": true,
        "detail": "almanac.config.fx_dict",
        "documentation": {}
    },
    {
        "label": "fx_dict",
        "importPath": "almanac.config.fx_dict",
        "description": "almanac.config.fx_dict",
        "isExtraImport": true,
        "detail": "almanac.config.fx_dict",
        "documentation": {}
    },
    {
        "label": "almanac",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "almanac",
        "description": "almanac",
        "detail": "almanac",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "ArgumentError",
        "kind": 6,
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "peekOfCode": "class ArgumentError(Exception):\n    pass\ndef calculate_returns(\n    position_contracts: Union[dict, pd.Series],\n    adjusted_prices: Union[dict, pd.Series],\n    multipliers: Union[dict, float],\n    fx_series: Union[dict, pd.Series],\n    capital: float,\n    cost_per_contract: Union[dict, float],\n    std_dev: Union[dict, standardDeviation],",
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns",
        "kind": 2,
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "peekOfCode": "def calculate_perc_returns(position_contracts_held: pd.Series,\n                           adjusted_price: pd.Series,\n                           fx_series: pd.Series,\n                           multiplier: float,\n                           capital_required: pd.Series,\n                           ) -> pd.Series:\n    return_price_points = (\n        adjusted_price - adjusted_price.shift(1))*position_contracts_held.shift(1)\n    return_instrument_currency = return_price_points * multiplier\n    fx_series_aligned = fx_series.reindex(",
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_percentage_returns",
        "kind": 2,
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "peekOfCode": "def calculate_percentage_returns(\n    adjusted_price: pd.Series, current_price: pd.Series\n) -> pd.Series:\n    daily_price_changes = calculate_daily_returns(adjusted_price)\n    percentage_changes = daily_price_changes / current_price.shift(1)\n    return percentage_changes\ndef calculate_daily_returns(adjusted_price: pd.Series) -> pd.Series:\n    return adjusted_price.diff()\ndef calculate_perc_returns_with_costs(\n    position_contracts_held: pd.Series,",
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_daily_returns",
        "kind": 2,
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "peekOfCode": "def calculate_daily_returns(adjusted_price: pd.Series) -> pd.Series:\n    return adjusted_price.diff()\ndef calculate_perc_returns_with_costs(\n    position_contracts_held: pd.Series,\n    adjusted_price: pd.Series,\n    fx_series: pd.Series,\n    stdev_series: standardDeviation,\n    multiplier: float,\n    capital_required: float,\n    cost_per_contract: float,",
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns_with_costs",
        "kind": 2,
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "peekOfCode": "def calculate_perc_returns_with_costs(\n    position_contracts_held: pd.Series,\n    adjusted_price: pd.Series,\n    fx_series: pd.Series,\n    stdev_series: standardDeviation,\n    multiplier: float,\n    capital_required: float,\n    cost_per_contract: float,\n) -> pd.Series:\n    precost_return_price_points = (",
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns_for_dict_with_costs",
        "kind": 2,
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "peekOfCode": "def calculate_perc_returns_for_dict_with_costs(\n    position_contracts_dict: dict,\n    adjusted_prices: dict,\n    multipliers: dict,\n    fx_series: dict,\n    capital: float,\n    cost_per_contract_dict: dict,\n    std_dev_dict: dict,\n) -> dict:\n    perc_returns_dict = dict(",
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_returns_perc_dict",
        "kind": 2,
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "peekOfCode": "def calculate_returns_perc_dict(\n    position_contracts_dict: dict,\n    adjusted_prices: dict,\n    multipliers: dict,\n    fx_series: dict,\n    capital: float,\n    cost_per_contract_dict: dict,\n    std_dev_dict: dict,\n) -> dict:\n    perc_returns_dict_with_costs = calculate_perc_returns_for_dict_with_costs(",
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns_for_dict",
        "kind": 2,
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "peekOfCode": "def calculate_perc_returns_for_dict(\n    position_contracts_dict: dict,\n    adjusted_prices: dict,\n    multipliers: dict,\n    fx_series: dict,\n    capital: float,\n) -> dict:\n    perc_returns_dict = dict(\n        [\n            (",
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "aggregate_returns",
        "kind": 2,
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "peekOfCode": "def aggregate_returns(perc_returns_dict: dict) -> pd.Series:\n    both_returns = perc_returns_to_df(perc_returns_dict)\n    agg = both_returns.sum(axis=1)\n    return agg\ndef perc_returns_to_df(perc_returns_dict: dict) -> pd.DataFrame:\n    both_returns = pd.concat(perc_returns_dict, axis=1)\n    both_returns = both_returns.dropna(how=\"all\")\n    return both_returns\nclass ArgumentError(Exception):\n    pass",
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "perc_returns_to_df",
        "kind": 2,
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "peekOfCode": "def perc_returns_to_df(perc_returns_dict: dict) -> pd.DataFrame:\n    both_returns = pd.concat(perc_returns_dict, axis=1)\n    both_returns = both_returns.dropna(how=\"all\")\n    return both_returns\nclass ArgumentError(Exception):\n    pass\ndef calculate_returns(\n    position_contracts: Union[dict, pd.Series],\n    adjusted_prices: Union[dict, pd.Series],\n    multipliers: Union[dict, float],",
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_returns",
        "kind": 2,
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "peekOfCode": "def calculate_returns(\n    position_contracts: Union[dict, pd.Series],\n    adjusted_prices: Union[dict, pd.Series],\n    multipliers: Union[dict, float],\n    fx_series: Union[dict, pd.Series],\n    capital: float,\n    cost_per_contract: Union[dict, float],\n    std_dev: Union[dict, standardDeviation],\n    aggregate=True,\n):",
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "Stats",
        "kind": 6,
        "importPath": "almanac.analysis.calculate_stats",
        "description": "almanac.analysis.calculate_stats",
        "peekOfCode": "class Stats():\n    def __init__(self,perc_return, at_frequency = NATURAL) -> None:\n        self.perc_return = perc_return\n        self.at_frequency = at_frequency\n    def _sum_at_frequency(self):\n        if self.at_frequency == NATURAL:\n            return self.perc_return\n        at_frequency_str_dict = {YEAR: \"Y\", WEEK: \"7D\", MONTH: \"1M\"}\n        at_frequency_str = at_frequency_str_dict[self.at_frequency]\n        perc_return_at_freq = self.perc_return.resample(at_frequency_str).sum()",
        "detail": "almanac.analysis.calculate_stats",
        "documentation": {}
    },
    {
        "label": "calculate_costs_deflated_for_vol",
        "kind": 2,
        "importPath": "almanac.analysis.cost_calculation",
        "description": "almanac.analysis.cost_calculation",
        "peekOfCode": "def calculate_costs_deflated_for_vol(\n    stddev_series: standardDeviation,\n    cost_per_contract: float,\n    position_contracts_held: pd.Series,\n) -> pd.Series:\n    round_position_contracts_held = position_contracts_held.round()\n    position_change = (\n        round_position_contracts_held - round_position_contracts_held.shift(1)\n    )\n    abs_trades = position_change.abs()",
        "detail": "almanac.analysis.cost_calculation",
        "documentation": {}
    },
    {
        "label": "calculate_deflated_costs",
        "kind": 2,
        "importPath": "almanac.analysis.cost_calculation",
        "description": "almanac.analysis.cost_calculation",
        "peekOfCode": "def calculate_deflated_costs(\n    stddev_series: standardDeviation, cost_per_contract: float\n) -> pd.Series:\n    stdev_daily_price = stddev_series.daily_risk_price_terms()\n    final_stdev = stdev_daily_price[-1]\n    cost_deflator = stdev_daily_price / final_stdev\n    historic_cost_per_contract = cost_per_contract * cost_deflator\n    return historic_cost_per_contract",
        "detail": "almanac.analysis.cost_calculation",
        "documentation": {}
    },
    {
        "label": "ewmac",
        "kind": 2,
        "importPath": "almanac.analysis.forecasts",
        "description": "almanac.analysis.forecasts",
        "peekOfCode": "def ewmac(adjusted_price: pd.Series, fast_span=16, slow_span=64) -> pd.Series:\n    slow_ewma = adjusted_price.ewm(span=slow_span, min_periods=2).mean()\n    fast_ewma = adjusted_price.ewm(span=fast_span, min_periods=2).mean()\n    return fast_ewma - slow_ewma\ndef calculate_forecast_for_ewmac(\n    adjusted_price: pd.Series, stdev_ann_perc: standardDeviation, fast_span: int = 64\n):\n    scaled_ewmac = calculate_scaled_forecast_for_ewmac(\n        adjusted_price=adjusted_price,\n        stdev_ann_perc=stdev_ann_perc,",
        "detail": "almanac.analysis.forecasts",
        "documentation": {}
    },
    {
        "label": "calculate_forecast_for_ewmac",
        "kind": 2,
        "importPath": "almanac.analysis.forecasts",
        "description": "almanac.analysis.forecasts",
        "peekOfCode": "def calculate_forecast_for_ewmac(\n    adjusted_price: pd.Series, stdev_ann_perc: standardDeviation, fast_span: int = 64\n):\n    scaled_ewmac = calculate_scaled_forecast_for_ewmac(\n        adjusted_price=adjusted_price,\n        stdev_ann_perc=stdev_ann_perc,\n        fast_span=fast_span,\n    )\n    capped_ewmac = scaled_ewmac.clip(-20, 20)\n    return capped_ewmac",
        "detail": "almanac.analysis.forecasts",
        "documentation": {}
    },
    {
        "label": "calculate_scaled_forecast_for_ewmac",
        "kind": 2,
        "importPath": "almanac.analysis.forecasts",
        "description": "almanac.analysis.forecasts",
        "peekOfCode": "def calculate_scaled_forecast_for_ewmac(\n    adjusted_price: pd.Series,\n    stdev_ann_perc: standardDeviation,\n    fast_span: int = 64,\n):\n    scalar_dict = {64: 1.91, 32: 2.79, 16: 4.1, 8: 5.95, 4: 8.53, 2: 12.1}\n    risk_adjusted_ewmac = calculate_risk_adjusted_forecast_for_ewmac(\n        adjusted_price=adjusted_price,\n        stdev_ann_perc=stdev_ann_perc,\n        fast_span=fast_span,",
        "detail": "almanac.analysis.forecasts",
        "documentation": {}
    },
    {
        "label": "calculate_risk_adjusted_forecast_for_ewmac",
        "kind": 2,
        "importPath": "almanac.analysis.forecasts",
        "description": "almanac.analysis.forecasts",
        "peekOfCode": "def calculate_risk_adjusted_forecast_for_ewmac(\n    adjusted_price: pd.Series,\n    stdev_ann_perc: standardDeviation,\n    fast_span: int = 64,\n):\n    ewmac_values = ewmac(adjusted_price, fast_span=fast_span, slow_span=fast_span * 4)\n    daily_price_vol = stdev_ann_perc.daily_risk_price_terms()\n    risk_adjusted_ewmac = ewmac_values / daily_price_vol\n    return risk_adjusted_ewmac",
        "detail": "almanac.analysis.forecasts",
        "documentation": {}
    },
    {
        "label": "correlationEstimate",
        "kind": 6,
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "peekOfCode": "class correlationEstimate(object):\n    def __init__(self, values: pd.DataFrame):\n        columns = values.columns\n        values = values.values\n        self._values = values\n        self._columns = columns\n    def __repr__(self):\n        return str(self.as_pd())\n    def __len__(self):\n        return len(self.columns)",
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "portfolioWeights",
        "kind": 6,
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "peekOfCode": "class portfolioWeights(dict):\n    @property\n    def weights(self):\n        return list(self.values())\n    @property\n    def assets(self):\n        return list(self.keys())\n    def multiply_by_float(self, multiplier: float):\n        list_of_assets = self.assets\n        list_of_weights = [self[asset] for asset in list_of_assets]",
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "handcraftPortfolio",
        "kind": 6,
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "peekOfCode": "class handcraftPortfolio(object):\n    def __init__(self, correlation: correlationEstimate):\n        self._correlation = correlation\n    @property\n    def correlation(self) -> correlationEstimate:\n        return self._correlation\n    @property\n    def size(self) -> int:\n        return len(self.correlation)\n    @property",
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "cluster_correlation_matrix",
        "kind": 2,
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "peekOfCode": "def cluster_correlation_matrix(corr_matrix: correlationEstimate, cluster_size: int = 2):\n    clusters = get_list_of_clusters_for_correlation_matrix(\n        corr_matrix, cluster_size=cluster_size\n    )\n    clusters_as_names = from_cluster_index_to_asset_names(\n        clusters, corr_matrix)\n    if PRINT_TRACE:\n        print(\"Cluster split: %s\" % str(clusters_as_names))\n    return clusters_as_names\ndef get_list_of_clusters_for_correlation_matrix(",
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "get_list_of_clusters_for_correlation_matrix",
        "kind": 2,
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "peekOfCode": "def get_list_of_clusters_for_correlation_matrix(\n    corr_matrix: np.array, cluster_size: int = 2\n) -> list:\n    corr_as_np = corr_matrix.values\n    try:\n        clusters = get_list_of_clusters_for_correlation_matrix_as_np(\n            corr_as_np, cluster_size=cluster_size\n        )\n    except:\n        clusters = arbitrary_split_of_correlation_matrix(",
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "get_list_of_clusters_for_correlation_matrix_as_np",
        "kind": 2,
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "peekOfCode": "def get_list_of_clusters_for_correlation_matrix_as_np(\n    corr_as_np: np.array, cluster_size: int = 2\n) -> list:\n    d = sch.distance.pdist(corr_as_np)\n    L = sch.linkage(d, method=\"complete\")\n    cutoff = cutoff_distance_to_guarantee_N_clusters(\n        corr_as_np, L=L, cluster_size=cluster_size\n    )\n    ind = sch.fcluster(L, cutoff, \"distance\")\n    ind = list(ind)",
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "cutoff_distance_to_guarantee_N_clusters",
        "kind": 2,
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "peekOfCode": "def cutoff_distance_to_guarantee_N_clusters(\n    corr_as_np: np.array, L: np.array, cluster_size: int = 2\n):\n    # assert cluster_size==2\n    N = len(corr_as_np)\n    return L[N - cluster_size][2] - 0.000001\ndef arbitrary_split_of_correlation_matrix(\n    corr_matrix: np.array, cluster_size: int = 2\n) -> list:\n    # split correlation of 3 or more assets",
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "arbitrary_split_of_correlation_matrix",
        "kind": 2,
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "peekOfCode": "def arbitrary_split_of_correlation_matrix(\n    corr_matrix: np.array, cluster_size: int = 2\n) -> list:\n    # split correlation of 3 or more assets\n    count_assets = len(corr_matrix)\n    return arbitrary_split_for_asset_length(count_assets, cluster_size=cluster_size)\ndef arbitrary_split_for_asset_length(count_assets: int, cluster_size: int = 2) -> list:\n    return [(x % cluster_size) + 1 for x in range(count_assets)]\ndef from_cluster_index_to_asset_names(\n    clusters: list, corr_matrix: correlationEstimate",
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "arbitrary_split_for_asset_length",
        "kind": 2,
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "peekOfCode": "def arbitrary_split_for_asset_length(count_assets: int, cluster_size: int = 2) -> list:\n    return [(x % cluster_size) + 1 for x in range(count_assets)]\ndef from_cluster_index_to_asset_names(\n    clusters: list, corr_matrix: correlationEstimate\n) -> list:\n    all_clusters = list(set(clusters))\n    asset_names = corr_matrix.columns\n    list_of_asset_clusters = [\n        get_asset_names_for_cluster_index(cluster_id, clusters, asset_names)\n        for cluster_id in all_clusters",
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "from_cluster_index_to_asset_names",
        "kind": 2,
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "peekOfCode": "def from_cluster_index_to_asset_names(\n    clusters: list, corr_matrix: correlationEstimate\n) -> list:\n    all_clusters = list(set(clusters))\n    asset_names = corr_matrix.columns\n    list_of_asset_clusters = [\n        get_asset_names_for_cluster_index(cluster_id, clusters, asset_names)\n        for cluster_id in all_clusters\n    ]\n    return list_of_asset_clusters",
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "get_asset_names_for_cluster_index",
        "kind": 2,
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "peekOfCode": "def get_asset_names_for_cluster_index(\n    cluster_id: int, clusters: list, asset_names: list\n):\n    list_of_assets = [\n        asset for asset, cluster in zip(asset_names, clusters) if cluster == cluster_id\n    ]\n    return list_of_assets\nclass portfolioWeights(dict):\n    @property\n    def weights(self):",
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "flatten_list",
        "kind": 2,
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "peekOfCode": "def flatten_list(some_list):\n    flattened = [item for sublist in some_list for item in sublist]\n    return flattened\ndef one_over_n_weights_given_asset_names(list_of_asset_names: list) -> portfolioWeights:\n    weight = 1.0 / len(list_of_asset_names)\n    return portfolioWeights(\n        [(asset_name, weight) for asset_name in list_of_asset_names]\n    )\nclass handcraftPortfolio(object):\n    def __init__(self, correlation: correlationEstimate):",
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "one_over_n_weights_given_asset_names",
        "kind": 2,
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "peekOfCode": "def one_over_n_weights_given_asset_names(list_of_asset_names: list) -> portfolioWeights:\n    weight = 1.0 / len(list_of_asset_names)\n    return portfolioWeights(\n        [(asset_name, weight) for asset_name in list_of_asset_names]\n    )\nclass handcraftPortfolio(object):\n    def __init__(self, correlation: correlationEstimate):\n        self._correlation = correlation\n    @property\n    def correlation(self) -> correlationEstimate:",
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "create_sub_portfolios_from_portfolio",
        "kind": 2,
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "peekOfCode": "def create_sub_portfolios_from_portfolio(handcraft_portfolio: handcraftPortfolio):\n    clusters_as_names = cluster_correlation_matrix(\n        handcraft_portfolio.correlation)\n    sub_portfolios = create_sub_portfolios_given_clusters(\n        clusters_as_names, handcraft_portfolio\n    )\n    return sub_portfolios\ndef create_sub_portfolios_given_clusters(\n    clusters_as_names: list, handcraft_portfolio: handcraftPortfolio\n) -> list:",
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "create_sub_portfolios_given_clusters",
        "kind": 2,
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "peekOfCode": "def create_sub_portfolios_given_clusters(\n    clusters_as_names: list, handcraft_portfolio: handcraftPortfolio\n) -> list:\n    list_of_sub_portfolios = [\n        handcraft_portfolio.subset(subset_of_asset_names)\n        for subset_of_asset_names in clusters_as_names\n    ]\n    return list_of_sub_portfolios\ndef aggregate_risk_weights_over_sub_portfolios(\n    sub_portfolios: list,",
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "aggregate_risk_weights_over_sub_portfolios",
        "kind": 2,
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "peekOfCode": "def aggregate_risk_weights_over_sub_portfolios(\n    sub_portfolios: list,\n) -> portfolioWeights:\n    # sub portfolios guaranteed to be 2 long\n    # We allocate half to each\n    asset_count = len(sub_portfolios)\n    # assert asset_count == 2\n    weights_for_each_subportfolio = [1.0 / asset_count] * asset_count\n    risk_weights_by_portfolio = [\n        sub_portfolio.weights() for sub_portfolio in sub_portfolios",
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "handcrafting_algo",
        "kind": 2,
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "peekOfCode": "def handcrafting_algo(instument_returns):\n    all_returns = pd_readcsv(instument_returns)\n    corr_matrix = correlationEstimate(all_returns.corr())\n    handcraft_portfolio = handcraftPortfolio(corr_matrix)\n    PRINT_TRACE = True\n    portfolio_weights = handcraft_portfolio.weights()\n    return portfolio_weights",
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "PRINT_TRACE",
        "kind": 5,
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "peekOfCode": "PRINT_TRACE = False\nclass correlationEstimate(object):\n    def __init__(self, values: pd.DataFrame):\n        columns = values.columns\n        values = values.values\n        self._values = values\n        self._columns = columns\n    def __repr__(self):\n        return str(self.as_pd())\n    def __len__(self):",
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "calculate_position_series_given_fixed_risk",
        "kind": 2,
        "importPath": "almanac.analysis.positions",
        "description": "almanac.analysis.positions",
        "peekOfCode": "def calculate_position_series_given_fixed_risk(capital: float,\n                                               risk_target_tau: float,\n                                               current_price: pd.Series,\n                                               fx: pd.Series,\n                                               multiplier: float,\n                                               instrument_risk_ann_perc: float) -> pd.Series:\n    # N = (Capital × τ) ÷ (Multiplier × Price × FX × σ %)\n    position_in_contracts = capital * risk_target_tau / \\\n        (multiplier * current_price * fx * instrument_risk_ann_perc)\n    return position_in_contracts",
        "detail": "almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_series_given_variable_risk",
        "kind": 2,
        "importPath": "almanac.analysis.positions",
        "description": "almanac.analysis.positions",
        "peekOfCode": "def calculate_position_series_given_variable_risk(\n    capital: float,\n    risk_target_tau: float,\n    fx: pd.Series,\n    multiplier: float,\n    instrument_risk: standardDeviation,\n) -> pd.Series:\n    # N = (Capital × τ) ÷ (Multiplier × Price × FX × σ %)\n    # resolves to N = (Capital × τ) ÷ (Multiplier × FX × daily stdev price terms × 16)\n    # for simplicity we use the daily risk in price terms, even if we calculated annualised % returns",
        "detail": "almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_series_given_variable_risk_for_dict",
        "kind": 2,
        "importPath": "almanac.analysis.positions",
        "description": "almanac.analysis.positions",
        "peekOfCode": "def calculate_position_series_given_variable_risk_for_dict(\n    capital: float,\n    risk_target_tau: float,\n    idm: float,\n    weights: dict,\n    fx_series_dict: dict,\n    multipliers: dict,\n    std_dev_dict: dict,\n) -> dict:\n    position_series_dict = dict(",
        "detail": "almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_dict_with_trend_filter_applied",
        "kind": 2,
        "importPath": "almanac.analysis.positions",
        "description": "almanac.analysis.positions",
        "peekOfCode": "def calculate_position_dict_with_trend_filter_applied(\n    adjusted_prices_dict: dict,\n    average_position_contracts_dict: dict,\n) -> dict:\n    list_of_instruments = list(adjusted_prices_dict.keys())\n    position_dict_with_trend_filter = dict(\n        [\n            (\n                instrument_code,\n                calculate_position_with_trend_filter_applied(",
        "detail": "almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_with_trend_filter_applied",
        "kind": 2,
        "importPath": "almanac.analysis.positions",
        "description": "almanac.analysis.positions",
        "peekOfCode": "def calculate_position_with_trend_filter_applied(\n    adjusted_price: pd.Series, average_position: pd.Series\n) -> pd.Series:\n    filtered_position = copy(average_position)\n    ewmac_values = ewmac(adjusted_price)\n    bearish = ewmac_values < 0\n    filtered_position[bearish] = 0\n    return filtered_position\ndef calculate_position_dict_with_symmetric_trend_filter_applied(\n    adjusted_prices_dict: dict,",
        "detail": "almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_dict_with_symmetric_trend_filter_applied",
        "kind": 2,
        "importPath": "almanac.analysis.positions",
        "description": "almanac.analysis.positions",
        "peekOfCode": "def calculate_position_dict_with_symmetric_trend_filter_applied(\n    adjusted_prices_dict: dict,\n    average_position_contracts_dict: dict,\n) -> dict:\n    list_of_instruments = list(adjusted_prices_dict.keys())\n    position_dict_with_trend_filter = dict(\n        [\n            (\n                instrument_code,\n                calculate_position_with_symmetric_trend_filter_applied(",
        "detail": "almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_with_symmetric_trend_filter_applied",
        "kind": 2,
        "importPath": "almanac.analysis.positions",
        "description": "almanac.analysis.positions",
        "peekOfCode": "def calculate_position_with_symmetric_trend_filter_applied(\n    adjusted_price: pd.Series, average_position: pd.Series\n) -> pd.Series:\n    filtered_position = copy(average_position)\n    ewmac_values = ewmac(adjusted_price)\n    bearish = ewmac_values < 0\n    filtered_position[bearish] = -filtered_position[bearish]\n    return filtered_position\ndef calculate_position_dict_with_trend_forecast_applied(\n    adjusted_prices_dict: dict,",
        "detail": "almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_dict_with_trend_forecast_applied",
        "kind": 2,
        "importPath": "almanac.analysis.positions",
        "description": "almanac.analysis.positions",
        "peekOfCode": "def calculate_position_dict_with_trend_forecast_applied(\n    adjusted_prices_dict: dict,\n    average_position_contracts_dict: dict,\n    std_dev_dict: dict,\n    fast_span: int = 64,\n) -> dict:\n    list_of_instruments = list(adjusted_prices_dict.keys())\n    position_dict_with_trend_filter = dict(\n        [\n            (",
        "detail": "almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_with_trend_forecast_applied",
        "kind": 2,
        "importPath": "almanac.analysis.positions",
        "description": "almanac.analysis.positions",
        "peekOfCode": "def calculate_position_with_trend_forecast_applied(\n    adjusted_price: pd.Series,\n    average_position: pd.Series,\n    stdev_ann_perc: standardDeviation,\n    fast_span: int = 64,\n) -> pd.Series:\n    from almanac.analysis.forecasts import calculate_forecast_for_ewmac\n    forecast = calculate_forecast_for_ewmac(\n        adjusted_price=adjusted_price,\n        stdev_ann_perc=stdev_ann_perc,",
        "detail": "almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_standard_deviation_for_risk_targeting",
        "kind": 2,
        "importPath": "almanac.analysis.std_for_risk",
        "description": "almanac.analysis.std_for_risk",
        "peekOfCode": "def calculate_standard_deviation_for_risk_targeting(adjusted_price: pd.Series,\n                                                    current_price: pd.Series):\n    daily_price_changes = adjusted_price.diff()\n    percentage_changes = daily_price_changes / current_price.shift(1)\n    # Can do the whole series or recent history\n    recent_daily_std = percentage_changes.tail(30).std()\n    return recent_daily_std*(BUSINESS_DAYS_IN_YEAR**.5)\ndef calculate_variable_standard_deviation_for_risk_targeting(\n    adjusted_price: pd.Series,\n    current_price: pd.Series,",
        "detail": "almanac.analysis.std_for_risk",
        "documentation": {}
    },
    {
        "label": "calculate_variable_standard_deviation_for_risk_targeting",
        "kind": 2,
        "importPath": "almanac.analysis.std_for_risk",
        "description": "almanac.analysis.std_for_risk",
        "peekOfCode": "def calculate_variable_standard_deviation_for_risk_targeting(\n    adjusted_price: pd.Series,\n    current_price: pd.Series,\n    use_perc_returns: bool = True,\n    annualise_stdev: bool = True,\n) -> pd.Series:\n    from almanac.analysis.calculate_returns import calculate_percentage_returns, calculate_daily_returns\n    if use_perc_returns:\n        daily_returns = calculate_percentage_returns(\n            adjusted_price=adjusted_price, current_price=current_price",
        "detail": "almanac.analysis.std_for_risk",
        "documentation": {}
    },
    {
        "label": "calculate_variable_standard_deviation_for_risk_targeting_from_dict",
        "kind": 2,
        "importPath": "almanac.analysis.std_for_risk",
        "description": "almanac.analysis.std_for_risk",
        "peekOfCode": "def calculate_variable_standard_deviation_for_risk_targeting_from_dict(\n    adjusted_prices: dict,\n    current_prices: dict,\n    use_perc_returns: bool = True,\n    annualise_stdev: bool = True,\n) -> dict:\n    from almanac.utils.standardDeviation import standardDeviation\n    std_dev_dict = dict(\n        [\n            (",
        "detail": "almanac.analysis.std_for_risk",
        "documentation": {}
    },
    {
        "label": "ArgumentError",
        "kind": 6,
        "importPath": "almanac.analysis.turnover",
        "description": "almanac.analysis.turnover",
        "peekOfCode": "class ArgumentError(Exception):\n    pass\ndef calculate_turnover(position):\n    number_of_trades = position.diff()\n    number_of_trades = number_of_trades.abs()\n    daily_trades = number_of_trades.groupby(pd.Grouper(freq='D')).sum()\n    daily_mean = position.resample('D').mean()\n    rolling_mean_300_days = daily_mean.rolling(window=300, min_periods=1).mean()\n    rolling_mean_300_days = rolling_mean_300_days.replace({0: np.nan}).fillna(method='bfill')\n    as_proportion_of_average = daily_trades / rolling_mean_300_days.abs().shift(1)",
        "detail": "almanac.analysis.turnover",
        "documentation": {}
    },
    {
        "label": "calculate_turnover",
        "kind": 2,
        "importPath": "almanac.analysis.turnover",
        "description": "almanac.analysis.turnover",
        "peekOfCode": "def calculate_turnover(position):\n    number_of_trades = position.diff()\n    number_of_trades = number_of_trades.abs()\n    daily_trades = number_of_trades.groupby(pd.Grouper(freq='D')).sum()\n    daily_mean = position.resample('D').mean()\n    rolling_mean_300_days = daily_mean.rolling(window=300, min_periods=1).mean()\n    rolling_mean_300_days = rolling_mean_300_days.replace({0: np.nan}).fillna(method='bfill')\n    as_proportion_of_average = daily_trades / rolling_mean_300_days.abs().shift(1)\n    average_daily = as_proportion_of_average.mean()\n    annualised_turnover = average_daily * 256",
        "detail": "almanac.analysis.turnover",
        "documentation": {}
    },
    {
        "label": "turnover",
        "kind": 2,
        "importPath": "almanac.analysis.turnover",
        "description": "almanac.analysis.turnover",
        "peekOfCode": "def turnover(position, weightage_dict=1):\n    if isinstance(position,dict):\n        turnover_dict = dict(\n            [\n                (\n                    instrument_code,\n                    calculate_turnover(\n                        position=position[instrument_code],\n                    ),\n                )",
        "detail": "almanac.analysis.turnover",
        "documentation": {}
    },
    {
        "label": "DEFAULT_DATE_FORMAT",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "DEFAULT_DATE_FORMAT = \"%Y-%m-%d\"\nFrequency = Enum(\"Frequency\", \"Natural Year Month Week BDay\")\nNATURAL = Frequency.Natural\nYEAR = Frequency.Year\nMONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "Frequency",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "Frequency = Enum(\"Frequency\", \"Natural Year Month Week BDay\")\nNATURAL = Frequency.Natural\nYEAR = Frequency.Year\nMONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "NATURAL",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "NATURAL = Frequency.Natural\nYEAR = Frequency.Year\nMONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "YEAR",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "YEAR = Frequency.Year\nMONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "MONTH",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "MONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "WEEK",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "WEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "BUSINESS_DAYS_IN_YEAR",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "BUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "WEEKS_PER_YEAR",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "WEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "MONTHS_PER_YEAR",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "MONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "SECONDS_PER_YEAR",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "SECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "PERIODS_PER_YEAR",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "PERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "QUANT_PERCENTILE_EXTREME",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "QUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "QUANT_PERCENTILE_STD",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "QUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "NORMAL_DISTR_RATIO",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "NORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "fx_dict",
        "kind": 5,
        "importPath": "almanac.config.fx_dict",
        "description": "almanac.config.fx_dict",
        "peekOfCode": "fx_dict = {\n    \"OAT\": \"eur\",\n    \"SHATZ\": \"eur\",\n    \"BOBL\": \"eur\",\n    \"BUND\": \"eur\",\n    \"BUXL\": \"eur\",\n    \"BTP\": \"eur\",\n    \"BTP3\": \"eur\",\n    \"JGB\": \"jpy\",\n    \"BONO\": \"eur\",",
        "detail": "almanac.config.fx_dict",
        "documentation": {}
    },
    {
        "label": "cost_per_contract_dict",
        "kind": 5,
        "importPath": "almanac.config.instruments",
        "description": "almanac.config.instruments",
        "peekOfCode": "cost_per_contract_dict = {'US2': 6.1, \"US3\": 8.26, 'US5': 5.306, 'US10': 8.8, 'US30': 15.58, 'US20': 17.04, 'US10U': 9.15, 'OAT': 8.81, 'SHATZ': 4.21, 'BOBL': 7.01, 'BUND': 6.55, 'BUXL': 15.56, 'BTP': 7.96, 'BTP3': 7.98, 'JGB': 5837, 'BONO': 59, 'DOW': 0.52, 'NASDAQ_micro': 1.22, 'R1000': 22, 'SP400': 26.57, 'SP500_micro': 1.5, 'AEX': 16.39, 'DAX': 1.98, 'SMI': 12.1, 'DJSTX-SMALL': 2, 'EU-DIV30': 1.97, 'EURO600': 2.07, 'EUROSTX': 7.3, 'EU-AUTO': 13.8, 'EU-BASIC': 25.5, 'EU-HEALTH': 18.70, 'EU-INSURE': 8.23, 'EU-OIL': 9.35, 'EU-TECH': 16.63, 'EU-UTILS': 9.98, 'MSCIASIA': 18.3, 'FTSECHINAA': .5, 'FTSECHINAH': 9.1, 'NIFTY': 0.11, 'NIKKEI': 328, 'NIKKEI400': 432, 'MUMMY': 568, 'TOPIX': 261,\n                          'MSCISING': 7.3, 'VIX': 15.73, 'V2X': 1.36, 'AUD': 2.56, 'CAD': 5.12, 'CHF': 8.4, 'EUR': 6.7, 'GBP': 23.43, 'JPY': 254, 'NOK': 71, 'NZD': 6.47, 'SEK': 57.6, 'GBPJPY': 3456, 'BRE': 0.0022, 'INR': 240, 'MXP': 5.65, 'RUR': 300, 'SGD': 17.68, 'ALUMINIUM': 42.5, 'COPPER': 13.23, 'GOLD_micro': 1.75, 'IRON': 11.63, 'PALLAD': 176.5, 'PLAT': 12.74, 'SILVER': 5.38, 'BITCOIN': 5.15, 'ETHEREUM': 61.94, 'BRENT-LAST': 23.25, 'CRUDE_W_mini': 19.14, 'GASOILINE': 42.75, 'GAS_US_mini': 7.21, 'HEATOIL': 38.61, 'BBCOMM': 11.13, 'CHEESE': 106.68, 'CORN': 896, 'FEEDCOW': 2688, 'LEANHOG': 1377, 'LIVECOW': 1092, 'OAT': 174.3, 'REDWHEAT': 1560, 'RICE': 47.51, 'SOYBEAN': 1639, 'SOYMEAL': 10.7, 'SOYOIL': 1260, 'WHEAT': 1697}\nmultipliers = {\n    \"US2\": 2000,\n    \"US3\": 2000,\n    \"US5\": 1000,\n    \"US10\": 1000,\n    \"USIRS10\": 1000,\n    \"US20\": 1000,\n    \"US30\": 1000,",
        "detail": "almanac.config.instruments",
        "documentation": {}
    },
    {
        "label": "multipliers",
        "kind": 5,
        "importPath": "almanac.config.instruments",
        "description": "almanac.config.instruments",
        "peekOfCode": "multipliers = {\n    \"US2\": 2000,\n    \"US3\": 2000,\n    \"US5\": 1000,\n    \"US10\": 1000,\n    \"USIRS10\": 1000,\n    \"US20\": 1000,\n    \"US30\": 1000,\n    \"USIRS5ERIS\": 1000,\n    \"US10U\": 1000,",
        "detail": "almanac.config.instruments",
        "documentation": {}
    },
    {
        "label": "instrument_weights",
        "kind": 5,
        "importPath": "almanac.config.instruments",
        "description": "almanac.config.instruments",
        "peekOfCode": "instrument_weights = {'FEEDCOW': 0.015625, 'SHATZ': 0.03125, 'AUD': 0.0009765625, 'BONO': 0.015625, 'SP400': 0.0078125, 'NZD': 0.00390625, 'IRON': 0.0009765625, 'CRUDE_W_mini': 0.00390625, 'EURO600': 0.001953125, 'MXP': 0.00390625, 'GBPJPY': 0.0078125, 'BTP': 0.001953125, 'V2X': 0.03125, 'EU-AUTO': 0.001953125, 'ETHEREUM': 0.03125, 'US2': 0.015625, 'TOPIX': 0.03125, 'NASDAQ_micro': 0.015625, 'SMI': 0.015625, 'BRENT-LAST': 0.015625, 'CHEESE': 0.00390625, 'PALLAD': 0.015625, 'NIKKEI': 0.03125, 'SOYMEAL': 0.001953125, 'DJSTX-SMALL': 0.001953125, 'R1000': 0.015625, 'RUR': 0.015625, 'GBP': 0.0009765625, 'EUR': 0.00390625, 'GASOILINE': 0.03125, 'EU-BASIC': 0.00390625, 'EU-INSURE': 0.015625, 'US5': 0.015625, 'US30': 0.015625, 'REDWHEAT': 0.015625, 'BRE': 0.0009765625, 'US20': 0.0078125, 'US10U': 0.015625, 'DAX': 0.001953125, 'SOYOIL': 0.0078125, 'US3': 0.0078125, 'COPPER': 0.0009765625, 'MSCISING': 0.0078125,\n                      'RICE': 0.00390625, 'EU-DIV30': 0.0078125, 'CAD': 0.0078125, 'VIX': 0.0625, 'NIKKEI400': 0.03125, 'DOW': 0.0078125, 'BUND': 0.015625, 'GOLD_micro': 0.00390625, 'MSCIASIA': 0.0078125, 'SEK': 0.001953125, 'SGD': 0.0625, 'BUXL': 0.015625, 'BOBL': 0.015625, 'CORN': 0.0078125, 'EU-OIL': 0.0078125, 'WHEAT': 0.001953125, 'MUMMY': 0.015625, 'HEATOIL': 0.015625, 'EU-UTILS': 0.0078125, 'INR': 0.0078125, 'LIVECOW': 0.015625, 'EU-TECH': 0.001953125, 'BBCOMM': 0.015625, 'AEX': 0.001953125, 'OAT': 0.015625, 'NIFTY': 0.0009765625, 'EUROSTX': 0.0078125, 'FTSECHINAA': 0.0009765625, 'SILVER': 0.0078125, 'BITCOIN': 0.001953125, 'JPY': 0.015625, 'GAS_US_mini': 0.0078125, 'FTSECHINAH': 0.015625, 'SOYBEAN': 0.0078125, 'PLAT': 0.0009765625, 'SP500_micro': 0.0078125, 'NOK': 0.0009765625, 'ALUMINIUM': 0.015625, 'BTP3': 0.0078125, 'CHF': 0.0009765625, 'US10': 0.015625, 'JGB': 0.015625, 'EU-HEALTH': 0.0078125, 'LEANHOG': 0.0078125}\nINSTRUMENT_LIST = list(cost_per_contract_dict.keys())",
        "detail": "almanac.config.instruments",
        "documentation": {}
    },
    {
        "label": "INSTRUMENT_LIST",
        "kind": 5,
        "importPath": "almanac.config.instruments",
        "description": "almanac.config.instruments",
        "peekOfCode": "INSTRUMENT_LIST = list(cost_per_contract_dict.keys())",
        "detail": "almanac.config.instruments",
        "documentation": {}
    },
    {
        "label": "pd_readcsv",
        "kind": 2,
        "importPath": "almanac.data.data",
        "description": "almanac.data.data",
        "peekOfCode": "def pd_readcsv(filename: str, date_format=DEFAULT_DATE_FORMAT, date_index_name: str = \"index\") -> pd.DataFrame:\n    ans = pd.read_csv(filename)\n    ans.index = pd.to_datetime(ans[date_index_name], format=date_format).values\n    del ans[date_index_name]\n    ans.index.name = None\n    return ans\ndef get_data_dict(data_path, INSTRUMENT_LIST):\n    all_data = dict(\n        [\n            (instrument_code, pd_readcsv(f\"{data_path}{instrument_code}.csv\"))",
        "detail": "almanac.data.data",
        "documentation": {}
    },
    {
        "label": "get_data_dict",
        "kind": 2,
        "importPath": "almanac.data.data",
        "description": "almanac.data.data",
        "peekOfCode": "def get_data_dict(data_path, INSTRUMENT_LIST):\n    all_data = dict(\n        [\n            (instrument_code, pd_readcsv(f\"{data_path}{instrument_code}.csv\"))\n            for instrument_code in INSTRUMENT_LIST\n        ]\n    )\n    adjusted_prices = dict(\n        [\n            (instrument_code, data_for_instrument.adjusted)",
        "detail": "almanac.data.data",
        "documentation": {}
    },
    {
        "label": "StrategyBase",
        "kind": 6,
        "importPath": "almanac.strategy.baseStrategy",
        "description": "almanac.strategy.baseStrategy",
        "peekOfCode": "class StrategyBase:\n    def __init__(self, data_path: str, fx_path: str, instrument_list: list,\n                 instrument_weights: dict, multipliers: dict, idm: Union[int, float],\n                 risk_target: Union[int, float], capital: int, cost_per_contract_dict: dict):\n        self.data_path = data_path\n        self.fx_path = fx_path\n        self.instrument_list = instrument_list\n        self.instrument_weights = instrument_weights\n        self.multipliers = multipliers\n        self.idm = idm",
        "detail": "almanac.strategy.baseStrategy",
        "documentation": {}
    },
    {
        "label": "Strategy1",
        "kind": 6,
        "importPath": "almanac.strategy.strategy1",
        "description": "almanac.strategy.strategy1",
        "peekOfCode": "class Strategy1:\n    def __init__(self, data_path: str, multiplier: int, risk_target: Union[int, float], capital: int):\n        self.data_path = data_path\n        self.multiplier = multiplier\n        self.risk_target = risk_target\n        self.capital = capital\n        self.data = self.get_data()\n        self.adjusted_price = self.data.adjusted\n        self.current_price = self.data.underlying\n        self.fx_series = pd.Series(1, index=self.data.index)",
        "detail": "almanac.strategy.strategy1",
        "documentation": {}
    },
    {
        "label": "Strategy2",
        "kind": 6,
        "importPath": "almanac.strategy.strategy2",
        "description": "almanac.strategy.strategy2",
        "peekOfCode": "class Strategy2:\n    def __init__(self, data_path: str, multiplier: int, risk_target: Union[int, float], capital: int):\n        self.data_path = data_path\n        self.multiplier = multiplier\n        self.risk_target = risk_target\n        self.capital = capital\n        self.data = self.get_data()\n        self.adjusted_price = self.data.adjusted\n        self.current_price = self.data.underlying\n        self.fx_series = pd.Series(1, index=self.data.index)",
        "detail": "almanac.strategy.strategy2",
        "documentation": {}
    },
    {
        "label": "Strategy3",
        "kind": 6,
        "importPath": "almanac.strategy.strategy3",
        "description": "almanac.strategy.strategy3",
        "peekOfCode": "class Strategy3(StrategyBase):\n    def __init__(self, data_path: str, multiplier: int, risk_target: Union[int, float], capital: int):\n        self.data_path = data_path\n        self.multiplier = multiplier\n        self.risk_target = risk_target\n        self.capital = capital\n        self.data = self.get_data()\n        self.adjusted_price = self.data.adjusted\n        self.current_price = self.data.underlying\n        self.fx_series = pd.Series(1, index=self.data.index)",
        "detail": "almanac.strategy.strategy3",
        "documentation": {}
    },
    {
        "label": "Strategy4",
        "kind": 6,
        "importPath": "almanac.strategy.strategy4",
        "description": "almanac.strategy.strategy4",
        "peekOfCode": "class Strategy4(StrategyBase):\n    def __init__(\n        self,\n        data_path: str,\n        fx_path: str,\n        instrument_list: list,\n        instrument_weights: dict,\n        multipliers: dict,\n        idm: Union[int, float],\n        risk_target: Union[int, float],",
        "detail": "almanac.strategy.strategy4",
        "documentation": {}
    },
    {
        "label": "portfolio_returns",
        "kind": 5,
        "importPath": "almanac.strategy.strategy4_handcrafting",
        "description": "almanac.strategy.strategy4_handcrafting",
        "peekOfCode": "portfolio_returns = 'almanac/sample_data/jumbo_instrument_returns.csv'\nportfolio_weights = handcrafting_algo(portfolio_returns)\nprint(portfolio_weights)",
        "detail": "almanac.strategy.strategy4_handcrafting",
        "documentation": {}
    },
    {
        "label": "portfolio_weights",
        "kind": 5,
        "importPath": "almanac.strategy.strategy4_handcrafting",
        "description": "almanac.strategy.strategy4_handcrafting",
        "peekOfCode": "portfolio_weights = handcrafting_algo(portfolio_returns)\nprint(portfolio_weights)",
        "detail": "almanac.strategy.strategy4_handcrafting",
        "documentation": {}
    },
    {
        "label": "Strategy5",
        "kind": 6,
        "importPath": "almanac.strategy.strategy5",
        "description": "almanac.strategy.strategy5",
        "peekOfCode": "class Strategy5(StrategyBase):\n    def __init__(\n        self,\n        data_path: str,\n        fx_path: str,\n        instrument_list: list,\n        instrument_weights: dict,\n        multipliers: dict,\n        idm: Union[int, float],\n        risk_target: Union[int, float],",
        "detail": "almanac.strategy.strategy5",
        "documentation": {}
    },
    {
        "label": "Strategy6",
        "kind": 6,
        "importPath": "almanac.strategy.strategy6",
        "description": "almanac.strategy.strategy6",
        "peekOfCode": "class Strategy6(StrategyBase):\n    def __init__(\n        self,\n        data_path: str,\n        fx_path: str,\n        instrument_list: list,\n        instrument_weights: dict,\n        multipliers: dict,\n        idm: Union[int, float],\n        risk_target: Union[int, float],",
        "detail": "almanac.strategy.strategy6",
        "documentation": {}
    },
    {
        "label": "Strategy7",
        "kind": 6,
        "importPath": "almanac.strategy.strategy7",
        "description": "almanac.strategy.strategy7",
        "peekOfCode": "class Strategy7(StrategyBase):\n    def __init__(\n        self,\n        data_path: str,\n        fx_path: str,\n        instrument_list: list,\n        instrument_weights: dict,\n        multipliers: dict,\n        idm: Union[int, float],\n        risk_target: Union[int, float],",
        "detail": "almanac.strategy.strategy7",
        "documentation": {}
    },
    {
        "label": "create_fx_series_given_adjusted_prices_dict",
        "kind": 2,
        "importPath": "almanac.utils.fx_series",
        "description": "almanac.utils.fx_series",
        "peekOfCode": "def create_fx_series_given_adjusted_prices_dict(fx_path, adjusted_prices_dict: dict) -> dict:\n    fx_series_dict = dict([(instrument_code,\n                            create_fx_series_given_adjusted_prices(fx_path, instrument_code, adjusted_prices),)\n                           for instrument_code, adjusted_prices in adjusted_prices_dict.items()])\n    return fx_series_dict\ndef create_fx_series_given_adjusted_prices(fx_path, instrument_code: str, adjusted_prices: pd.Series) -> pd.Series:\n    currency_for_instrument = fx_dict.get(instrument_code, \"usd\")\n    if currency_for_instrument == \"usd\":\n        return pd.Series(1, index=adjusted_prices.index)\n    fx_prices = get_fx_prices(fx_path, currency_for_instrument)",
        "detail": "almanac.utils.fx_series",
        "documentation": {}
    },
    {
        "label": "create_fx_series_given_adjusted_prices",
        "kind": 2,
        "importPath": "almanac.utils.fx_series",
        "description": "almanac.utils.fx_series",
        "peekOfCode": "def create_fx_series_given_adjusted_prices(fx_path, instrument_code: str, adjusted_prices: pd.Series) -> pd.Series:\n    currency_for_instrument = fx_dict.get(instrument_code, \"usd\")\n    if currency_for_instrument == \"usd\":\n        return pd.Series(1, index=adjusted_prices.index)\n    fx_prices = get_fx_prices(fx_path, currency_for_instrument)\n    fx_prices_aligned = fx_prices.reindex(adjusted_prices.index).ffill()\n    return fx_prices_aligned\ndef get_fx_prices(fx_path, currency: str) -> pd.Series:\n    prices_as_df = pd_readcsv(f\"{fx_path}{currency}_fx.csv\")\n    return prices_as_df.squeeze()",
        "detail": "almanac.utils.fx_series",
        "documentation": {}
    },
    {
        "label": "get_fx_prices",
        "kind": 2,
        "importPath": "almanac.utils.fx_series",
        "description": "almanac.utils.fx_series",
        "peekOfCode": "def get_fx_prices(fx_path, currency: str) -> pd.Series:\n    prices_as_df = pd_readcsv(f\"{fx_path}{currency}_fx.csv\")\n    return prices_as_df.squeeze()",
        "detail": "almanac.utils.fx_series",
        "documentation": {}
    },
    {
        "label": "standardDeviation",
        "kind": 6,
        "importPath": "almanac.utils.standardDeviation",
        "description": "almanac.utils.standardDeviation",
        "peekOfCode": "class standardDeviation(pd.Series):\n    ## class that can be eithier % or price based standard deviation estimate\n    def __init__(\n        self,\n        adjusted_price: pd.Series,\n        current_price: pd.Series,\n        use_perc_returns: bool = True,\n        annualise_stdev: bool = True,\n    ):\n        stdev = calculate_variable_standard_deviation_for_risk_targeting(",
        "detail": "almanac.utils.standardDeviation",
        "documentation": {}
    },
    {
        "label": "periods_per_year",
        "kind": 2,
        "importPath": "almanac.utils.utils",
        "description": "almanac.utils.utils",
        "peekOfCode": "def periods_per_year(at_frequency: Frequency):\n    if at_frequency == NATURAL:\n        return BUSINESS_DAYS_IN_YEAR\n    else:\n        return PERIODS_PER_YEAR[at_frequency]\ndef years_in_data(some_data: pd.Series) -> float:\n    datediff = some_data.index[-1] - some_data.index[0]\n    seconds_in_data = datediff.total_seconds()\n    return seconds_in_data / SECONDS_PER_YEAR\ndef sum_at_frequency(perc_return: pd.Series,",
        "detail": "almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "years_in_data",
        "kind": 2,
        "importPath": "almanac.utils.utils",
        "description": "almanac.utils.utils",
        "peekOfCode": "def years_in_data(some_data: pd.Series) -> float:\n    datediff = some_data.index[-1] - some_data.index[0]\n    seconds_in_data = datediff.total_seconds()\n    return seconds_in_data / SECONDS_PER_YEAR\ndef sum_at_frequency(perc_return: pd.Series,\n                     at_frequency: Frequency = NATURAL) -> pd.Series:\n    if at_frequency == NATURAL:\n        return perc_return\n    at_frequency_str_dict = {\n        YEAR: \"Y\",",
        "detail": "almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "sum_at_frequency",
        "kind": 2,
        "importPath": "almanac.utils.utils",
        "description": "almanac.utils.utils",
        "peekOfCode": "def sum_at_frequency(perc_return: pd.Series,\n                     at_frequency: Frequency = NATURAL) -> pd.Series:\n    if at_frequency == NATURAL:\n        return perc_return\n    at_frequency_str_dict = {\n        YEAR: \"Y\",\n        WEEK: \"7D\",\n        MONTH: \"1M\"}\n    at_frequency_str = at_frequency_str_dict[at_frequency]\n    perc_return_at_freq = perc_return.resample(at_frequency_str).sum()",
        "detail": "almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "ann_mean_given_frequency",
        "kind": 2,
        "importPath": "almanac.utils.utils",
        "description": "almanac.utils.utils",
        "peekOfCode": "def ann_mean_given_frequency(perc_return_at_freq: pd.Series,\n                             at_frequency: Frequency) -> float:\n    mean_at_frequency = perc_return_at_freq.mean()\n    periods_per_year_for_frequency = periods_per_year(at_frequency)\n    annualised_mean = mean_at_frequency * periods_per_year_for_frequency\n    return annualised_mean\ndef ann_std_given_frequency(perc_return_at_freq: pd.Series,\n                            at_frequency: Frequency) -> float:\n    std_at_frequency = perc_return_at_freq.std()\n    periods_per_year_for_frequency = periods_per_year(at_frequency)",
        "detail": "almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "ann_std_given_frequency",
        "kind": 2,
        "importPath": "almanac.utils.utils",
        "description": "almanac.utils.utils",
        "peekOfCode": "def ann_std_given_frequency(perc_return_at_freq: pd.Series,\n                            at_frequency: Frequency) -> float:\n    std_at_frequency = perc_return_at_freq.std()\n    periods_per_year_for_frequency = periods_per_year(at_frequency)\n    annualised_std = std_at_frequency * (periods_per_year_for_frequency**.5)\n    return annualised_std\ndef demeaned_remove_zeros(x):\n    x[x == 0] = np.nan\n    return x - x.mean()\ndef minimum_capital_for_sub_strategy(",
        "detail": "almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "demeaned_remove_zeros",
        "kind": 2,
        "importPath": "almanac.utils.utils",
        "description": "almanac.utils.utils",
        "peekOfCode": "def demeaned_remove_zeros(x):\n    x[x == 0] = np.nan\n    return x - x.mean()\ndef minimum_capital_for_sub_strategy(\n    multiplier: float,\n    price: float,\n    fx: float,\n    instrument_risk_ann_perc: float,\n    risk_target: float,\n    idm: float,",
        "detail": "almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "minimum_capital_for_sub_strategy",
        "kind": 2,
        "importPath": "almanac.utils.utils",
        "description": "almanac.utils.utils",
        "peekOfCode": "def minimum_capital_for_sub_strategy(\n    multiplier: float,\n    price: float,\n    fx: float,\n    instrument_risk_ann_perc: float,\n    risk_target: float,\n    idm: float,\n    weight: float,\n    contracts: int = 4,\n):",
        "detail": "almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "ArgumentError",
        "kind": 6,
        "importPath": "build.lib.almanac.analysis.calculate_returns",
        "description": "build.lib.almanac.analysis.calculate_returns",
        "peekOfCode": "class ArgumentError(Exception):\n    pass\ndef calculate_returns(\n    position_contracts: Union[dict, pd.Series],\n    adjusted_prices: Union[dict, pd.Series],\n    multipliers: Union[dict, float],\n    fx_series: Union[dict, pd.Series],\n    capital: float,\n    cost_per_contract: Union[dict, float],\n    std_dev: Union[dict, standardDeviation],",
        "detail": "build.lib.almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.calculate_returns",
        "description": "build.lib.almanac.analysis.calculate_returns",
        "peekOfCode": "def calculate_perc_returns(position_contracts_held: pd.Series,\n                           adjusted_price: pd.Series,\n                           fx_series: pd.Series,\n                           multiplier: float,\n                           capital_required: pd.Series,\n                           ) -> pd.Series:\n    return_price_points = (\n        adjusted_price - adjusted_price.shift(1))*position_contracts_held.shift(1)\n    return_instrument_currency = return_price_points * multiplier\n    fx_series_aligned = fx_series.reindex(",
        "detail": "build.lib.almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_percentage_returns",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.calculate_returns",
        "description": "build.lib.almanac.analysis.calculate_returns",
        "peekOfCode": "def calculate_percentage_returns(\n    adjusted_price: pd.Series, current_price: pd.Series\n) -> pd.Series:\n    daily_price_changes = calculate_daily_returns(adjusted_price)\n    percentage_changes = daily_price_changes / current_price.shift(1)\n    return percentage_changes\ndef calculate_daily_returns(adjusted_price: pd.Series) -> pd.Series:\n    return adjusted_price.diff()\ndef calculate_perc_returns_with_costs(\n    position_contracts_held: pd.Series,",
        "detail": "build.lib.almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_daily_returns",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.calculate_returns",
        "description": "build.lib.almanac.analysis.calculate_returns",
        "peekOfCode": "def calculate_daily_returns(adjusted_price: pd.Series) -> pd.Series:\n    return adjusted_price.diff()\ndef calculate_perc_returns_with_costs(\n    position_contracts_held: pd.Series,\n    adjusted_price: pd.Series,\n    fx_series: pd.Series,\n    stdev_series: standardDeviation,\n    multiplier: float,\n    capital_required: float,\n    cost_per_contract: float,",
        "detail": "build.lib.almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns_with_costs",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.calculate_returns",
        "description": "build.lib.almanac.analysis.calculate_returns",
        "peekOfCode": "def calculate_perc_returns_with_costs(\n    position_contracts_held: pd.Series,\n    adjusted_price: pd.Series,\n    fx_series: pd.Series,\n    stdev_series: standardDeviation,\n    multiplier: float,\n    capital_required: float,\n    cost_per_contract: float,\n) -> pd.Series:\n    precost_return_price_points = (",
        "detail": "build.lib.almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns_for_dict_with_costs",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.calculate_returns",
        "description": "build.lib.almanac.analysis.calculate_returns",
        "peekOfCode": "def calculate_perc_returns_for_dict_with_costs(\n    position_contracts_dict: dict,\n    adjusted_prices: dict,\n    multipliers: dict,\n    fx_series: dict,\n    capital: float,\n    cost_per_contract_dict: dict,\n    std_dev_dict: dict,\n) -> dict:\n    perc_returns_dict = dict(",
        "detail": "build.lib.almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_returns_perc_dict",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.calculate_returns",
        "description": "build.lib.almanac.analysis.calculate_returns",
        "peekOfCode": "def calculate_returns_perc_dict(\n    position_contracts_dict: dict,\n    adjusted_prices: dict,\n    multipliers: dict,\n    fx_series: dict,\n    capital: float,\n    cost_per_contract_dict: dict,\n    std_dev_dict: dict,\n) -> dict:\n    perc_returns_dict_with_costs = calculate_perc_returns_for_dict_with_costs(",
        "detail": "build.lib.almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns_for_dict",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.calculate_returns",
        "description": "build.lib.almanac.analysis.calculate_returns",
        "peekOfCode": "def calculate_perc_returns_for_dict(\n    position_contracts_dict: dict,\n    adjusted_prices: dict,\n    multipliers: dict,\n    fx_series: dict,\n    capital: float,\n) -> dict:\n    perc_returns_dict = dict(\n        [\n            (",
        "detail": "build.lib.almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "aggregate_returns",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.calculate_returns",
        "description": "build.lib.almanac.analysis.calculate_returns",
        "peekOfCode": "def aggregate_returns(perc_returns_dict: dict) -> pd.Series:\n    both_returns = perc_returns_to_df(perc_returns_dict)\n    agg = both_returns.sum(axis=1)\n    return agg\ndef perc_returns_to_df(perc_returns_dict: dict) -> pd.DataFrame:\n    both_returns = pd.concat(perc_returns_dict, axis=1)\n    both_returns = both_returns.dropna(how=\"all\")\n    return both_returns\nclass ArgumentError(Exception):\n    pass",
        "detail": "build.lib.almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "perc_returns_to_df",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.calculate_returns",
        "description": "build.lib.almanac.analysis.calculate_returns",
        "peekOfCode": "def perc_returns_to_df(perc_returns_dict: dict) -> pd.DataFrame:\n    both_returns = pd.concat(perc_returns_dict, axis=1)\n    both_returns = both_returns.dropna(how=\"all\")\n    return both_returns\nclass ArgumentError(Exception):\n    pass\ndef calculate_returns(\n    position_contracts: Union[dict, pd.Series],\n    adjusted_prices: Union[dict, pd.Series],\n    multipliers: Union[dict, float],",
        "detail": "build.lib.almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_returns",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.calculate_returns",
        "description": "build.lib.almanac.analysis.calculate_returns",
        "peekOfCode": "def calculate_returns(\n    position_contracts: Union[dict, pd.Series],\n    adjusted_prices: Union[dict, pd.Series],\n    multipliers: Union[dict, float],\n    fx_series: Union[dict, pd.Series],\n    capital: float,\n    cost_per_contract: Union[dict, float],\n    std_dev: Union[dict, standardDeviation],\n    aggregate=True,\n):",
        "detail": "build.lib.almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "Stats",
        "kind": 6,
        "importPath": "build.lib.almanac.analysis.calculate_stats",
        "description": "build.lib.almanac.analysis.calculate_stats",
        "peekOfCode": "class Stats():\n    def __init__(self,perc_return, at_frequency = NATURAL) -> None:\n        self.perc_return = perc_return\n        self.at_frequency = at_frequency\n    def _sum_at_frequency(self):\n        if self.at_frequency == NATURAL:\n            return self.perc_return\n        at_frequency_str_dict = {YEAR: \"Y\", WEEK: \"7D\", MONTH: \"1M\"}\n        at_frequency_str = at_frequency_str_dict[self.at_frequency]\n        perc_return_at_freq = self.perc_return.resample(at_frequency_str).sum()",
        "detail": "build.lib.almanac.analysis.calculate_stats",
        "documentation": {}
    },
    {
        "label": "calculate_costs_deflated_for_vol",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.cost_calculation",
        "description": "build.lib.almanac.analysis.cost_calculation",
        "peekOfCode": "def calculate_costs_deflated_for_vol(\n    stddev_series: standardDeviation,\n    cost_per_contract: float,\n    position_contracts_held: pd.Series,\n) -> pd.Series:\n    round_position_contracts_held = position_contracts_held.round()\n    position_change = (\n        round_position_contracts_held - round_position_contracts_held.shift(1)\n    )\n    abs_trades = position_change.abs()",
        "detail": "build.lib.almanac.analysis.cost_calculation",
        "documentation": {}
    },
    {
        "label": "calculate_deflated_costs",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.cost_calculation",
        "description": "build.lib.almanac.analysis.cost_calculation",
        "peekOfCode": "def calculate_deflated_costs(\n    stddev_series: standardDeviation, cost_per_contract: float\n) -> pd.Series:\n    stdev_daily_price = stddev_series.daily_risk_price_terms()\n    final_stdev = stdev_daily_price[-1]\n    cost_deflator = stdev_daily_price / final_stdev\n    historic_cost_per_contract = cost_per_contract * cost_deflator\n    return historic_cost_per_contract",
        "detail": "build.lib.almanac.analysis.cost_calculation",
        "documentation": {}
    },
    {
        "label": "ewmac",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.forecasts",
        "description": "build.lib.almanac.analysis.forecasts",
        "peekOfCode": "def ewmac(adjusted_price: pd.Series, fast_span=16, slow_span=64) -> pd.Series:\n    slow_ewma = adjusted_price.ewm(span=slow_span, min_periods=2).mean()\n    fast_ewma = adjusted_price.ewm(span=fast_span, min_periods=2).mean()\n    return fast_ewma - slow_ewma\ndef calculate_forecast_for_ewmac(\n    adjusted_price: pd.Series, stdev_ann_perc: standardDeviation, fast_span: int = 64\n):\n    scaled_ewmac = calculate_scaled_forecast_for_ewmac(\n        adjusted_price=adjusted_price,\n        stdev_ann_perc=stdev_ann_perc,",
        "detail": "build.lib.almanac.analysis.forecasts",
        "documentation": {}
    },
    {
        "label": "calculate_forecast_for_ewmac",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.forecasts",
        "description": "build.lib.almanac.analysis.forecasts",
        "peekOfCode": "def calculate_forecast_for_ewmac(\n    adjusted_price: pd.Series, stdev_ann_perc: standardDeviation, fast_span: int = 64\n):\n    scaled_ewmac = calculate_scaled_forecast_for_ewmac(\n        adjusted_price=adjusted_price,\n        stdev_ann_perc=stdev_ann_perc,\n        fast_span=fast_span,\n    )\n    capped_ewmac = scaled_ewmac.clip(-20, 20)\n    return capped_ewmac",
        "detail": "build.lib.almanac.analysis.forecasts",
        "documentation": {}
    },
    {
        "label": "calculate_scaled_forecast_for_ewmac",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.forecasts",
        "description": "build.lib.almanac.analysis.forecasts",
        "peekOfCode": "def calculate_scaled_forecast_for_ewmac(\n    adjusted_price: pd.Series,\n    stdev_ann_perc: standardDeviation,\n    fast_span: int = 64,\n):\n    scalar_dict = {64: 1.91, 32: 2.79, 16: 4.1, 8: 5.95, 4: 8.53, 2: 12.1}\n    risk_adjusted_ewmac = calculate_risk_adjusted_forecast_for_ewmac(\n        adjusted_price=adjusted_price,\n        stdev_ann_perc=stdev_ann_perc,\n        fast_span=fast_span,",
        "detail": "build.lib.almanac.analysis.forecasts",
        "documentation": {}
    },
    {
        "label": "calculate_risk_adjusted_forecast_for_ewmac",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.forecasts",
        "description": "build.lib.almanac.analysis.forecasts",
        "peekOfCode": "def calculate_risk_adjusted_forecast_for_ewmac(\n    adjusted_price: pd.Series,\n    stdev_ann_perc: standardDeviation,\n    fast_span: int = 64,\n):\n    ewmac_values = ewmac(adjusted_price, fast_span=fast_span, slow_span=fast_span * 4)\n    daily_price_vol = stdev_ann_perc.daily_risk_price_terms()\n    risk_adjusted_ewmac = ewmac_values / daily_price_vol\n    return risk_adjusted_ewmac",
        "detail": "build.lib.almanac.analysis.forecasts",
        "documentation": {}
    },
    {
        "label": "correlationEstimate",
        "kind": 6,
        "importPath": "build.lib.almanac.analysis.handcrafting",
        "description": "build.lib.almanac.analysis.handcrafting",
        "peekOfCode": "class correlationEstimate(object):\n    def __init__(self, values: pd.DataFrame):\n        columns = values.columns\n        values = values.values\n        self._values = values\n        self._columns = columns\n    def __repr__(self):\n        return str(self.as_pd())\n    def __len__(self):\n        return len(self.columns)",
        "detail": "build.lib.almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "portfolioWeights",
        "kind": 6,
        "importPath": "build.lib.almanac.analysis.handcrafting",
        "description": "build.lib.almanac.analysis.handcrafting",
        "peekOfCode": "class portfolioWeights(dict):\n    @property\n    def weights(self):\n        return list(self.values())\n    @property\n    def assets(self):\n        return list(self.keys())\n    def multiply_by_float(self, multiplier: float):\n        list_of_assets = self.assets\n        list_of_weights = [self[asset] for asset in list_of_assets]",
        "detail": "build.lib.almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "handcraftPortfolio",
        "kind": 6,
        "importPath": "build.lib.almanac.analysis.handcrafting",
        "description": "build.lib.almanac.analysis.handcrafting",
        "peekOfCode": "class handcraftPortfolio(object):\n    def __init__(self, correlation: correlationEstimate):\n        self._correlation = correlation\n    @property\n    def correlation(self) -> correlationEstimate:\n        return self._correlation\n    @property\n    def size(self) -> int:\n        return len(self.correlation)\n    @property",
        "detail": "build.lib.almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "cluster_correlation_matrix",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.handcrafting",
        "description": "build.lib.almanac.analysis.handcrafting",
        "peekOfCode": "def cluster_correlation_matrix(corr_matrix: correlationEstimate, cluster_size: int = 2):\n    clusters = get_list_of_clusters_for_correlation_matrix(\n        corr_matrix, cluster_size=cluster_size\n    )\n    clusters_as_names = from_cluster_index_to_asset_names(\n        clusters, corr_matrix)\n    if PRINT_TRACE:\n        print(\"Cluster split: %s\" % str(clusters_as_names))\n    return clusters_as_names\ndef get_list_of_clusters_for_correlation_matrix(",
        "detail": "build.lib.almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "get_list_of_clusters_for_correlation_matrix",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.handcrafting",
        "description": "build.lib.almanac.analysis.handcrafting",
        "peekOfCode": "def get_list_of_clusters_for_correlation_matrix(\n    corr_matrix: np.array, cluster_size: int = 2\n) -> list:\n    corr_as_np = corr_matrix.values\n    try:\n        clusters = get_list_of_clusters_for_correlation_matrix_as_np(\n            corr_as_np, cluster_size=cluster_size\n        )\n    except:\n        clusters = arbitrary_split_of_correlation_matrix(",
        "detail": "build.lib.almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "get_list_of_clusters_for_correlation_matrix_as_np",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.handcrafting",
        "description": "build.lib.almanac.analysis.handcrafting",
        "peekOfCode": "def get_list_of_clusters_for_correlation_matrix_as_np(\n    corr_as_np: np.array, cluster_size: int = 2\n) -> list:\n    d = sch.distance.pdist(corr_as_np)\n    L = sch.linkage(d, method=\"complete\")\n    cutoff = cutoff_distance_to_guarantee_N_clusters(\n        corr_as_np, L=L, cluster_size=cluster_size\n    )\n    ind = sch.fcluster(L, cutoff, \"distance\")\n    ind = list(ind)",
        "detail": "build.lib.almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "cutoff_distance_to_guarantee_N_clusters",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.handcrafting",
        "description": "build.lib.almanac.analysis.handcrafting",
        "peekOfCode": "def cutoff_distance_to_guarantee_N_clusters(\n    corr_as_np: np.array, L: np.array, cluster_size: int = 2\n):\n    # assert cluster_size==2\n    N = len(corr_as_np)\n    return L[N - cluster_size][2] - 0.000001\ndef arbitrary_split_of_correlation_matrix(\n    corr_matrix: np.array, cluster_size: int = 2\n) -> list:\n    # split correlation of 3 or more assets",
        "detail": "build.lib.almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "arbitrary_split_of_correlation_matrix",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.handcrafting",
        "description": "build.lib.almanac.analysis.handcrafting",
        "peekOfCode": "def arbitrary_split_of_correlation_matrix(\n    corr_matrix: np.array, cluster_size: int = 2\n) -> list:\n    # split correlation of 3 or more assets\n    count_assets = len(corr_matrix)\n    return arbitrary_split_for_asset_length(count_assets, cluster_size=cluster_size)\ndef arbitrary_split_for_asset_length(count_assets: int, cluster_size: int = 2) -> list:\n    return [(x % cluster_size) + 1 for x in range(count_assets)]\ndef from_cluster_index_to_asset_names(\n    clusters: list, corr_matrix: correlationEstimate",
        "detail": "build.lib.almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "arbitrary_split_for_asset_length",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.handcrafting",
        "description": "build.lib.almanac.analysis.handcrafting",
        "peekOfCode": "def arbitrary_split_for_asset_length(count_assets: int, cluster_size: int = 2) -> list:\n    return [(x % cluster_size) + 1 for x in range(count_assets)]\ndef from_cluster_index_to_asset_names(\n    clusters: list, corr_matrix: correlationEstimate\n) -> list:\n    all_clusters = list(set(clusters))\n    asset_names = corr_matrix.columns\n    list_of_asset_clusters = [\n        get_asset_names_for_cluster_index(cluster_id, clusters, asset_names)\n        for cluster_id in all_clusters",
        "detail": "build.lib.almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "from_cluster_index_to_asset_names",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.handcrafting",
        "description": "build.lib.almanac.analysis.handcrafting",
        "peekOfCode": "def from_cluster_index_to_asset_names(\n    clusters: list, corr_matrix: correlationEstimate\n) -> list:\n    all_clusters = list(set(clusters))\n    asset_names = corr_matrix.columns\n    list_of_asset_clusters = [\n        get_asset_names_for_cluster_index(cluster_id, clusters, asset_names)\n        for cluster_id in all_clusters\n    ]\n    return list_of_asset_clusters",
        "detail": "build.lib.almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "get_asset_names_for_cluster_index",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.handcrafting",
        "description": "build.lib.almanac.analysis.handcrafting",
        "peekOfCode": "def get_asset_names_for_cluster_index(\n    cluster_id: int, clusters: list, asset_names: list\n):\n    list_of_assets = [\n        asset for asset, cluster in zip(asset_names, clusters) if cluster == cluster_id\n    ]\n    return list_of_assets\nclass portfolioWeights(dict):\n    @property\n    def weights(self):",
        "detail": "build.lib.almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "flatten_list",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.handcrafting",
        "description": "build.lib.almanac.analysis.handcrafting",
        "peekOfCode": "def flatten_list(some_list):\n    flattened = [item for sublist in some_list for item in sublist]\n    return flattened\ndef one_over_n_weights_given_asset_names(list_of_asset_names: list) -> portfolioWeights:\n    weight = 1.0 / len(list_of_asset_names)\n    return portfolioWeights(\n        [(asset_name, weight) for asset_name in list_of_asset_names]\n    )\nclass handcraftPortfolio(object):\n    def __init__(self, correlation: correlationEstimate):",
        "detail": "build.lib.almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "one_over_n_weights_given_asset_names",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.handcrafting",
        "description": "build.lib.almanac.analysis.handcrafting",
        "peekOfCode": "def one_over_n_weights_given_asset_names(list_of_asset_names: list) -> portfolioWeights:\n    weight = 1.0 / len(list_of_asset_names)\n    return portfolioWeights(\n        [(asset_name, weight) for asset_name in list_of_asset_names]\n    )\nclass handcraftPortfolio(object):\n    def __init__(self, correlation: correlationEstimate):\n        self._correlation = correlation\n    @property\n    def correlation(self) -> correlationEstimate:",
        "detail": "build.lib.almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "create_sub_portfolios_from_portfolio",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.handcrafting",
        "description": "build.lib.almanac.analysis.handcrafting",
        "peekOfCode": "def create_sub_portfolios_from_portfolio(handcraft_portfolio: handcraftPortfolio):\n    clusters_as_names = cluster_correlation_matrix(\n        handcraft_portfolio.correlation)\n    sub_portfolios = create_sub_portfolios_given_clusters(\n        clusters_as_names, handcraft_portfolio\n    )\n    return sub_portfolios\ndef create_sub_portfolios_given_clusters(\n    clusters_as_names: list, handcraft_portfolio: handcraftPortfolio\n) -> list:",
        "detail": "build.lib.almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "create_sub_portfolios_given_clusters",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.handcrafting",
        "description": "build.lib.almanac.analysis.handcrafting",
        "peekOfCode": "def create_sub_portfolios_given_clusters(\n    clusters_as_names: list, handcraft_portfolio: handcraftPortfolio\n) -> list:\n    list_of_sub_portfolios = [\n        handcraft_portfolio.subset(subset_of_asset_names)\n        for subset_of_asset_names in clusters_as_names\n    ]\n    return list_of_sub_portfolios\ndef aggregate_risk_weights_over_sub_portfolios(\n    sub_portfolios: list,",
        "detail": "build.lib.almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "aggregate_risk_weights_over_sub_portfolios",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.handcrafting",
        "description": "build.lib.almanac.analysis.handcrafting",
        "peekOfCode": "def aggregate_risk_weights_over_sub_portfolios(\n    sub_portfolios: list,\n) -> portfolioWeights:\n    # sub portfolios guaranteed to be 2 long\n    # We allocate half to each\n    asset_count = len(sub_portfolios)\n    # assert asset_count == 2\n    weights_for_each_subportfolio = [1.0 / asset_count] * asset_count\n    risk_weights_by_portfolio = [\n        sub_portfolio.weights() for sub_portfolio in sub_portfolios",
        "detail": "build.lib.almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "handcrafting_algo",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.handcrafting",
        "description": "build.lib.almanac.analysis.handcrafting",
        "peekOfCode": "def handcrafting_algo(instument_returns):\n    all_returns = pd_readcsv(instument_returns)\n    corr_matrix = correlationEstimate(all_returns.corr())\n    handcraft_portfolio = handcraftPortfolio(corr_matrix)\n    PRINT_TRACE = True\n    portfolio_weights = handcraft_portfolio.weights()\n    return portfolio_weights",
        "detail": "build.lib.almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "PRINT_TRACE",
        "kind": 5,
        "importPath": "build.lib.almanac.analysis.handcrafting",
        "description": "build.lib.almanac.analysis.handcrafting",
        "peekOfCode": "PRINT_TRACE = False\nclass correlationEstimate(object):\n    def __init__(self, values: pd.DataFrame):\n        columns = values.columns\n        values = values.values\n        self._values = values\n        self._columns = columns\n    def __repr__(self):\n        return str(self.as_pd())\n    def __len__(self):",
        "detail": "build.lib.almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "calculate_position_series_given_fixed_risk",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.positions",
        "description": "build.lib.almanac.analysis.positions",
        "peekOfCode": "def calculate_position_series_given_fixed_risk(capital: float,\n                                               risk_target_tau: float,\n                                               current_price: pd.Series,\n                                               fx: pd.Series,\n                                               multiplier: float,\n                                               instrument_risk_ann_perc: float) -> pd.Series:\n    # N = (Capital × τ) ÷ (Multiplier × Price × FX × σ %)\n    position_in_contracts = capital * risk_target_tau / \\\n        (multiplier * current_price * fx * instrument_risk_ann_perc)\n    return position_in_contracts",
        "detail": "build.lib.almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_series_given_variable_risk",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.positions",
        "description": "build.lib.almanac.analysis.positions",
        "peekOfCode": "def calculate_position_series_given_variable_risk(\n    capital: float,\n    risk_target_tau: float,\n    fx: pd.Series,\n    multiplier: float,\n    instrument_risk: standardDeviation,\n) -> pd.Series:\n    # N = (Capital × τ) ÷ (Multiplier × Price × FX × σ %)\n    # resolves to N = (Capital × τ) ÷ (Multiplier × FX × daily stdev price terms × 16)\n    # for simplicity we use the daily risk in price terms, even if we calculated annualised % returns",
        "detail": "build.lib.almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_series_given_variable_risk_for_dict",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.positions",
        "description": "build.lib.almanac.analysis.positions",
        "peekOfCode": "def calculate_position_series_given_variable_risk_for_dict(\n    capital: float,\n    risk_target_tau: float,\n    idm: float,\n    weights: dict,\n    fx_series_dict: dict,\n    multipliers: dict,\n    std_dev_dict: dict,\n) -> dict:\n    position_series_dict = dict(",
        "detail": "build.lib.almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_dict_with_trend_filter_applied",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.positions",
        "description": "build.lib.almanac.analysis.positions",
        "peekOfCode": "def calculate_position_dict_with_trend_filter_applied(\n    adjusted_prices_dict: dict,\n    average_position_contracts_dict: dict,\n) -> dict:\n    list_of_instruments = list(adjusted_prices_dict.keys())\n    position_dict_with_trend_filter = dict(\n        [\n            (\n                instrument_code,\n                calculate_position_with_trend_filter_applied(",
        "detail": "build.lib.almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_with_trend_filter_applied",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.positions",
        "description": "build.lib.almanac.analysis.positions",
        "peekOfCode": "def calculate_position_with_trend_filter_applied(\n    adjusted_price: pd.Series, average_position: pd.Series\n) -> pd.Series:\n    filtered_position = copy(average_position)\n    ewmac_values = ewmac(adjusted_price)\n    bearish = ewmac_values < 0\n    filtered_position[bearish] = 0\n    return filtered_position\ndef calculate_position_dict_with_symmetric_trend_filter_applied(\n    adjusted_prices_dict: dict,",
        "detail": "build.lib.almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_dict_with_symmetric_trend_filter_applied",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.positions",
        "description": "build.lib.almanac.analysis.positions",
        "peekOfCode": "def calculate_position_dict_with_symmetric_trend_filter_applied(\n    adjusted_prices_dict: dict,\n    average_position_contracts_dict: dict,\n) -> dict:\n    list_of_instruments = list(adjusted_prices_dict.keys())\n    position_dict_with_trend_filter = dict(\n        [\n            (\n                instrument_code,\n                calculate_position_with_symmetric_trend_filter_applied(",
        "detail": "build.lib.almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_with_symmetric_trend_filter_applied",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.positions",
        "description": "build.lib.almanac.analysis.positions",
        "peekOfCode": "def calculate_position_with_symmetric_trend_filter_applied(\n    adjusted_price: pd.Series, average_position: pd.Series\n) -> pd.Series:\n    filtered_position = copy(average_position)\n    ewmac_values = ewmac(adjusted_price)\n    bearish = ewmac_values < 0\n    filtered_position[bearish] = -filtered_position[bearish]\n    return filtered_position\ndef calculate_position_dict_with_trend_forecast_applied(\n    adjusted_prices_dict: dict,",
        "detail": "build.lib.almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_dict_with_trend_forecast_applied",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.positions",
        "description": "build.lib.almanac.analysis.positions",
        "peekOfCode": "def calculate_position_dict_with_trend_forecast_applied(\n    adjusted_prices_dict: dict,\n    average_position_contracts_dict: dict,\n    std_dev_dict: dict,\n    fast_span: int = 64,\n) -> dict:\n    list_of_instruments = list(adjusted_prices_dict.keys())\n    position_dict_with_trend_filter = dict(\n        [\n            (",
        "detail": "build.lib.almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_position_with_trend_forecast_applied",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.positions",
        "description": "build.lib.almanac.analysis.positions",
        "peekOfCode": "def calculate_position_with_trend_forecast_applied(\n    adjusted_price: pd.Series,\n    average_position: pd.Series,\n    stdev_ann_perc: standardDeviation,\n    fast_span: int = 64,\n) -> pd.Series:\n    from almanac.analysis.forecasts import calculate_forecast_for_ewmac\n    forecast = calculate_forecast_for_ewmac(\n        adjusted_price=adjusted_price,\n        stdev_ann_perc=stdev_ann_perc,",
        "detail": "build.lib.almanac.analysis.positions",
        "documentation": {}
    },
    {
        "label": "calculate_standard_deviation_for_risk_targeting",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.std_for_risk",
        "description": "build.lib.almanac.analysis.std_for_risk",
        "peekOfCode": "def calculate_standard_deviation_for_risk_targeting(adjusted_price: pd.Series,\n                                                    current_price: pd.Series):\n    daily_price_changes = adjusted_price.diff()\n    percentage_changes = daily_price_changes / current_price.shift(1)\n    # Can do the whole series or recent history\n    recent_daily_std = percentage_changes.tail(30).std()\n    return recent_daily_std*(BUSINESS_DAYS_IN_YEAR**.5)\ndef calculate_variable_standard_deviation_for_risk_targeting(\n    adjusted_price: pd.Series,\n    current_price: pd.Series,",
        "detail": "build.lib.almanac.analysis.std_for_risk",
        "documentation": {}
    },
    {
        "label": "calculate_variable_standard_deviation_for_risk_targeting",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.std_for_risk",
        "description": "build.lib.almanac.analysis.std_for_risk",
        "peekOfCode": "def calculate_variable_standard_deviation_for_risk_targeting(\n    adjusted_price: pd.Series,\n    current_price: pd.Series,\n    use_perc_returns: bool = True,\n    annualise_stdev: bool = True,\n) -> pd.Series:\n    from almanac.analysis.calculate_returns import calculate_percentage_returns, calculate_daily_returns\n    if use_perc_returns:\n        daily_returns = calculate_percentage_returns(\n            adjusted_price=adjusted_price, current_price=current_price",
        "detail": "build.lib.almanac.analysis.std_for_risk",
        "documentation": {}
    },
    {
        "label": "calculate_variable_standard_deviation_for_risk_targeting_from_dict",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.std_for_risk",
        "description": "build.lib.almanac.analysis.std_for_risk",
        "peekOfCode": "def calculate_variable_standard_deviation_for_risk_targeting_from_dict(\n    adjusted_prices: dict,\n    current_prices: dict,\n    use_perc_returns: bool = True,\n    annualise_stdev: bool = True,\n) -> dict:\n    from almanac.utils.standardDeviation import standardDeviation\n    std_dev_dict = dict(\n        [\n            (",
        "detail": "build.lib.almanac.analysis.std_for_risk",
        "documentation": {}
    },
    {
        "label": "ArgumentError",
        "kind": 6,
        "importPath": "build.lib.almanac.analysis.turnover",
        "description": "build.lib.almanac.analysis.turnover",
        "peekOfCode": "class ArgumentError(Exception):\n    pass\ndef calculate_turnover(position):\n    number_of_trades = position.diff()\n    number_of_trades = number_of_trades.abs()\n    daily_trades = number_of_trades.groupby(pd.Grouper(freq='D')).sum()\n    daily_mean = position.resample('D').mean()\n    rolling_mean_300_days = daily_mean.rolling(window=300, min_periods=1).mean()\n    rolling_mean_300_days = rolling_mean_300_days.replace({0: np.nan}).fillna(method='bfill')\n    as_proportion_of_average = daily_trades / rolling_mean_300_days.abs().shift(1)",
        "detail": "build.lib.almanac.analysis.turnover",
        "documentation": {}
    },
    {
        "label": "calculate_turnover",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.turnover",
        "description": "build.lib.almanac.analysis.turnover",
        "peekOfCode": "def calculate_turnover(position):\n    number_of_trades = position.diff()\n    number_of_trades = number_of_trades.abs()\n    daily_trades = number_of_trades.groupby(pd.Grouper(freq='D')).sum()\n    daily_mean = position.resample('D').mean()\n    rolling_mean_300_days = daily_mean.rolling(window=300, min_periods=1).mean()\n    rolling_mean_300_days = rolling_mean_300_days.replace({0: np.nan}).fillna(method='bfill')\n    as_proportion_of_average = daily_trades / rolling_mean_300_days.abs().shift(1)\n    average_daily = as_proportion_of_average.mean()\n    annualised_turnover = average_daily * 256",
        "detail": "build.lib.almanac.analysis.turnover",
        "documentation": {}
    },
    {
        "label": "turnover",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.turnover",
        "description": "build.lib.almanac.analysis.turnover",
        "peekOfCode": "def turnover(position, weightage_dict=1):\n    if isinstance(position,dict):\n        turnover_dict = dict(\n            [\n                (\n                    instrument_code,\n                    calculate_turnover(\n                        position=position[instrument_code],\n                    ),\n                )",
        "detail": "build.lib.almanac.analysis.turnover",
        "documentation": {}
    },
    {
        "label": "DEFAULT_DATE_FORMAT",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "DEFAULT_DATE_FORMAT = \"%Y-%m-%d\"\nFrequency = Enum(\"Frequency\", \"Natural Year Month Week BDay\")\nNATURAL = Frequency.Natural\nYEAR = Frequency.Year\nMONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "Frequency",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "Frequency = Enum(\"Frequency\", \"Natural Year Month Week BDay\")\nNATURAL = Frequency.Natural\nYEAR = Frequency.Year\nMONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "NATURAL",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "NATURAL = Frequency.Natural\nYEAR = Frequency.Year\nMONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "YEAR",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "YEAR = Frequency.Year\nMONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "MONTH",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "MONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "WEEK",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "WEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "BUSINESS_DAYS_IN_YEAR",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "BUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "WEEKS_PER_YEAR",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "WEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "MONTHS_PER_YEAR",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "MONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "SECONDS_PER_YEAR",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "SECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "PERIODS_PER_YEAR",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "PERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "QUANT_PERCENTILE_EXTREME",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "QUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "QUANT_PERCENTILE_STD",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "QUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "NORMAL_DISTR_RATIO",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "NORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "fx_dict",
        "kind": 5,
        "importPath": "build.lib.almanac.config.fx_dict",
        "description": "build.lib.almanac.config.fx_dict",
        "peekOfCode": "fx_dict = {\n    \"OAT\": \"eur\",\n    \"SHATZ\": \"eur\",\n    \"BOBL\": \"eur\",\n    \"BUND\": \"eur\",\n    \"BUXL\": \"eur\",\n    \"BTP\": \"eur\",\n    \"BTP3\": \"eur\",\n    \"JGB\": \"jpy\",\n    \"BONO\": \"eur\",",
        "detail": "build.lib.almanac.config.fx_dict",
        "documentation": {}
    },
    {
        "label": "cost_per_contract_dict",
        "kind": 5,
        "importPath": "build.lib.almanac.config.instruments",
        "description": "build.lib.almanac.config.instruments",
        "peekOfCode": "cost_per_contract_dict = {'US2': 6.1, \"US3\": 8.26, 'US5': 5.306, 'US10': 8.8, 'US30': 15.58, 'US20': 17.04, 'US10U': 9.15, 'OAT': 8.81, 'SHATZ': 4.21, 'BOBL': 7.01, 'BUND': 6.55, 'BUXL': 15.56, 'BTP': 7.96, 'BTP3': 7.98, 'JGB': 5837, 'BONO': 59, 'DOW': 0.52, 'NASDAQ_micro': 1.22, 'R1000': 22, 'SP400': 26.57, 'SP500_micro': 1.5, 'AEX': 16.39, 'DAX': 1.98, 'SMI': 12.1, 'DJSTX-SMALL': 2, 'EU-DIV30': 1.97, 'EURO600': 2.07, 'EUROSTX': 7.3, 'EU-AUTO': 13.8, 'EU-BASIC': 25.5, 'EU-HEALTH': 18.70, 'EU-INSURE': 8.23, 'EU-OIL': 9.35, 'EU-TECH': 16.63, 'EU-UTILS': 9.98, 'MSCIASIA': 18.3, 'FTSECHINAA': .5, 'FTSECHINAH': 9.1, 'NIFTY': 0.11, 'NIKKEI': 328, 'NIKKEI400': 432, 'MUMMY': 568, 'TOPIX': 261,\n                          'MSCISING': 7.3, 'VIX': 15.73, 'V2X': 1.36, 'AUD': 2.56, 'CAD': 5.12, 'CHF': 8.4, 'EUR': 6.7, 'GBP': 23.43, 'JPY': 254, 'NOK': 71, 'NZD': 6.47, 'SEK': 57.6, 'GBPJPY': 3456, 'BRE': 0.0022, 'INR': 240, 'MXP': 5.65, 'RUR': 300, 'SGD': 17.68, 'ALUMINIUM': 42.5, 'COPPER': 13.23, 'GOLD_micro': 1.75, 'IRON': 11.63, 'PALLAD': 176.5, 'PLAT': 12.74, 'SILVER': 5.38, 'BITCOIN': 5.15, 'ETHEREUM': 61.94, 'BRENT-LAST': 23.25, 'CRUDE_W_mini': 19.14, 'GASOILINE': 42.75, 'GAS_US_mini': 7.21, 'HEATOIL': 38.61, 'BBCOMM': 11.13, 'CHEESE': 106.68, 'CORN': 896, 'FEEDCOW': 2688, 'LEANHOG': 1377, 'LIVECOW': 1092, 'OAT': 174.3, 'REDWHEAT': 1560, 'RICE': 47.51, 'SOYBEAN': 1639, 'SOYMEAL': 10.7, 'SOYOIL': 1260, 'WHEAT': 1697}\nmultipliers = {\n    \"US2\": 2000,\n    \"US3\": 2000,\n    \"US5\": 1000,\n    \"US10\": 1000,\n    \"USIRS10\": 1000,\n    \"US20\": 1000,\n    \"US30\": 1000,",
        "detail": "build.lib.almanac.config.instruments",
        "documentation": {}
    },
    {
        "label": "multipliers",
        "kind": 5,
        "importPath": "build.lib.almanac.config.instruments",
        "description": "build.lib.almanac.config.instruments",
        "peekOfCode": "multipliers = {\n    \"US2\": 2000,\n    \"US3\": 2000,\n    \"US5\": 1000,\n    \"US10\": 1000,\n    \"USIRS10\": 1000,\n    \"US20\": 1000,\n    \"US30\": 1000,\n    \"USIRS5ERIS\": 1000,\n    \"US10U\": 1000,",
        "detail": "build.lib.almanac.config.instruments",
        "documentation": {}
    },
    {
        "label": "instrument_weights",
        "kind": 5,
        "importPath": "build.lib.almanac.config.instruments",
        "description": "build.lib.almanac.config.instruments",
        "peekOfCode": "instrument_weights = {'FEEDCOW': 0.015625, 'SHATZ': 0.03125, 'AUD': 0.0009765625, 'BONO': 0.015625, 'SP400': 0.0078125, 'NZD': 0.00390625, 'IRON': 0.0009765625, 'CRUDE_W_mini': 0.00390625, 'EURO600': 0.001953125, 'MXP': 0.00390625, 'GBPJPY': 0.0078125, 'BTP': 0.001953125, 'V2X': 0.03125, 'EU-AUTO': 0.001953125, 'ETHEREUM': 0.03125, 'US2': 0.015625, 'TOPIX': 0.03125, 'NASDAQ_micro': 0.015625, 'SMI': 0.015625, 'BRENT-LAST': 0.015625, 'CHEESE': 0.00390625, 'PALLAD': 0.015625, 'NIKKEI': 0.03125, 'SOYMEAL': 0.001953125, 'DJSTX-SMALL': 0.001953125, 'R1000': 0.015625, 'RUR': 0.015625, 'GBP': 0.0009765625, 'EUR': 0.00390625, 'GASOILINE': 0.03125, 'EU-BASIC': 0.00390625, 'EU-INSURE': 0.015625, 'US5': 0.015625, 'US30': 0.015625, 'REDWHEAT': 0.015625, 'BRE': 0.0009765625, 'US20': 0.0078125, 'US10U': 0.015625, 'DAX': 0.001953125, 'SOYOIL': 0.0078125, 'US3': 0.0078125, 'COPPER': 0.0009765625, 'MSCISING': 0.0078125,\n                      'RICE': 0.00390625, 'EU-DIV30': 0.0078125, 'CAD': 0.0078125, 'VIX': 0.0625, 'NIKKEI400': 0.03125, 'DOW': 0.0078125, 'BUND': 0.015625, 'GOLD_micro': 0.00390625, 'MSCIASIA': 0.0078125, 'SEK': 0.001953125, 'SGD': 0.0625, 'BUXL': 0.015625, 'BOBL': 0.015625, 'CORN': 0.0078125, 'EU-OIL': 0.0078125, 'WHEAT': 0.001953125, 'MUMMY': 0.015625, 'HEATOIL': 0.015625, 'EU-UTILS': 0.0078125, 'INR': 0.0078125, 'LIVECOW': 0.015625, 'EU-TECH': 0.001953125, 'BBCOMM': 0.015625, 'AEX': 0.001953125, 'OAT': 0.015625, 'NIFTY': 0.0009765625, 'EUROSTX': 0.0078125, 'FTSECHINAA': 0.0009765625, 'SILVER': 0.0078125, 'BITCOIN': 0.001953125, 'JPY': 0.015625, 'GAS_US_mini': 0.0078125, 'FTSECHINAH': 0.015625, 'SOYBEAN': 0.0078125, 'PLAT': 0.0009765625, 'SP500_micro': 0.0078125, 'NOK': 0.0009765625, 'ALUMINIUM': 0.015625, 'BTP3': 0.0078125, 'CHF': 0.0009765625, 'US10': 0.015625, 'JGB': 0.015625, 'EU-HEALTH': 0.0078125, 'LEANHOG': 0.0078125}\nINSTRUMENT_LIST = list(cost_per_contract_dict.keys())",
        "detail": "build.lib.almanac.config.instruments",
        "documentation": {}
    },
    {
        "label": "INSTRUMENT_LIST",
        "kind": 5,
        "importPath": "build.lib.almanac.config.instruments",
        "description": "build.lib.almanac.config.instruments",
        "peekOfCode": "INSTRUMENT_LIST = list(cost_per_contract_dict.keys())",
        "detail": "build.lib.almanac.config.instruments",
        "documentation": {}
    },
    {
        "label": "pd_readcsv",
        "kind": 2,
        "importPath": "build.lib.almanac.data.data",
        "description": "build.lib.almanac.data.data",
        "peekOfCode": "def pd_readcsv(filename: str, date_format=DEFAULT_DATE_FORMAT, date_index_name: str = \"index\") -> pd.DataFrame:\n    ans = pd.read_csv(filename)\n    ans.index = pd.to_datetime(ans[date_index_name], format=date_format).values\n    del ans[date_index_name]\n    ans.index.name = None\n    return ans\ndef get_data_dict(data_path, INSTRUMENT_LIST):\n    all_data = dict(\n        [\n            (instrument_code, pd_readcsv(f\"{data_path}{instrument_code}.csv\"))",
        "detail": "build.lib.almanac.data.data",
        "documentation": {}
    },
    {
        "label": "get_data_dict",
        "kind": 2,
        "importPath": "build.lib.almanac.data.data",
        "description": "build.lib.almanac.data.data",
        "peekOfCode": "def get_data_dict(data_path, INSTRUMENT_LIST):\n    all_data = dict(\n        [\n            (instrument_code, pd_readcsv(f\"{data_path}{instrument_code}.csv\"))\n            for instrument_code in INSTRUMENT_LIST\n        ]\n    )\n    adjusted_prices = dict(\n        [\n            (instrument_code, data_for_instrument.adjusted)",
        "detail": "build.lib.almanac.data.data",
        "documentation": {}
    },
    {
        "label": "StrategyBase",
        "kind": 6,
        "importPath": "build.lib.almanac.strategy.baseStrategy",
        "description": "build.lib.almanac.strategy.baseStrategy",
        "peekOfCode": "class StrategyBase:\n    def __init__(self, data_path: str, fx_path: str, instrument_list: list,\n                 instrument_weights: dict, multipliers: dict, idm: Union[int, float],\n                 risk_target: Union[int, float], capital: int, cost_per_contract_dict: dict):\n        self.data_path = data_path\n        self.fx_path = fx_path\n        self.instrument_list = instrument_list\n        self.instrument_weights = instrument_weights\n        self.multipliers = multipliers\n        self.idm = idm",
        "detail": "build.lib.almanac.strategy.baseStrategy",
        "documentation": {}
    },
    {
        "label": "Strategy1",
        "kind": 6,
        "importPath": "build.lib.almanac.strategy.strategy1",
        "description": "build.lib.almanac.strategy.strategy1",
        "peekOfCode": "class Strategy1:\n    def __init__(self, data_path: str, multiplier: int, risk_target: Union[int, float], capital: int):\n        self.data_path = data_path\n        self.multiplier = multiplier\n        self.risk_target = risk_target\n        self.capital = capital\n        self.data = self.get_data()\n        self.adjusted_price = self.data.adjusted\n        self.current_price = self.data.underlying\n        self.fx_series = pd.Series(1, index=self.data.index)",
        "detail": "build.lib.almanac.strategy.strategy1",
        "documentation": {}
    },
    {
        "label": "Strategy2",
        "kind": 6,
        "importPath": "build.lib.almanac.strategy.strategy2",
        "description": "build.lib.almanac.strategy.strategy2",
        "peekOfCode": "class Strategy2:\n    def __init__(self, data_path: str, multiplier: int, risk_target: Union[int, float], capital: int):\n        self.data_path = data_path\n        self.multiplier = multiplier\n        self.risk_target = risk_target\n        self.capital = capital\n        self.data = self.get_data()\n        self.adjusted_price = self.data.adjusted\n        self.current_price = self.data.underlying\n        self.fx_series = pd.Series(1, index=self.data.index)",
        "detail": "build.lib.almanac.strategy.strategy2",
        "documentation": {}
    },
    {
        "label": "Strategy3",
        "kind": 6,
        "importPath": "build.lib.almanac.strategy.strategy3",
        "description": "build.lib.almanac.strategy.strategy3",
        "peekOfCode": "class Strategy3(StrategyBase):\n    def __init__(self, data_path: str, multiplier: int, risk_target: Union[int, float], capital: int):\n        self.data_path = data_path\n        self.multiplier = multiplier\n        self.risk_target = risk_target\n        self.capital = capital\n        self.data = self.get_data()\n        self.adjusted_price = self.data.adjusted\n        self.current_price = self.data.underlying\n        self.fx_series = pd.Series(1, index=self.data.index)",
        "detail": "build.lib.almanac.strategy.strategy3",
        "documentation": {}
    },
    {
        "label": "Strategy4",
        "kind": 6,
        "importPath": "build.lib.almanac.strategy.strategy4",
        "description": "build.lib.almanac.strategy.strategy4",
        "peekOfCode": "class Strategy4(StrategyBase):\n    def __init__(\n        self,\n        data_path: str,\n        fx_path: str,\n        instrument_list: list,\n        instrument_weights: dict,\n        multipliers: dict,\n        idm: Union[int, float],\n        risk_target: Union[int, float],",
        "detail": "build.lib.almanac.strategy.strategy4",
        "documentation": {}
    },
    {
        "label": "portfolio_returns",
        "kind": 5,
        "importPath": "build.lib.almanac.strategy.strategy4_handcrafting",
        "description": "build.lib.almanac.strategy.strategy4_handcrafting",
        "peekOfCode": "portfolio_returns = 'almanac/sample_data/jumbo_instrument_returns.csv'\nportfolio_weights = handcrafting_algo(portfolio_returns)\nprint(portfolio_weights)",
        "detail": "build.lib.almanac.strategy.strategy4_handcrafting",
        "documentation": {}
    },
    {
        "label": "portfolio_weights",
        "kind": 5,
        "importPath": "build.lib.almanac.strategy.strategy4_handcrafting",
        "description": "build.lib.almanac.strategy.strategy4_handcrafting",
        "peekOfCode": "portfolio_weights = handcrafting_algo(portfolio_returns)\nprint(portfolio_weights)",
        "detail": "build.lib.almanac.strategy.strategy4_handcrafting",
        "documentation": {}
    },
    {
        "label": "Strategy5",
        "kind": 6,
        "importPath": "build.lib.almanac.strategy.strategy5",
        "description": "build.lib.almanac.strategy.strategy5",
        "peekOfCode": "class Strategy5(StrategyBase):\n    def __init__(\n        self,\n        data_path: str,\n        fx_path: str,\n        instrument_list: list,\n        instrument_weights: dict,\n        multipliers: dict,\n        idm: Union[int, float],\n        risk_target: Union[int, float],",
        "detail": "build.lib.almanac.strategy.strategy5",
        "documentation": {}
    },
    {
        "label": "Strategy6",
        "kind": 6,
        "importPath": "build.lib.almanac.strategy.strategy6",
        "description": "build.lib.almanac.strategy.strategy6",
        "peekOfCode": "class Strategy6(StrategyBase):\n    def __init__(\n        self,\n        data_path: str,\n        fx_path: str,\n        instrument_list: list,\n        instrument_weights: dict,\n        multipliers: dict,\n        idm: Union[int, float],\n        risk_target: Union[int, float],",
        "detail": "build.lib.almanac.strategy.strategy6",
        "documentation": {}
    },
    {
        "label": "Strategy7",
        "kind": 6,
        "importPath": "build.lib.almanac.strategy.strategy7",
        "description": "build.lib.almanac.strategy.strategy7",
        "peekOfCode": "class Strategy7(StrategyBase):\n    def __init__(\n        self,\n        data_path: str,\n        fx_path: str,\n        instrument_list: list,\n        instrument_weights: dict,\n        multipliers: dict,\n        idm: Union[int, float],\n        risk_target: Union[int, float],",
        "detail": "build.lib.almanac.strategy.strategy7",
        "documentation": {}
    },
    {
        "label": "create_fx_series_given_adjusted_prices_dict",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.fx_series",
        "description": "build.lib.almanac.utils.fx_series",
        "peekOfCode": "def create_fx_series_given_adjusted_prices_dict(fx_path, adjusted_prices_dict: dict) -> dict:\n    fx_series_dict = dict([(instrument_code,\n                            create_fx_series_given_adjusted_prices(fx_path, instrument_code, adjusted_prices),)\n                           for instrument_code, adjusted_prices in adjusted_prices_dict.items()])\n    return fx_series_dict\ndef create_fx_series_given_adjusted_prices(fx_path, instrument_code: str, adjusted_prices: pd.Series) -> pd.Series:\n    currency_for_instrument = fx_dict.get(instrument_code, \"usd\")\n    if currency_for_instrument == \"usd\":\n        return pd.Series(1, index=adjusted_prices.index)\n    fx_prices = get_fx_prices(fx_path, currency_for_instrument)",
        "detail": "build.lib.almanac.utils.fx_series",
        "documentation": {}
    },
    {
        "label": "create_fx_series_given_adjusted_prices",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.fx_series",
        "description": "build.lib.almanac.utils.fx_series",
        "peekOfCode": "def create_fx_series_given_adjusted_prices(fx_path, instrument_code: str, adjusted_prices: pd.Series) -> pd.Series:\n    currency_for_instrument = fx_dict.get(instrument_code, \"usd\")\n    if currency_for_instrument == \"usd\":\n        return pd.Series(1, index=adjusted_prices.index)\n    fx_prices = get_fx_prices(fx_path, currency_for_instrument)\n    fx_prices_aligned = fx_prices.reindex(adjusted_prices.index).ffill()\n    return fx_prices_aligned\ndef get_fx_prices(fx_path, currency: str) -> pd.Series:\n    prices_as_df = pd_readcsv(f\"{fx_path}{currency}_fx.csv\")\n    return prices_as_df.squeeze()",
        "detail": "build.lib.almanac.utils.fx_series",
        "documentation": {}
    },
    {
        "label": "get_fx_prices",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.fx_series",
        "description": "build.lib.almanac.utils.fx_series",
        "peekOfCode": "def get_fx_prices(fx_path, currency: str) -> pd.Series:\n    prices_as_df = pd_readcsv(f\"{fx_path}{currency}_fx.csv\")\n    return prices_as_df.squeeze()",
        "detail": "build.lib.almanac.utils.fx_series",
        "documentation": {}
    },
    {
        "label": "standardDeviation",
        "kind": 6,
        "importPath": "build.lib.almanac.utils.standardDeviation",
        "description": "build.lib.almanac.utils.standardDeviation",
        "peekOfCode": "class standardDeviation(pd.Series):\n    ## class that can be eithier % or price based standard deviation estimate\n    def __init__(\n        self,\n        adjusted_price: pd.Series,\n        current_price: pd.Series,\n        use_perc_returns: bool = True,\n        annualise_stdev: bool = True,\n    ):\n        stdev = calculate_variable_standard_deviation_for_risk_targeting(",
        "detail": "build.lib.almanac.utils.standardDeviation",
        "documentation": {}
    },
    {
        "label": "periods_per_year",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils",
        "description": "build.lib.almanac.utils.utils",
        "peekOfCode": "def periods_per_year(at_frequency: Frequency):\n    if at_frequency == NATURAL:\n        return BUSINESS_DAYS_IN_YEAR\n    else:\n        return PERIODS_PER_YEAR[at_frequency]\ndef years_in_data(some_data: pd.Series) -> float:\n    datediff = some_data.index[-1] - some_data.index[0]\n    seconds_in_data = datediff.total_seconds()\n    return seconds_in_data / SECONDS_PER_YEAR\ndef sum_at_frequency(perc_return: pd.Series,",
        "detail": "build.lib.almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "years_in_data",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils",
        "description": "build.lib.almanac.utils.utils",
        "peekOfCode": "def years_in_data(some_data: pd.Series) -> float:\n    datediff = some_data.index[-1] - some_data.index[0]\n    seconds_in_data = datediff.total_seconds()\n    return seconds_in_data / SECONDS_PER_YEAR\ndef sum_at_frequency(perc_return: pd.Series,\n                     at_frequency: Frequency = NATURAL) -> pd.Series:\n    if at_frequency == NATURAL:\n        return perc_return\n    at_frequency_str_dict = {\n        YEAR: \"Y\",",
        "detail": "build.lib.almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "sum_at_frequency",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils",
        "description": "build.lib.almanac.utils.utils",
        "peekOfCode": "def sum_at_frequency(perc_return: pd.Series,\n                     at_frequency: Frequency = NATURAL) -> pd.Series:\n    if at_frequency == NATURAL:\n        return perc_return\n    at_frequency_str_dict = {\n        YEAR: \"Y\",\n        WEEK: \"7D\",\n        MONTH: \"1M\"}\n    at_frequency_str = at_frequency_str_dict[at_frequency]\n    perc_return_at_freq = perc_return.resample(at_frequency_str).sum()",
        "detail": "build.lib.almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "ann_mean_given_frequency",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils",
        "description": "build.lib.almanac.utils.utils",
        "peekOfCode": "def ann_mean_given_frequency(perc_return_at_freq: pd.Series,\n                             at_frequency: Frequency) -> float:\n    mean_at_frequency = perc_return_at_freq.mean()\n    periods_per_year_for_frequency = periods_per_year(at_frequency)\n    annualised_mean = mean_at_frequency * periods_per_year_for_frequency\n    return annualised_mean\ndef ann_std_given_frequency(perc_return_at_freq: pd.Series,\n                            at_frequency: Frequency) -> float:\n    std_at_frequency = perc_return_at_freq.std()\n    periods_per_year_for_frequency = periods_per_year(at_frequency)",
        "detail": "build.lib.almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "ann_std_given_frequency",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils",
        "description": "build.lib.almanac.utils.utils",
        "peekOfCode": "def ann_std_given_frequency(perc_return_at_freq: pd.Series,\n                            at_frequency: Frequency) -> float:\n    std_at_frequency = perc_return_at_freq.std()\n    periods_per_year_for_frequency = periods_per_year(at_frequency)\n    annualised_std = std_at_frequency * (periods_per_year_for_frequency**.5)\n    return annualised_std\ndef demeaned_remove_zeros(x):\n    x[x == 0] = np.nan\n    return x - x.mean()\ndef minimum_capital_for_sub_strategy(",
        "detail": "build.lib.almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "demeaned_remove_zeros",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils",
        "description": "build.lib.almanac.utils.utils",
        "peekOfCode": "def demeaned_remove_zeros(x):\n    x[x == 0] = np.nan\n    return x - x.mean()\ndef minimum_capital_for_sub_strategy(\n    multiplier: float,\n    price: float,\n    fx: float,\n    instrument_risk_ann_perc: float,\n    risk_target: float,\n    idm: float,",
        "detail": "build.lib.almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "minimum_capital_for_sub_strategy",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils",
        "description": "build.lib.almanac.utils.utils",
        "peekOfCode": "def minimum_capital_for_sub_strategy(\n    multiplier: float,\n    price: float,\n    fx: float,\n    instrument_risk_ann_perc: float,\n    risk_target: float,\n    idm: float,\n    weight: float,\n    contracts: int = 4,\n):",
        "detail": "build.lib.almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "periods_per_year",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "def periods_per_year(at_frequency: Frequency):\n    if at_frequency == NATURAL:\n        return BUSINESS_DAYS_IN_YEAR\n    else:\n        return PERIODS_PER_YEAR[at_frequency]\ndef years_in_data(some_data: pd.Series) -> float:\n    datediff = some_data.index[-1] - some_data.index[0]\n    seconds_in_data = datediff.total_seconds()\n    return seconds_in_data / SECONDS_PER_YEAR\ndef sum_at_frequency(perc_return: pd.Series,",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "years_in_data",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "def years_in_data(some_data: pd.Series) -> float:\n    datediff = some_data.index[-1] - some_data.index[0]\n    seconds_in_data = datediff.total_seconds()\n    return seconds_in_data / SECONDS_PER_YEAR\ndef sum_at_frequency(perc_return: pd.Series,\n                     at_frequency: Frequency = NATURAL) -> pd.Series:\n    if at_frequency == NATURAL:\n        return perc_return\n    at_frequency_str_dict = {\n        YEAR: \"Y\",",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "sum_at_frequency",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "def sum_at_frequency(perc_return: pd.Series,\n                     at_frequency: Frequency = NATURAL) -> pd.Series:\n    if at_frequency == NATURAL:\n        return perc_return\n    at_frequency_str_dict = {\n        YEAR: \"Y\",\n        WEEK: \"7D\",\n        MONTH: \"1M\"}\n    at_frequency_str = at_frequency_str_dict[at_frequency]\n    perc_return_at_freq = perc_return.resample(at_frequency_str).sum()",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "ann_mean_given_frequency",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "def ann_mean_given_frequency(perc_return_at_freq: pd.Series,\n                             at_frequency: Frequency) -> float:\n    mean_at_frequency = perc_return_at_freq.mean()\n    periods_per_year_for_frequency = periods_per_year(at_frequency)\n    annualised_mean = mean_at_frequency * periods_per_year_for_frequency\n    return annualised_mean\ndef ann_std_given_frequency(perc_return_at_freq: pd.Series,\n                            at_frequency: Frequency) -> float:\n    std_at_frequency = perc_return_at_freq.std()\n    periods_per_year_for_frequency = periods_per_year(at_frequency)",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "ann_std_given_frequency",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "def ann_std_given_frequency(perc_return_at_freq: pd.Series,\n                            at_frequency: Frequency) -> float:\n    std_at_frequency = perc_return_at_freq.std()\n    periods_per_year_for_frequency = periods_per_year(at_frequency)\n    annualised_std = std_at_frequency * (periods_per_year_for_frequency**.5)\n    return annualised_std\ndef demeaned_remove_zeros(x):\n    x[x == 0] = np.nan\n    return x - x.mean()",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "demeaned_remove_zeros",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "def demeaned_remove_zeros(x):\n    x[x == 0] = np.nan\n    return x - x.mean()",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "DEFAULT_DATE_FORMAT",
        "kind": 5,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "DEFAULT_DATE_FORMAT = \"%Y-%m-%d\"\nFrequency = Enum(\n    \"Frequency\",\n    \"Natural Year Month Week BDay\",\n)\nNATURAL = Frequency.Natural\nYEAR = Frequency.Year\nMONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "Frequency",
        "kind": 5,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "Frequency = Enum(\n    \"Frequency\",\n    \"Natural Year Month Week BDay\",\n)\nNATURAL = Frequency.Natural\nYEAR = Frequency.Year\nMONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "NATURAL",
        "kind": 5,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "NATURAL = Frequency.Natural\nYEAR = Frequency.Year\nMONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {\n    MONTH: MONTHS_PER_YEAR,",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "YEAR",
        "kind": 5,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "YEAR = Frequency.Year\nMONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {\n    MONTH: MONTHS_PER_YEAR,\n    WEEK: WEEKS_PER_YEAR,",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "MONTH",
        "kind": 5,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "MONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {\n    MONTH: MONTHS_PER_YEAR,\n    WEEK: WEEKS_PER_YEAR,\n    YEAR: 1",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "WEEK",
        "kind": 5,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "WEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {\n    MONTH: MONTHS_PER_YEAR,\n    WEEK: WEEKS_PER_YEAR,\n    YEAR: 1\n}",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "BUSINESS_DAYS_IN_YEAR",
        "kind": 5,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "BUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {\n    MONTH: MONTHS_PER_YEAR,\n    WEEK: WEEKS_PER_YEAR,\n    YEAR: 1\n}\ndef periods_per_year(at_frequency: Frequency):",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "WEEKS_PER_YEAR",
        "kind": 5,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "WEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {\n    MONTH: MONTHS_PER_YEAR,\n    WEEK: WEEKS_PER_YEAR,\n    YEAR: 1\n}\ndef periods_per_year(at_frequency: Frequency):\n    if at_frequency == NATURAL:",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "MONTHS_PER_YEAR",
        "kind": 5,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "MONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {\n    MONTH: MONTHS_PER_YEAR,\n    WEEK: WEEKS_PER_YEAR,\n    YEAR: 1\n}\ndef periods_per_year(at_frequency: Frequency):\n    if at_frequency == NATURAL:\n        return BUSINESS_DAYS_IN_YEAR",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "SECONDS_PER_YEAR",
        "kind": 5,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "SECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {\n    MONTH: MONTHS_PER_YEAR,\n    WEEK: WEEKS_PER_YEAR,\n    YEAR: 1\n}\ndef periods_per_year(at_frequency: Frequency):\n    if at_frequency == NATURAL:\n        return BUSINESS_DAYS_IN_YEAR\n    else:",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "PERIODS_PER_YEAR",
        "kind": 5,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "PERIODS_PER_YEAR = {\n    MONTH: MONTHS_PER_YEAR,\n    WEEK: WEEKS_PER_YEAR,\n    YEAR: 1\n}\ndef periods_per_year(at_frequency: Frequency):\n    if at_frequency == NATURAL:\n        return BUSINESS_DAYS_IN_YEAR\n    else:\n        return PERIODS_PER_YEAR[at_frequency]",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    }
]