[
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "norm",
        "importPath": "scipy.stats",
        "description": "scipy.stats",
        "isExtraImport": true,
        "detail": "scipy.stats",
        "documentation": {}
    },
    {
        "label": "norm",
        "importPath": "scipy.stats",
        "description": "scipy.stats",
        "isExtraImport": true,
        "detail": "scipy.stats",
        "documentation": {}
    },
    {
        "label": "norm",
        "importPath": "scipy.stats",
        "description": "scipy.stats",
        "isExtraImport": true,
        "detail": "scipy.stats",
        "documentation": {}
    },
    {
        "label": "norm",
        "importPath": "scipy.stats",
        "description": "scipy.stats",
        "isExtraImport": true,
        "detail": "scipy.stats",
        "documentation": {}
    },
    {
        "label": "norm",
        "importPath": "scipy.stats",
        "description": "scipy.stats",
        "isExtraImport": true,
        "detail": "scipy.stats",
        "documentation": {}
    },
    {
        "label": "norm",
        "importPath": "scipy.stats",
        "description": "scipy.stats",
        "isExtraImport": true,
        "detail": "scipy.stats",
        "documentation": {}
    },
    {
        "label": "norm",
        "importPath": "scipy.stats",
        "description": "scipy.stats",
        "isExtraImport": true,
        "detail": "scipy.stats",
        "documentation": {}
    },
    {
        "label": "periods_per_year",
        "importPath": "almanac.utils.utils",
        "description": "almanac.utils.utils",
        "isExtraImport": true,
        "detail": "almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "demeaned_remove_zeros",
        "importPath": "almanac.utils.utils",
        "description": "almanac.utils.utils",
        "isExtraImport": true,
        "detail": "almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "periods_per_year",
        "importPath": "almanac.utils.utils",
        "description": "almanac.utils.utils",
        "isExtraImport": true,
        "detail": "almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "demeaned_remove_zeros",
        "importPath": "almanac.utils.utils",
        "description": "almanac.utils.utils",
        "isExtraImport": true,
        "detail": "almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "BUSINESS_DAYS_IN_YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "DEFAULT_DATE_FORMAT",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "Frequency",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "NATURAL",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "MONTH",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "WEEK",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "BUSINESS_DAYS_IN_YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "WEEKS_PER_YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "MONTHS_PER_YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "SECONDS_PER_YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "PERIODS_PER_YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "BUSINESS_DAYS_IN_YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "DEFAULT_DATE_FORMAT",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "Frequency",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "NATURAL",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "MONTH",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "WEEK",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "BUSINESS_DAYS_IN_YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "WEEKS_PER_YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "MONTHS_PER_YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "SECONDS_PER_YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "PERIODS_PER_YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Read_csv",
        "importPath": "almanac.data.data",
        "description": "almanac.data.data",
        "isExtraImport": true,
        "detail": "almanac.data.data",
        "documentation": {}
    },
    {
        "label": "Read_csv",
        "importPath": "almanac.data.data",
        "description": "almanac.data.data",
        "isExtraImport": true,
        "detail": "almanac.data.data",
        "documentation": {}
    },
    {
        "label": "Read_csv",
        "importPath": "almanac.data.data",
        "description": "almanac.data.data",
        "isExtraImport": true,
        "detail": "almanac.data.data",
        "documentation": {}
    },
    {
        "label": "Read_csv",
        "importPath": "almanac.data.data",
        "description": "almanac.data.data",
        "isExtraImport": true,
        "detail": "almanac.data.data",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "Stats",
        "importPath": "almanac.analysis.calculate_stats",
        "description": "almanac.analysis.calculate_stats",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_stats",
        "documentation": {}
    },
    {
        "label": "Stats",
        "importPath": "almanac.analysis.calculate_stats",
        "description": "almanac.analysis.calculate_stats",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_stats",
        "documentation": {}
    },
    {
        "label": "Stats",
        "importPath": "almanac.analysis.calculate_stats",
        "description": "almanac.analysis.calculate_stats",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_stats",
        "documentation": {}
    },
    {
        "label": "Stats",
        "importPath": "almanac.analysis.calculate_stats",
        "description": "almanac.analysis.calculate_stats",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_stats",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "calculate_position_series_given_fixed_risk",
        "importPath": "almanac.analysis.position_sereies_fixed_risk",
        "description": "almanac.analysis.position_sereies_fixed_risk",
        "isExtraImport": true,
        "detail": "almanac.analysis.position_sereies_fixed_risk",
        "documentation": {}
    },
    {
        "label": "calculate_position_series_given_fixed_risk",
        "importPath": "almanac.analysis.position_sereies_fixed_risk",
        "description": "almanac.analysis.position_sereies_fixed_risk",
        "isExtraImport": true,
        "detail": "almanac.analysis.position_sereies_fixed_risk",
        "documentation": {}
    },
    {
        "label": "calculate_standard_deviation_for_risk_targeting",
        "importPath": "almanac.analysis.std_for_risk",
        "description": "almanac.analysis.std_for_risk",
        "isExtraImport": true,
        "detail": "almanac.analysis.std_for_risk",
        "documentation": {}
    },
    {
        "label": "calculate_standard_deviation_for_risk_targeting",
        "importPath": "almanac.analysis.std_for_risk",
        "description": "almanac.analysis.std_for_risk",
        "isExtraImport": true,
        "detail": "almanac.analysis.std_for_risk",
        "documentation": {}
    },
    {
        "label": "almanac",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "almanac",
        "description": "almanac",
        "detail": "almanac",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns",
        "kind": 2,
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "peekOfCode": "def calculate_perc_returns(\n    position_contracts_held: pd.Series,\n    adjusted_price: pd.Series,\n    fx_series: pd.Series,\n    multiplier: float,\n    capital_required: pd.Series,\n) -> pd.Series:\n    return_price_points = (\n        adjusted_price - adjusted_price.shift(1)\n    ) * position_contracts_held.shift(1)",
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "Stats",
        "kind": 6,
        "importPath": "almanac.analysis.calculate_stats",
        "description": "almanac.analysis.calculate_stats",
        "peekOfCode": "class Stats():\n    def __init__(self,perc_return, at_frequency = NATURAL) -> None:\n        self.perc_return = perc_return\n        self.at_frequency = at_frequency\n    def _sum_at_frequency(self):\n        if self.at_frequency == NATURAL:\n            return self.perc_return\n        at_frequency_str_dict = {YEAR: \"Y\", WEEK: \"7D\", MONTH: \"1M\"}\n        at_frequency_str = at_frequency_str_dict[self.at_frequency]\n        perc_return_at_freq = self.perc_return.resample(at_frequency_str).sum()",
        "detail": "almanac.analysis.calculate_stats",
        "documentation": {}
    },
    {
        "label": "calculate_position_series_given_fixed_risk",
        "kind": 2,
        "importPath": "almanac.analysis.position_sereies_fixed_risk",
        "description": "almanac.analysis.position_sereies_fixed_risk",
        "peekOfCode": "def calculate_position_series_given_fixed_risk(capital: float,\n                                               risk_target_tau: float,\n                                               current_price: pd.Series,\n                                               fx: pd.Series,\n                                               multiplier: float,\n                                               instrument_risk_ann_perc: float) -> pd.Series:\n    #N = (Capital × τ) ÷ (Multiplier × Price × FX × σ %)\n    position_in_contracts =  capital * risk_target_tau / (multiplier * current_price * fx * instrument_risk_ann_perc)\n    return position_in_contracts",
        "detail": "almanac.analysis.position_sereies_fixed_risk",
        "documentation": {}
    },
    {
        "label": "calculate_standard_deviation_for_risk_targeting",
        "kind": 2,
        "importPath": "almanac.analysis.std_for_risk",
        "description": "almanac.analysis.std_for_risk",
        "peekOfCode": "def calculate_standard_deviation_for_risk_targeting(adjusted_price: pd.Series,\n                                                    current_price: pd.Series):\n    daily_price_changes = adjusted_price.diff()\n    percentage_changes = daily_price_changes / current_price.shift(1)\n    ## Can do the whole series or recent history\n    recent_daily_std = percentage_changes.tail(30).std()\n    return recent_daily_std*(BUSINESS_DAYS_IN_YEAR**.5)",
        "detail": "almanac.analysis.std_for_risk",
        "documentation": {}
    },
    {
        "label": "DEFAULT_DATE_FORMAT",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "DEFAULT_DATE_FORMAT = \"%Y-%m-%d\"\nFrequency = Enum(\"Frequency\", \"Natural Year Month Week BDay\")\nNATURAL = Frequency.Natural\nYEAR = Frequency.Year\nMONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "Frequency",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "Frequency = Enum(\"Frequency\", \"Natural Year Month Week BDay\")\nNATURAL = Frequency.Natural\nYEAR = Frequency.Year\nMONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "NATURAL",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "NATURAL = Frequency.Natural\nYEAR = Frequency.Year\nMONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "YEAR",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "YEAR = Frequency.Year\nMONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "MONTH",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "MONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "WEEK",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "WEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "BUSINESS_DAYS_IN_YEAR",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "BUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "WEEKS_PER_YEAR",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "WEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "MONTHS_PER_YEAR",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "MONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "SECONDS_PER_YEAR",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "SECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "PERIODS_PER_YEAR",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "PERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "QUANT_PERCENTILE_EXTREME",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "QUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "QUANT_PERCENTILE_STD",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "QUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "NORMAL_DISTR_RATIO",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "NORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "Read_csv",
        "kind": 6,
        "importPath": "almanac.data.data",
        "description": "almanac.data.data",
        "peekOfCode": "class Read_csv:\n    def __init__(self, filename, date_format=\"%Y-%m-%d\", date_index_name=\"index\"):\n        self.filename = filename\n        self.date_format = date_format\n        self.date_index_name = date_index_name\n    def pd_readcsv(self) -> pd.DataFrame:\n        ans = pd.read_csv(self.filename)\n        ans.index = pd.to_datetime(ans[self.date_index_name], format=self.date_format).values\n        del ans[self.date_index_name]\n        ans.index.name = None",
        "detail": "almanac.data.data",
        "documentation": {}
    },
    {
        "label": "Strategy1",
        "kind": 6,
        "importPath": "almanac.strategy.strategy1",
        "description": "almanac.strategy.strategy1",
        "peekOfCode": "class Strategy1:\n    def __init__(self, data_path: str, multiplier: int, risk_target: Union[int, float], capital: int):\n        self.data_path = data_path\n        self.multiplier = multiplier\n        self.risk_target = risk_target\n        self.capital = capital\n        self.data = self.get_data()\n        self.adjusted_price = self.data.adjusted\n        self.current_price = self.data.underlying\n        self.fx_series = pd.Series(1, index=self.data.index)",
        "detail": "almanac.strategy.strategy1",
        "documentation": {}
    },
    {
        "label": "Strategy2",
        "kind": 6,
        "importPath": "almanac.strategy.strategy2",
        "description": "almanac.strategy.strategy2",
        "peekOfCode": "class Strategy2:\n    def __init__(self, data_path: str, multiplier: int, risk_target: Union[int, float], capital: int):\n        self.data_path = data_path\n        self.multiplier = multiplier\n        self.risk_target = risk_target\n        self.capital = capital\n        self.data = self.get_data()\n        self.adjusted_price = self.data.adjusted\n        self.current_price = self.data.underlying\n        self.fx_series = pd.Series(1, index=self.data.index)",
        "detail": "almanac.strategy.strategy2",
        "documentation": {}
    },
    {
        "label": "periods_per_year",
        "kind": 2,
        "importPath": "almanac.utils.utils",
        "description": "almanac.utils.utils",
        "peekOfCode": "def periods_per_year(at_frequency: Frequency):\n    if at_frequency == NATURAL:\n        return BUSINESS_DAYS_IN_YEAR\n    else:\n        return PERIODS_PER_YEAR[at_frequency]\ndef years_in_data(some_data: pd.Series) -> float:\n    datediff = some_data.index[-1] - some_data.index[0]\n    seconds_in_data = datediff.total_seconds()\n    return seconds_in_data / SECONDS_PER_YEAR\ndef sum_at_frequency(perc_return: pd.Series,",
        "detail": "almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "years_in_data",
        "kind": 2,
        "importPath": "almanac.utils.utils",
        "description": "almanac.utils.utils",
        "peekOfCode": "def years_in_data(some_data: pd.Series) -> float:\n    datediff = some_data.index[-1] - some_data.index[0]\n    seconds_in_data = datediff.total_seconds()\n    return seconds_in_data / SECONDS_PER_YEAR\ndef sum_at_frequency(perc_return: pd.Series,\n                     at_frequency: Frequency = NATURAL) -> pd.Series:\n    if at_frequency == NATURAL:\n        return perc_return\n    at_frequency_str_dict = {\n        YEAR: \"Y\",",
        "detail": "almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "sum_at_frequency",
        "kind": 2,
        "importPath": "almanac.utils.utils",
        "description": "almanac.utils.utils",
        "peekOfCode": "def sum_at_frequency(perc_return: pd.Series,\n                     at_frequency: Frequency = NATURAL) -> pd.Series:\n    if at_frequency == NATURAL:\n        return perc_return\n    at_frequency_str_dict = {\n        YEAR: \"Y\",\n        WEEK: \"7D\",\n        MONTH: \"1M\"}\n    at_frequency_str = at_frequency_str_dict[at_frequency]\n    perc_return_at_freq = perc_return.resample(at_frequency_str).sum()",
        "detail": "almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "ann_mean_given_frequency",
        "kind": 2,
        "importPath": "almanac.utils.utils",
        "description": "almanac.utils.utils",
        "peekOfCode": "def ann_mean_given_frequency(perc_return_at_freq: pd.Series,\n                             at_frequency: Frequency) -> float:\n    mean_at_frequency = perc_return_at_freq.mean()\n    periods_per_year_for_frequency = periods_per_year(at_frequency)\n    annualised_mean = mean_at_frequency * periods_per_year_for_frequency\n    return annualised_mean\ndef ann_std_given_frequency(perc_return_at_freq: pd.Series,\n                            at_frequency: Frequency) -> float:\n    std_at_frequency = perc_return_at_freq.std()\n    periods_per_year_for_frequency = periods_per_year(at_frequency)",
        "detail": "almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "ann_std_given_frequency",
        "kind": 2,
        "importPath": "almanac.utils.utils",
        "description": "almanac.utils.utils",
        "peekOfCode": "def ann_std_given_frequency(perc_return_at_freq: pd.Series,\n                            at_frequency: Frequency) -> float:\n    std_at_frequency = perc_return_at_freq.std()\n    periods_per_year_for_frequency = periods_per_year(at_frequency)\n    annualised_std = std_at_frequency * (periods_per_year_for_frequency**.5)\n    return annualised_std\ndef demeaned_remove_zeros(x):\n    x[x == 0] = np.nan\n    return x - x.mean()",
        "detail": "almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "demeaned_remove_zeros",
        "kind": 2,
        "importPath": "almanac.utils.utils",
        "description": "almanac.utils.utils",
        "peekOfCode": "def demeaned_remove_zeros(x):\n    x[x == 0] = np.nan\n    return x - x.mean()",
        "detail": "almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.calculate_returns",
        "description": "build.lib.almanac.analysis.calculate_returns",
        "peekOfCode": "def calculate_perc_returns(\n    position_contracts_held: pd.Series,\n    adjusted_price: pd.Series,\n    fx_series: pd.Series,\n    multiplier: float,\n    capital_required: pd.Series,\n) -> pd.Series:\n    return_price_points = (\n        adjusted_price - adjusted_price.shift(1)\n    ) * position_contracts_held.shift(1)",
        "detail": "build.lib.almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "Stats",
        "kind": 6,
        "importPath": "build.lib.almanac.analysis.calculate_stats",
        "description": "build.lib.almanac.analysis.calculate_stats",
        "peekOfCode": "class Stats():\n    def __init__(self,perc_return, at_frequency = NATURAL) -> None:\n        self.perc_return = perc_return\n        self.at_frequency = at_frequency\n    def _sum_at_frequency(self):\n        if self.at_frequency == NATURAL:\n            return self.perc_return\n        at_frequency_str_dict = {YEAR: \"Y\", WEEK: \"7D\", MONTH: \"1M\"}\n        at_frequency_str = at_frequency_str_dict[self.at_frequency]\n        perc_return_at_freq = self.perc_return.resample(at_frequency_str).sum()",
        "detail": "build.lib.almanac.analysis.calculate_stats",
        "documentation": {}
    },
    {
        "label": "calculate_position_series_given_fixed_risk",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.position_sereies_fixed_risk",
        "description": "build.lib.almanac.analysis.position_sereies_fixed_risk",
        "peekOfCode": "def calculate_position_series_given_fixed_risk(capital: float,\n                                               risk_target_tau: float,\n                                               current_price: pd.Series,\n                                               fx: pd.Series,\n                                               multiplier: float,\n                                               instrument_risk_ann_perc: float) -> pd.Series:\n    #N = (Capital × τ) ÷ (Multiplier × Price × FX × σ %)\n    position_in_contracts =  capital * risk_target_tau / (multiplier * current_price * fx * instrument_risk_ann_perc)\n    return position_in_contracts",
        "detail": "build.lib.almanac.analysis.position_sereies_fixed_risk",
        "documentation": {}
    },
    {
        "label": "calculate_standard_deviation_for_risk_targeting",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.std_for_risk",
        "description": "build.lib.almanac.analysis.std_for_risk",
        "peekOfCode": "def calculate_standard_deviation_for_risk_targeting(adjusted_price: pd.Series,\n                                                    current_price: pd.Series):\n    daily_price_changes = adjusted_price.diff()\n    percentage_changes = daily_price_changes / current_price.shift(1)\n    ## Can do the whole series or recent history\n    recent_daily_std = percentage_changes.tail(30).std()\n    return recent_daily_std*(BUSINESS_DAYS_IN_YEAR**.5)",
        "detail": "build.lib.almanac.analysis.std_for_risk",
        "documentation": {}
    },
    {
        "label": "DEFAULT_DATE_FORMAT",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "DEFAULT_DATE_FORMAT = \"%Y-%m-%d\"\nFrequency = Enum(\"Frequency\", \"Natural Year Month Week BDay\")\nNATURAL = Frequency.Natural\nYEAR = Frequency.Year\nMONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "Frequency",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "Frequency = Enum(\"Frequency\", \"Natural Year Month Week BDay\")\nNATURAL = Frequency.Natural\nYEAR = Frequency.Year\nMONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "NATURAL",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "NATURAL = Frequency.Natural\nYEAR = Frequency.Year\nMONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "YEAR",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "YEAR = Frequency.Year\nMONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "MONTH",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "MONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "WEEK",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "WEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "BUSINESS_DAYS_IN_YEAR",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "BUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "WEEKS_PER_YEAR",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "WEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "MONTHS_PER_YEAR",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "MONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "SECONDS_PER_YEAR",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "SECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "PERIODS_PER_YEAR",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "PERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "QUANT_PERCENTILE_EXTREME",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "QUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "QUANT_PERCENTILE_STD",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "QUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "NORMAL_DISTR_RATIO",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "NORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "Read_csv",
        "kind": 6,
        "importPath": "build.lib.almanac.data.data",
        "description": "build.lib.almanac.data.data",
        "peekOfCode": "class Read_csv:\n    def __init__(self, filename, date_format=\"%Y-%m-%d\", date_index_name=\"index\"):\n        self.filename = filename\n        self.date_format = date_format\n        self.date_index_name = date_index_name\n    def pd_readcsv(self) -> pd.DataFrame:\n        ans = pd.read_csv(self.filename)\n        ans.index = pd.to_datetime(ans[self.date_index_name], format=self.date_format).values\n        del ans[self.date_index_name]\n        ans.index.name = None",
        "detail": "build.lib.almanac.data.data",
        "documentation": {}
    },
    {
        "label": "Strategy1",
        "kind": 6,
        "importPath": "build.lib.almanac.strategy.strategy1",
        "description": "build.lib.almanac.strategy.strategy1",
        "peekOfCode": "class Strategy1:\n    def __init__(self, data_path: str, multiplier: int, risk_target: Union[int, float], capital: int):\n        self.data_path = data_path\n        self.multiplier = multiplier\n        self.risk_target = risk_target\n        self.capital = capital\n        self.data = self.get_data()\n        self.adjusted_price = self.data.adjusted\n        self.current_price = self.data.underlying\n        self.fx_series = pd.Series(1, index=self.data.index)",
        "detail": "build.lib.almanac.strategy.strategy1",
        "documentation": {}
    },
    {
        "label": "Strategy2",
        "kind": 6,
        "importPath": "build.lib.almanac.strategy.strategy2",
        "description": "build.lib.almanac.strategy.strategy2",
        "peekOfCode": "class Strategy2:\n    def __init__(self, data_path: str, multiplier: int, risk_target: Union[int, float], capital: int):\n        self.data_path = data_path\n        self.multiplier = multiplier\n        self.risk_target = risk_target\n        self.capital = capital\n        self.data = self.get_data()\n        self.adjusted_price = self.data.adjusted\n        self.current_price = self.data.underlying\n        self.fx_series = pd.Series(1, index=self.data.index)",
        "detail": "build.lib.almanac.strategy.strategy2",
        "documentation": {}
    },
    {
        "label": "periods_per_year",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils",
        "description": "build.lib.almanac.utils.utils",
        "peekOfCode": "def periods_per_year(at_frequency: Frequency):\n    if at_frequency == NATURAL:\n        return BUSINESS_DAYS_IN_YEAR\n    else:\n        return PERIODS_PER_YEAR[at_frequency]\ndef years_in_data(some_data: pd.Series) -> float:\n    datediff = some_data.index[-1] - some_data.index[0]\n    seconds_in_data = datediff.total_seconds()\n    return seconds_in_data / SECONDS_PER_YEAR\ndef sum_at_frequency(perc_return: pd.Series,",
        "detail": "build.lib.almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "years_in_data",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils",
        "description": "build.lib.almanac.utils.utils",
        "peekOfCode": "def years_in_data(some_data: pd.Series) -> float:\n    datediff = some_data.index[-1] - some_data.index[0]\n    seconds_in_data = datediff.total_seconds()\n    return seconds_in_data / SECONDS_PER_YEAR\ndef sum_at_frequency(perc_return: pd.Series,\n                     at_frequency: Frequency = NATURAL) -> pd.Series:\n    if at_frequency == NATURAL:\n        return perc_return\n    at_frequency_str_dict = {\n        YEAR: \"Y\",",
        "detail": "build.lib.almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "sum_at_frequency",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils",
        "description": "build.lib.almanac.utils.utils",
        "peekOfCode": "def sum_at_frequency(perc_return: pd.Series,\n                     at_frequency: Frequency = NATURAL) -> pd.Series:\n    if at_frequency == NATURAL:\n        return perc_return\n    at_frequency_str_dict = {\n        YEAR: \"Y\",\n        WEEK: \"7D\",\n        MONTH: \"1M\"}\n    at_frequency_str = at_frequency_str_dict[at_frequency]\n    perc_return_at_freq = perc_return.resample(at_frequency_str).sum()",
        "detail": "build.lib.almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "ann_mean_given_frequency",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils",
        "description": "build.lib.almanac.utils.utils",
        "peekOfCode": "def ann_mean_given_frequency(perc_return_at_freq: pd.Series,\n                             at_frequency: Frequency) -> float:\n    mean_at_frequency = perc_return_at_freq.mean()\n    periods_per_year_for_frequency = periods_per_year(at_frequency)\n    annualised_mean = mean_at_frequency * periods_per_year_for_frequency\n    return annualised_mean\ndef ann_std_given_frequency(perc_return_at_freq: pd.Series,\n                            at_frequency: Frequency) -> float:\n    std_at_frequency = perc_return_at_freq.std()\n    periods_per_year_for_frequency = periods_per_year(at_frequency)",
        "detail": "build.lib.almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "ann_std_given_frequency",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils",
        "description": "build.lib.almanac.utils.utils",
        "peekOfCode": "def ann_std_given_frequency(perc_return_at_freq: pd.Series,\n                            at_frequency: Frequency) -> float:\n    std_at_frequency = perc_return_at_freq.std()\n    periods_per_year_for_frequency = periods_per_year(at_frequency)\n    annualised_std = std_at_frequency * (periods_per_year_for_frequency**.5)\n    return annualised_std\ndef demeaned_remove_zeros(x):\n    x[x == 0] = np.nan\n    return x - x.mean()",
        "detail": "build.lib.almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "demeaned_remove_zeros",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils",
        "description": "build.lib.almanac.utils.utils",
        "peekOfCode": "def demeaned_remove_zeros(x):\n    x[x == 0] = np.nan\n    return x - x.mean()",
        "detail": "build.lib.almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "periods_per_year",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "def periods_per_year(at_frequency: Frequency):\n    if at_frequency == NATURAL:\n        return BUSINESS_DAYS_IN_YEAR\n    else:\n        return PERIODS_PER_YEAR[at_frequency]\ndef years_in_data(some_data: pd.Series) -> float:\n    datediff = some_data.index[-1] - some_data.index[0]\n    seconds_in_data = datediff.total_seconds()\n    return seconds_in_data / SECONDS_PER_YEAR\ndef sum_at_frequency(perc_return: pd.Series,",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "years_in_data",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "def years_in_data(some_data: pd.Series) -> float:\n    datediff = some_data.index[-1] - some_data.index[0]\n    seconds_in_data = datediff.total_seconds()\n    return seconds_in_data / SECONDS_PER_YEAR\ndef sum_at_frequency(perc_return: pd.Series,\n                     at_frequency: Frequency = NATURAL) -> pd.Series:\n    if at_frequency == NATURAL:\n        return perc_return\n    at_frequency_str_dict = {\n        YEAR: \"Y\",",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "sum_at_frequency",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "def sum_at_frequency(perc_return: pd.Series,\n                     at_frequency: Frequency = NATURAL) -> pd.Series:\n    if at_frequency == NATURAL:\n        return perc_return\n    at_frequency_str_dict = {\n        YEAR: \"Y\",\n        WEEK: \"7D\",\n        MONTH: \"1M\"}\n    at_frequency_str = at_frequency_str_dict[at_frequency]\n    perc_return_at_freq = perc_return.resample(at_frequency_str).sum()",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "ann_mean_given_frequency",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "def ann_mean_given_frequency(perc_return_at_freq: pd.Series,\n                             at_frequency: Frequency) -> float:\n    mean_at_frequency = perc_return_at_freq.mean()\n    periods_per_year_for_frequency = periods_per_year(at_frequency)\n    annualised_mean = mean_at_frequency * periods_per_year_for_frequency\n    return annualised_mean\ndef ann_std_given_frequency(perc_return_at_freq: pd.Series,\n                            at_frequency: Frequency) -> float:\n    std_at_frequency = perc_return_at_freq.std()\n    periods_per_year_for_frequency = periods_per_year(at_frequency)",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "ann_std_given_frequency",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "def ann_std_given_frequency(perc_return_at_freq: pd.Series,\n                            at_frequency: Frequency) -> float:\n    std_at_frequency = perc_return_at_freq.std()\n    periods_per_year_for_frequency = periods_per_year(at_frequency)\n    annualised_std = std_at_frequency * (periods_per_year_for_frequency**.5)\n    return annualised_std\ndef demeaned_remove_zeros(x):\n    x[x == 0] = np.nan\n    return x - x.mean()",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "demeaned_remove_zeros",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "def demeaned_remove_zeros(x):\n    x[x == 0] = np.nan\n    return x - x.mean()",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "DEFAULT_DATE_FORMAT",
        "kind": 5,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "DEFAULT_DATE_FORMAT = \"%Y-%m-%d\"\nFrequency = Enum(\n    \"Frequency\",\n    \"Natural Year Month Week BDay\",\n)\nNATURAL = Frequency.Natural\nYEAR = Frequency.Year\nMONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "Frequency",
        "kind": 5,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "Frequency = Enum(\n    \"Frequency\",\n    \"Natural Year Month Week BDay\",\n)\nNATURAL = Frequency.Natural\nYEAR = Frequency.Year\nMONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "NATURAL",
        "kind": 5,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "NATURAL = Frequency.Natural\nYEAR = Frequency.Year\nMONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {\n    MONTH: MONTHS_PER_YEAR,",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "YEAR",
        "kind": 5,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "YEAR = Frequency.Year\nMONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {\n    MONTH: MONTHS_PER_YEAR,\n    WEEK: WEEKS_PER_YEAR,",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "MONTH",
        "kind": 5,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "MONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {\n    MONTH: MONTHS_PER_YEAR,\n    WEEK: WEEKS_PER_YEAR,\n    YEAR: 1",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "WEEK",
        "kind": 5,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "WEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {\n    MONTH: MONTHS_PER_YEAR,\n    WEEK: WEEKS_PER_YEAR,\n    YEAR: 1\n}",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "BUSINESS_DAYS_IN_YEAR",
        "kind": 5,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "BUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {\n    MONTH: MONTHS_PER_YEAR,\n    WEEK: WEEKS_PER_YEAR,\n    YEAR: 1\n}\ndef periods_per_year(at_frequency: Frequency):",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "WEEKS_PER_YEAR",
        "kind": 5,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "WEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {\n    MONTH: MONTHS_PER_YEAR,\n    WEEK: WEEKS_PER_YEAR,\n    YEAR: 1\n}\ndef periods_per_year(at_frequency: Frequency):\n    if at_frequency == NATURAL:",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "MONTHS_PER_YEAR",
        "kind": 5,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "MONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {\n    MONTH: MONTHS_PER_YEAR,\n    WEEK: WEEKS_PER_YEAR,\n    YEAR: 1\n}\ndef periods_per_year(at_frequency: Frequency):\n    if at_frequency == NATURAL:\n        return BUSINESS_DAYS_IN_YEAR",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "SECONDS_PER_YEAR",
        "kind": 5,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "SECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {\n    MONTH: MONTHS_PER_YEAR,\n    WEEK: WEEKS_PER_YEAR,\n    YEAR: 1\n}\ndef periods_per_year(at_frequency: Frequency):\n    if at_frequency == NATURAL:\n        return BUSINESS_DAYS_IN_YEAR\n    else:",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "PERIODS_PER_YEAR",
        "kind": 5,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "PERIODS_PER_YEAR = {\n    MONTH: MONTHS_PER_YEAR,\n    WEEK: WEEKS_PER_YEAR,\n    YEAR: 1\n}\ndef periods_per_year(at_frequency: Frequency):\n    if at_frequency == NATURAL:\n        return BUSINESS_DAYS_IN_YEAR\n    else:\n        return PERIODS_PER_YEAR[at_frequency]",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    }
]