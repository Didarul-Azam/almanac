[
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "norm",
        "importPath": "scipy.stats",
        "description": "scipy.stats",
        "isExtraImport": true,
        "detail": "scipy.stats",
        "documentation": {}
    },
    {
        "label": "norm",
        "importPath": "scipy.stats",
        "description": "scipy.stats",
        "isExtraImport": true,
        "detail": "scipy.stats",
        "documentation": {}
    },
    {
        "label": "norm",
        "importPath": "scipy.stats",
        "description": "scipy.stats",
        "isExtraImport": true,
        "detail": "scipy.stats",
        "documentation": {}
    },
    {
        "label": "norm",
        "importPath": "scipy.stats",
        "description": "scipy.stats",
        "isExtraImport": true,
        "detail": "scipy.stats",
        "documentation": {}
    },
    {
        "label": "norm",
        "importPath": "scipy.stats",
        "description": "scipy.stats",
        "isExtraImport": true,
        "detail": "scipy.stats",
        "documentation": {}
    },
    {
        "label": "norm",
        "importPath": "scipy.stats",
        "description": "scipy.stats",
        "isExtraImport": true,
        "detail": "scipy.stats",
        "documentation": {}
    },
    {
        "label": "norm",
        "importPath": "scipy.stats",
        "description": "scipy.stats",
        "isExtraImport": true,
        "detail": "scipy.stats",
        "documentation": {}
    },
    {
        "label": "periods_per_year",
        "importPath": "almanac.utils.utils",
        "description": "almanac.utils.utils",
        "isExtraImport": true,
        "detail": "almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "demeaned_remove_zeros",
        "importPath": "almanac.utils.utils",
        "description": "almanac.utils.utils",
        "isExtraImport": true,
        "detail": "almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "periods_per_year",
        "importPath": "almanac.utils.utils",
        "description": "almanac.utils.utils",
        "isExtraImport": true,
        "detail": "almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "demeaned_remove_zeros",
        "importPath": "almanac.utils.utils",
        "description": "almanac.utils.utils",
        "isExtraImport": true,
        "detail": "almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "BUSINESS_DAYS_IN_YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "DEFAULT_DATE_FORMAT",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "Frequency",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "NATURAL",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "MONTH",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "WEEK",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "BUSINESS_DAYS_IN_YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "WEEKS_PER_YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "MONTHS_PER_YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "SECONDS_PER_YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "PERIODS_PER_YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "BUSINESS_DAYS_IN_YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "DEFAULT_DATE_FORMAT",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "Frequency",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "NATURAL",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "MONTH",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "WEEK",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "BUSINESS_DAYS_IN_YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "WEEKS_PER_YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "MONTHS_PER_YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "SECONDS_PER_YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "PERIODS_PER_YEAR",
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "isExtraImport": true,
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "hierarchy",
        "importPath": "scipy.cluster",
        "description": "scipy.cluster",
        "isExtraImport": true,
        "detail": "scipy.cluster",
        "documentation": {}
    },
    {
        "label": "hierarchy",
        "importPath": "scipy.cluster",
        "description": "scipy.cluster",
        "isExtraImport": true,
        "detail": "scipy.cluster",
        "documentation": {}
    },
    {
        "label": "Read_csv",
        "importPath": "almanac.data.data",
        "description": "almanac.data.data",
        "isExtraImport": true,
        "detail": "almanac.data.data",
        "documentation": {}
    },
    {
        "label": "Read_csv",
        "importPath": "almanac.data.data",
        "description": "almanac.data.data",
        "isExtraImport": true,
        "detail": "almanac.data.data",
        "documentation": {}
    },
    {
        "label": "Read_csv",
        "importPath": "almanac.data.data",
        "description": "almanac.data.data",
        "isExtraImport": true,
        "detail": "almanac.data.data",
        "documentation": {}
    },
    {
        "label": "Read_csv",
        "importPath": "almanac.data.data",
        "description": "almanac.data.data",
        "isExtraImport": true,
        "detail": "almanac.data.data",
        "documentation": {}
    },
    {
        "label": "Read_csv",
        "importPath": "almanac.data.data",
        "description": "almanac.data.data",
        "isExtraImport": true,
        "detail": "almanac.data.data",
        "documentation": {}
    },
    {
        "label": "Read_csv",
        "importPath": "almanac.data.data",
        "description": "almanac.data.data",
        "isExtraImport": true,
        "detail": "almanac.data.data",
        "documentation": {}
    },
    {
        "label": "Read_csv",
        "importPath": "almanac.data.data",
        "description": "almanac.data.data",
        "isExtraImport": true,
        "detail": "almanac.data.data",
        "documentation": {}
    },
    {
        "label": "Read_csv",
        "importPath": "almanac.data.data",
        "description": "almanac.data.data",
        "isExtraImport": true,
        "detail": "almanac.data.data",
        "documentation": {}
    },
    {
        "label": "standardDeviation",
        "importPath": "almanac.utils.standardDeviation",
        "description": "almanac.utils.standardDeviation",
        "isExtraImport": true,
        "detail": "almanac.utils.standardDeviation",
        "documentation": {}
    },
    {
        "label": "standardDeviation",
        "importPath": "almanac.utils.standardDeviation",
        "description": "almanac.utils.standardDeviation",
        "isExtraImport": true,
        "detail": "almanac.utils.standardDeviation",
        "documentation": {}
    },
    {
        "label": "standardDeviation",
        "importPath": "almanac.utils.standardDeviation",
        "description": "almanac.utils.standardDeviation",
        "isExtraImport": true,
        "detail": "almanac.utils.standardDeviation",
        "documentation": {}
    },
    {
        "label": "standardDeviation",
        "importPath": "almanac.utils.standardDeviation",
        "description": "almanac.utils.standardDeviation",
        "isExtraImport": true,
        "detail": "almanac.utils.standardDeviation",
        "documentation": {}
    },
    {
        "label": "calculate_percentage_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_daily_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_percentage_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_daily_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_percentage_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_daily_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_percentage_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_daily_returns",
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Stats",
        "importPath": "almanac.analysis.calculate_stats",
        "description": "almanac.analysis.calculate_stats",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_stats",
        "documentation": {}
    },
    {
        "label": "Stats",
        "importPath": "almanac.analysis.calculate_stats",
        "description": "almanac.analysis.calculate_stats",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_stats",
        "documentation": {}
    },
    {
        "label": "Stats",
        "importPath": "almanac.analysis.calculate_stats",
        "description": "almanac.analysis.calculate_stats",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_stats",
        "documentation": {}
    },
    {
        "label": "Stats",
        "importPath": "almanac.analysis.calculate_stats",
        "description": "almanac.analysis.calculate_stats",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_stats",
        "documentation": {}
    },
    {
        "label": "Stats",
        "importPath": "almanac.analysis.calculate_stats",
        "description": "almanac.analysis.calculate_stats",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_stats",
        "documentation": {}
    },
    {
        "label": "Stats",
        "importPath": "almanac.analysis.calculate_stats",
        "description": "almanac.analysis.calculate_stats",
        "isExtraImport": true,
        "detail": "almanac.analysis.calculate_stats",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "calculate_position_series_given_fixed_risk",
        "importPath": "almanac.analysis.position_sereies_fixed_risk",
        "description": "almanac.analysis.position_sereies_fixed_risk",
        "isExtraImport": true,
        "detail": "almanac.analysis.position_sereies_fixed_risk",
        "documentation": {}
    },
    {
        "label": "calculate_position_series_given_fixed_risk",
        "importPath": "almanac.analysis.position_sereies_fixed_risk",
        "description": "almanac.analysis.position_sereies_fixed_risk",
        "isExtraImport": true,
        "detail": "almanac.analysis.position_sereies_fixed_risk",
        "documentation": {}
    },
    {
        "label": "calculate_position_series_given_fixed_risk",
        "importPath": "almanac.analysis.position_sereies_fixed_risk",
        "description": "almanac.analysis.position_sereies_fixed_risk",
        "isExtraImport": true,
        "detail": "almanac.analysis.position_sereies_fixed_risk",
        "documentation": {}
    },
    {
        "label": "calculate_position_series_given_fixed_risk",
        "importPath": "almanac.analysis.position_sereies_fixed_risk",
        "description": "almanac.analysis.position_sereies_fixed_risk",
        "isExtraImport": true,
        "detail": "almanac.analysis.position_sereies_fixed_risk",
        "documentation": {}
    },
    {
        "label": "calculate_standard_deviation_for_risk_targeting",
        "importPath": "almanac.analysis.std_for_risk",
        "description": "almanac.analysis.std_for_risk",
        "isExtraImport": true,
        "detail": "almanac.analysis.std_for_risk",
        "documentation": {}
    },
    {
        "label": "calculate_standard_deviation_for_risk_targeting",
        "importPath": "almanac.analysis.std_for_risk",
        "description": "almanac.analysis.std_for_risk",
        "isExtraImport": true,
        "detail": "almanac.analysis.std_for_risk",
        "documentation": {}
    },
    {
        "label": "calculate_variable_standard_deviation_for_risk_targeting",
        "importPath": "almanac.analysis.std_for_risk",
        "description": "almanac.analysis.std_for_risk",
        "isExtraImport": true,
        "detail": "almanac.analysis.std_for_risk",
        "documentation": {}
    },
    {
        "label": "calculate_standard_deviation_for_risk_targeting",
        "importPath": "almanac.analysis.std_for_risk",
        "description": "almanac.analysis.std_for_risk",
        "isExtraImport": true,
        "detail": "almanac.analysis.std_for_risk",
        "documentation": {}
    },
    {
        "label": "calculate_standard_deviation_for_risk_targeting",
        "importPath": "almanac.analysis.std_for_risk",
        "description": "almanac.analysis.std_for_risk",
        "isExtraImport": true,
        "detail": "almanac.analysis.std_for_risk",
        "documentation": {}
    },
    {
        "label": "calculate_variable_standard_deviation_for_risk_targeting",
        "importPath": "almanac.analysis.std_for_risk",
        "description": "almanac.analysis.std_for_risk",
        "isExtraImport": true,
        "detail": "almanac.analysis.std_for_risk",
        "documentation": {}
    },
    {
        "label": "calculate_position_series_given_variable_risk",
        "importPath": "almanac.analysis.position_sereies_variable_risk",
        "description": "almanac.analysis.position_sereies_variable_risk",
        "isExtraImport": true,
        "detail": "almanac.analysis.position_sereies_variable_risk",
        "documentation": {}
    },
    {
        "label": "calculate_position_series_given_variable_risk",
        "importPath": "almanac.analysis.position_sereies_variable_risk",
        "description": "almanac.analysis.position_sereies_variable_risk",
        "isExtraImport": true,
        "detail": "almanac.analysis.position_sereies_variable_risk",
        "documentation": {}
    },
    {
        "label": "handcrafting_algo",
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "isExtraImport": true,
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "handcrafting_algo",
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "isExtraImport": true,
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "copy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "copy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "almanac",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "almanac",
        "description": "almanac",
        "detail": "almanac",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns",
        "kind": 2,
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "peekOfCode": "def calculate_perc_returns(\n    position_contracts_held: pd.Series,\n    adjusted_price: pd.Series,\n    fx_series: pd.Series,\n    multiplier: float,\n    capital_required: pd.Series,\n) -> pd.Series:\n    return_price_points = (\n        adjusted_price - adjusted_price.shift(1)\n    ) * position_contracts_held.shift(1)",
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_percentage_returns",
        "kind": 2,
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "peekOfCode": "def calculate_percentage_returns(\n    adjusted_price: pd.Series, current_price: pd.Series\n) -> pd.Series:\n    daily_price_changes = calculate_daily_returns(adjusted_price)\n    percentage_changes = daily_price_changes / current_price.shift(1)\n    return percentage_changes\ndef calculate_daily_returns(adjusted_price: pd.Series) -> pd.Series:\n    return adjusted_price.diff()",
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_daily_returns",
        "kind": 2,
        "importPath": "almanac.analysis.calculate_returns",
        "description": "almanac.analysis.calculate_returns",
        "peekOfCode": "def calculate_daily_returns(adjusted_price: pd.Series) -> pd.Series:\n    return adjusted_price.diff()",
        "detail": "almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "Stats",
        "kind": 6,
        "importPath": "almanac.analysis.calculate_stats",
        "description": "almanac.analysis.calculate_stats",
        "peekOfCode": "class Stats():\n    def __init__(self,perc_return, at_frequency = NATURAL) -> None:\n        self.perc_return = perc_return\n        self.at_frequency = at_frequency\n    def _sum_at_frequency(self):\n        if self.at_frequency == NATURAL:\n            return self.perc_return\n        at_frequency_str_dict = {YEAR: \"Y\", WEEK: \"7D\", MONTH: \"1M\"}\n        at_frequency_str = at_frequency_str_dict[self.at_frequency]\n        perc_return_at_freq = self.perc_return.resample(at_frequency_str).sum()",
        "detail": "almanac.analysis.calculate_stats",
        "documentation": {}
    },
    {
        "label": "correlationEstimate",
        "kind": 6,
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "peekOfCode": "class correlationEstimate(object):\n    def __init__(self, values: pd.DataFrame):\n        columns = values.columns\n        values = values.values\n        self._values = values\n        self._columns = columns\n    def __repr__(self):\n        return str(self.as_pd())\n    def __len__(self):\n        return len(self.columns)",
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "portfolioWeights",
        "kind": 6,
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "peekOfCode": "class portfolioWeights(dict):\n    @property\n    def weights(self):\n        return list(self.values())\n    @property\n    def assets(self):\n        return list(self.keys())\n    def multiply_by_float(self, multiplier: float):\n        list_of_assets = self.assets\n        list_of_weights = [self[asset] for asset in list_of_assets]",
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "handcraftPortfolio",
        "kind": 6,
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "peekOfCode": "class handcraftPortfolio(object):\n    def __init__(self, correlation: correlationEstimate):\n        self._correlation = correlation\n    @property\n    def correlation(self) -> correlationEstimate:\n        return self._correlation\n    @property\n    def size(self) -> int:\n        return len(self.correlation)\n    @property",
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "cluster_correlation_matrix",
        "kind": 2,
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "peekOfCode": "def cluster_correlation_matrix(corr_matrix: correlationEstimate, cluster_size: int = 2):\n    clusters = get_list_of_clusters_for_correlation_matrix(\n        corr_matrix, cluster_size=cluster_size\n    )\n    clusters_as_names = from_cluster_index_to_asset_names(\n        clusters, corr_matrix)\n    if PRINT_TRACE:\n        print(\"Cluster split: %s\" % str(clusters_as_names))\n    return clusters_as_names\ndef get_list_of_clusters_for_correlation_matrix(",
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "get_list_of_clusters_for_correlation_matrix",
        "kind": 2,
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "peekOfCode": "def get_list_of_clusters_for_correlation_matrix(\n    corr_matrix: np.array, cluster_size: int = 2\n) -> list:\n    corr_as_np = corr_matrix.values\n    try:\n        clusters = get_list_of_clusters_for_correlation_matrix_as_np(\n            corr_as_np, cluster_size=cluster_size\n        )\n    except:\n        clusters = arbitrary_split_of_correlation_matrix(",
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "get_list_of_clusters_for_correlation_matrix_as_np",
        "kind": 2,
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "peekOfCode": "def get_list_of_clusters_for_correlation_matrix_as_np(\n    corr_as_np: np.array, cluster_size: int = 2\n) -> list:\n    d = sch.distance.pdist(corr_as_np)\n    L = sch.linkage(d, method=\"complete\")\n    cutoff = cutoff_distance_to_guarantee_N_clusters(\n        corr_as_np, L=L, cluster_size=cluster_size\n    )\n    ind = sch.fcluster(L, cutoff, \"distance\")\n    ind = list(ind)",
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "cutoff_distance_to_guarantee_N_clusters",
        "kind": 2,
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "peekOfCode": "def cutoff_distance_to_guarantee_N_clusters(\n    corr_as_np: np.array, L: np.array, cluster_size: int = 2\n):\n    # assert cluster_size==2\n    N = len(corr_as_np)\n    return L[N - cluster_size][2] - 0.000001\ndef arbitrary_split_of_correlation_matrix(\n    corr_matrix: np.array, cluster_size: int = 2\n) -> list:\n    # split correlation of 3 or more assets",
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "arbitrary_split_of_correlation_matrix",
        "kind": 2,
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "peekOfCode": "def arbitrary_split_of_correlation_matrix(\n    corr_matrix: np.array, cluster_size: int = 2\n) -> list:\n    # split correlation of 3 or more assets\n    count_assets = len(corr_matrix)\n    return arbitrary_split_for_asset_length(count_assets, cluster_size=cluster_size)\ndef arbitrary_split_for_asset_length(count_assets: int, cluster_size: int = 2) -> list:\n    return [(x % cluster_size) + 1 for x in range(count_assets)]\ndef from_cluster_index_to_asset_names(\n    clusters: list, corr_matrix: correlationEstimate",
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "arbitrary_split_for_asset_length",
        "kind": 2,
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "peekOfCode": "def arbitrary_split_for_asset_length(count_assets: int, cluster_size: int = 2) -> list:\n    return [(x % cluster_size) + 1 for x in range(count_assets)]\ndef from_cluster_index_to_asset_names(\n    clusters: list, corr_matrix: correlationEstimate\n) -> list:\n    all_clusters = list(set(clusters))\n    asset_names = corr_matrix.columns\n    list_of_asset_clusters = [\n        get_asset_names_for_cluster_index(cluster_id, clusters, asset_names)\n        for cluster_id in all_clusters",
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "from_cluster_index_to_asset_names",
        "kind": 2,
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "peekOfCode": "def from_cluster_index_to_asset_names(\n    clusters: list, corr_matrix: correlationEstimate\n) -> list:\n    all_clusters = list(set(clusters))\n    asset_names = corr_matrix.columns\n    list_of_asset_clusters = [\n        get_asset_names_for_cluster_index(cluster_id, clusters, asset_names)\n        for cluster_id in all_clusters\n    ]\n    return list_of_asset_clusters",
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "get_asset_names_for_cluster_index",
        "kind": 2,
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "peekOfCode": "def get_asset_names_for_cluster_index(\n    cluster_id: int, clusters: list, asset_names: list\n):\n    list_of_assets = [\n        asset for asset, cluster in zip(asset_names, clusters) if cluster == cluster_id\n    ]\n    return list_of_assets\nclass portfolioWeights(dict):\n    @property\n    def weights(self):",
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "flatten_list",
        "kind": 2,
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "peekOfCode": "def flatten_list(some_list):\n    flattened = [item for sublist in some_list for item in sublist]\n    return flattened\ndef one_over_n_weights_given_asset_names(list_of_asset_names: list) -> portfolioWeights:\n    weight = 1.0 / len(list_of_asset_names)\n    return portfolioWeights(\n        [(asset_name, weight) for asset_name in list_of_asset_names]\n    )\nclass handcraftPortfolio(object):\n    def __init__(self, correlation: correlationEstimate):",
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "one_over_n_weights_given_asset_names",
        "kind": 2,
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "peekOfCode": "def one_over_n_weights_given_asset_names(list_of_asset_names: list) -> portfolioWeights:\n    weight = 1.0 / len(list_of_asset_names)\n    return portfolioWeights(\n        [(asset_name, weight) for asset_name in list_of_asset_names]\n    )\nclass handcraftPortfolio(object):\n    def __init__(self, correlation: correlationEstimate):\n        self._correlation = correlation\n    @property\n    def correlation(self) -> correlationEstimate:",
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "create_sub_portfolios_from_portfolio",
        "kind": 2,
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "peekOfCode": "def create_sub_portfolios_from_portfolio(handcraft_portfolio: handcraftPortfolio):\n    clusters_as_names = cluster_correlation_matrix(\n        handcraft_portfolio.correlation)\n    sub_portfolios = create_sub_portfolios_given_clusters(\n        clusters_as_names, handcraft_portfolio\n    )\n    return sub_portfolios\ndef create_sub_portfolios_given_clusters(\n    clusters_as_names: list, handcraft_portfolio: handcraftPortfolio\n) -> list:",
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "create_sub_portfolios_given_clusters",
        "kind": 2,
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "peekOfCode": "def create_sub_portfolios_given_clusters(\n    clusters_as_names: list, handcraft_portfolio: handcraftPortfolio\n) -> list:\n    list_of_sub_portfolios = [\n        handcraft_portfolio.subset(subset_of_asset_names)\n        for subset_of_asset_names in clusters_as_names\n    ]\n    return list_of_sub_portfolios\ndef aggregate_risk_weights_over_sub_portfolios(\n    sub_portfolios: list,",
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "aggregate_risk_weights_over_sub_portfolios",
        "kind": 2,
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "peekOfCode": "def aggregate_risk_weights_over_sub_portfolios(\n    sub_portfolios: list,\n) -> portfolioWeights:\n    # sub portfolios guaranteed to be 2 long\n    # We allocate half to each\n    asset_count = len(sub_portfolios)\n    # assert asset_count == 2\n    weights_for_each_subportfolio = [1.0 / asset_count] * asset_count\n    risk_weights_by_portfolio = [\n        sub_portfolio.weights() for sub_portfolio in sub_portfolios",
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "handcrafting_algo",
        "kind": 2,
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "peekOfCode": "def handcrafting_algo(instument_returns):\n    reader = Read_csv(instument_returns)\n    all_returns = reader.pd_readcsv()\n    corr_matrix = correlationEstimate(all_returns.corr())\n    handcraft_portfolio = handcraftPortfolio(corr_matrix)\n    PRINT_TRACE = True\n    portfolio_weights = handcraft_portfolio.weights()\n    return portfolio_weights",
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "PRINT_TRACE",
        "kind": 5,
        "importPath": "almanac.analysis.handcrafting",
        "description": "almanac.analysis.handcrafting",
        "peekOfCode": "PRINT_TRACE = False\nclass correlationEstimate(object):\n    def __init__(self, values: pd.DataFrame):\n        columns = values.columns\n        values = values.values\n        self._values = values\n        self._columns = columns\n    def __repr__(self):\n        return str(self.as_pd())\n    def __len__(self):",
        "detail": "almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "calculate_position_series_given_fixed_risk",
        "kind": 2,
        "importPath": "almanac.analysis.position_sereies_fixed_risk",
        "description": "almanac.analysis.position_sereies_fixed_risk",
        "peekOfCode": "def calculate_position_series_given_fixed_risk(capital: float,\n                                               risk_target_tau: float,\n                                               current_price: pd.Series,\n                                               fx: pd.Series,\n                                               multiplier: float,\n                                               instrument_risk_ann_perc: float) -> pd.Series:\n    #N = (Capital × τ) ÷ (Multiplier × Price × FX × σ %)\n    position_in_contracts =  capital * risk_target_tau / (multiplier * current_price * fx * instrument_risk_ann_perc)\n    return position_in_contracts",
        "detail": "almanac.analysis.position_sereies_fixed_risk",
        "documentation": {}
    },
    {
        "label": "calculate_position_series_given_variable_risk",
        "kind": 2,
        "importPath": "almanac.analysis.position_sereies_variable_risk",
        "description": "almanac.analysis.position_sereies_variable_risk",
        "peekOfCode": "def calculate_position_series_given_variable_risk(\n    capital: float,\n    risk_target_tau: float,\n    fx: pd.Series,\n    multiplier: float,\n    instrument_risk: standardDeviation,\n) -> pd.Series:\n    # N = (Capital × τ) ÷ (Multiplier × Price × FX × σ %)\n    ## resolves to N = (Capital × τ) ÷ (Multiplier × FX × daily stdev price terms × 16)\n    ## for simplicity we use the daily risk in price terms, even if we calculated annualised % returns",
        "detail": "almanac.analysis.position_sereies_variable_risk",
        "documentation": {}
    },
    {
        "label": "calculate_standard_deviation_for_risk_targeting",
        "kind": 2,
        "importPath": "almanac.analysis.std_for_risk",
        "description": "almanac.analysis.std_for_risk",
        "peekOfCode": "def calculate_standard_deviation_for_risk_targeting(adjusted_price: pd.Series,\n                                                    current_price: pd.Series):\n    daily_price_changes = adjusted_price.diff()\n    percentage_changes = daily_price_changes / current_price.shift(1)\n    ## Can do the whole series or recent history\n    recent_daily_std = percentage_changes.tail(30).std()\n    return recent_daily_std*(BUSINESS_DAYS_IN_YEAR**.5)\ndef calculate_variable_standard_deviation_for_risk_targeting(\n    adjusted_price: pd.Series,\n    current_price: pd.Series,",
        "detail": "almanac.analysis.std_for_risk",
        "documentation": {}
    },
    {
        "label": "calculate_variable_standard_deviation_for_risk_targeting",
        "kind": 2,
        "importPath": "almanac.analysis.std_for_risk",
        "description": "almanac.analysis.std_for_risk",
        "peekOfCode": "def calculate_variable_standard_deviation_for_risk_targeting(\n    adjusted_price: pd.Series,\n    current_price: pd.Series,\n    use_perc_returns: bool = True,\n    annualise_stdev: bool = True,\n) -> pd.Series:\n    if use_perc_returns:\n        daily_returns = calculate_percentage_returns(\n            adjusted_price=adjusted_price, current_price=current_price\n        )",
        "detail": "almanac.analysis.std_for_risk",
        "documentation": {}
    },
    {
        "label": "DEFAULT_DATE_FORMAT",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "DEFAULT_DATE_FORMAT = \"%Y-%m-%d\"\nFrequency = Enum(\"Frequency\", \"Natural Year Month Week BDay\")\nNATURAL = Frequency.Natural\nYEAR = Frequency.Year\nMONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "Frequency",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "Frequency = Enum(\"Frequency\", \"Natural Year Month Week BDay\")\nNATURAL = Frequency.Natural\nYEAR = Frequency.Year\nMONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "NATURAL",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "NATURAL = Frequency.Natural\nYEAR = Frequency.Year\nMONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "YEAR",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "YEAR = Frequency.Year\nMONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "MONTH",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "MONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "WEEK",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "WEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "BUSINESS_DAYS_IN_YEAR",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "BUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "WEEKS_PER_YEAR",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "WEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "MONTHS_PER_YEAR",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "MONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "SECONDS_PER_YEAR",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "SECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "PERIODS_PER_YEAR",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "PERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "QUANT_PERCENTILE_EXTREME",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "QUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "QUANT_PERCENTILE_STD",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "QUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "NORMAL_DISTR_RATIO",
        "kind": 5,
        "importPath": "almanac.config.configs",
        "description": "almanac.config.configs",
        "peekOfCode": "NORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "Read_csv",
        "kind": 6,
        "importPath": "almanac.data.data",
        "description": "almanac.data.data",
        "peekOfCode": "class Read_csv:\n    def __init__(self, filename, date_format=\"%Y-%m-%d\", date_index_name=\"index\"):\n        self.filename = filename\n        self.date_format = date_format\n        self.date_index_name = date_index_name\n    def pd_readcsv(self) -> pd.DataFrame:\n        ans = pd.read_csv(self.filename)\n        ans.index = pd.to_datetime(ans[self.date_index_name], format=self.date_format).values\n        del ans[self.date_index_name]\n        ans.index.name = None",
        "detail": "almanac.data.data",
        "documentation": {}
    },
    {
        "label": "Strategy1",
        "kind": 6,
        "importPath": "almanac.strategy.strategy1",
        "description": "almanac.strategy.strategy1",
        "peekOfCode": "class Strategy1:\n    def __init__(self, data_path: str, multiplier: int, risk_target: Union[int, float], capital: int):\n        self.data_path = data_path\n        self.multiplier = multiplier\n        self.risk_target = risk_target\n        self.capital = capital\n        self.data = self.get_data()\n        self.adjusted_price = self.data.adjusted\n        self.current_price = self.data.underlying\n        self.fx_series = pd.Series(1, index=self.data.index)",
        "detail": "almanac.strategy.strategy1",
        "documentation": {}
    },
    {
        "label": "Strategy2",
        "kind": 6,
        "importPath": "almanac.strategy.strategy2",
        "description": "almanac.strategy.strategy2",
        "peekOfCode": "class Strategy2:\n    def __init__(self, data_path: str, multiplier: int, risk_target: Union[int, float], capital: int):\n        self.data_path = data_path\n        self.multiplier = multiplier\n        self.risk_target = risk_target\n        self.capital = capital\n        self.data = self.get_data()\n        self.adjusted_price = self.data.adjusted\n        self.current_price = self.data.underlying\n        self.fx_series = pd.Series(1, index=self.data.index)",
        "detail": "almanac.strategy.strategy2",
        "documentation": {}
    },
    {
        "label": "Strategy3",
        "kind": 6,
        "importPath": "almanac.strategy.strategy3",
        "description": "almanac.strategy.strategy3",
        "peekOfCode": "class Strategy3:\n    def __init__(self, data_path: str, multiplier: int, risk_target: Union[int, float], capital: int):\n        self.data_path = data_path\n        self.multiplier = multiplier\n        self.risk_target = risk_target\n        self.capital = capital\n        self.data = self.get_data()\n        self.adjusted_price = self.data.adjusted\n        self.current_price = self.data.underlying\n        self.fx_series = pd.Series(1, index=self.data.index)",
        "detail": "almanac.strategy.strategy3",
        "documentation": {}
    },
    {
        "label": "portfolio_returns",
        "kind": 5,
        "importPath": "almanac.strategy.strategy4_handcrafting",
        "description": "almanac.strategy.strategy4_handcrafting",
        "peekOfCode": "portfolio_returns = 'almanac/sample_data/jumbo_instrument_returns.csv'\nportfolio_weights = handcrafting_algo(portfolio_returns)\nprint(portfolio_weights)",
        "detail": "almanac.strategy.strategy4_handcrafting",
        "documentation": {}
    },
    {
        "label": "portfolio_weights",
        "kind": 5,
        "importPath": "almanac.strategy.strategy4_handcrafting",
        "description": "almanac.strategy.strategy4_handcrafting",
        "peekOfCode": "portfolio_weights = handcrafting_algo(portfolio_returns)\nprint(portfolio_weights)",
        "detail": "almanac.strategy.strategy4_handcrafting",
        "documentation": {}
    },
    {
        "label": "standardDeviation",
        "kind": 6,
        "importPath": "almanac.utils.standardDeviation",
        "description": "almanac.utils.standardDeviation",
        "peekOfCode": "class standardDeviation(pd.Series):\n    ## class that can be eithier % or price based standard deviation estimate\n    def __init__(\n        self,\n        adjusted_price: pd.Series,\n        current_price: pd.Series,\n        use_perc_returns: bool = True,\n        annualise_stdev: bool = True,\n    ):\n        stdev = calculate_variable_standard_deviation_for_risk_targeting(",
        "detail": "almanac.utils.standardDeviation",
        "documentation": {}
    },
    {
        "label": "periods_per_year",
        "kind": 2,
        "importPath": "almanac.utils.utils",
        "description": "almanac.utils.utils",
        "peekOfCode": "def periods_per_year(at_frequency: Frequency):\n    if at_frequency == NATURAL:\n        return BUSINESS_DAYS_IN_YEAR\n    else:\n        return PERIODS_PER_YEAR[at_frequency]\ndef years_in_data(some_data: pd.Series) -> float:\n    datediff = some_data.index[-1] - some_data.index[0]\n    seconds_in_data = datediff.total_seconds()\n    return seconds_in_data / SECONDS_PER_YEAR\ndef sum_at_frequency(perc_return: pd.Series,",
        "detail": "almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "years_in_data",
        "kind": 2,
        "importPath": "almanac.utils.utils",
        "description": "almanac.utils.utils",
        "peekOfCode": "def years_in_data(some_data: pd.Series) -> float:\n    datediff = some_data.index[-1] - some_data.index[0]\n    seconds_in_data = datediff.total_seconds()\n    return seconds_in_data / SECONDS_PER_YEAR\ndef sum_at_frequency(perc_return: pd.Series,\n                     at_frequency: Frequency = NATURAL) -> pd.Series:\n    if at_frequency == NATURAL:\n        return perc_return\n    at_frequency_str_dict = {\n        YEAR: \"Y\",",
        "detail": "almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "sum_at_frequency",
        "kind": 2,
        "importPath": "almanac.utils.utils",
        "description": "almanac.utils.utils",
        "peekOfCode": "def sum_at_frequency(perc_return: pd.Series,\n                     at_frequency: Frequency = NATURAL) -> pd.Series:\n    if at_frequency == NATURAL:\n        return perc_return\n    at_frequency_str_dict = {\n        YEAR: \"Y\",\n        WEEK: \"7D\",\n        MONTH: \"1M\"}\n    at_frequency_str = at_frequency_str_dict[at_frequency]\n    perc_return_at_freq = perc_return.resample(at_frequency_str).sum()",
        "detail": "almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "ann_mean_given_frequency",
        "kind": 2,
        "importPath": "almanac.utils.utils",
        "description": "almanac.utils.utils",
        "peekOfCode": "def ann_mean_given_frequency(perc_return_at_freq: pd.Series,\n                             at_frequency: Frequency) -> float:\n    mean_at_frequency = perc_return_at_freq.mean()\n    periods_per_year_for_frequency = periods_per_year(at_frequency)\n    annualised_mean = mean_at_frequency * periods_per_year_for_frequency\n    return annualised_mean\ndef ann_std_given_frequency(perc_return_at_freq: pd.Series,\n                            at_frequency: Frequency) -> float:\n    std_at_frequency = perc_return_at_freq.std()\n    periods_per_year_for_frequency = periods_per_year(at_frequency)",
        "detail": "almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "ann_std_given_frequency",
        "kind": 2,
        "importPath": "almanac.utils.utils",
        "description": "almanac.utils.utils",
        "peekOfCode": "def ann_std_given_frequency(perc_return_at_freq: pd.Series,\n                            at_frequency: Frequency) -> float:\n    std_at_frequency = perc_return_at_freq.std()\n    periods_per_year_for_frequency = periods_per_year(at_frequency)\n    annualised_std = std_at_frequency * (periods_per_year_for_frequency**.5)\n    return annualised_std\ndef demeaned_remove_zeros(x):\n    x[x == 0] = np.nan\n    return x - x.mean()",
        "detail": "almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "demeaned_remove_zeros",
        "kind": 2,
        "importPath": "almanac.utils.utils",
        "description": "almanac.utils.utils",
        "peekOfCode": "def demeaned_remove_zeros(x):\n    x[x == 0] = np.nan\n    return x - x.mean()",
        "detail": "almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "calculate_perc_returns",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.calculate_returns",
        "description": "build.lib.almanac.analysis.calculate_returns",
        "peekOfCode": "def calculate_perc_returns(\n    position_contracts_held: pd.Series,\n    adjusted_price: pd.Series,\n    fx_series: pd.Series,\n    multiplier: float,\n    capital_required: pd.Series,\n) -> pd.Series:\n    return_price_points = (\n        adjusted_price - adjusted_price.shift(1)\n    ) * position_contracts_held.shift(1)",
        "detail": "build.lib.almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_percentage_returns",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.calculate_returns",
        "description": "build.lib.almanac.analysis.calculate_returns",
        "peekOfCode": "def calculate_percentage_returns(\n    adjusted_price: pd.Series, current_price: pd.Series\n) -> pd.Series:\n    daily_price_changes = calculate_daily_returns(adjusted_price)\n    percentage_changes = daily_price_changes / current_price.shift(1)\n    return percentage_changes\ndef calculate_daily_returns(adjusted_price: pd.Series) -> pd.Series:\n    return adjusted_price.diff()",
        "detail": "build.lib.almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "calculate_daily_returns",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.calculate_returns",
        "description": "build.lib.almanac.analysis.calculate_returns",
        "peekOfCode": "def calculate_daily_returns(adjusted_price: pd.Series) -> pd.Series:\n    return adjusted_price.diff()",
        "detail": "build.lib.almanac.analysis.calculate_returns",
        "documentation": {}
    },
    {
        "label": "Stats",
        "kind": 6,
        "importPath": "build.lib.almanac.analysis.calculate_stats",
        "description": "build.lib.almanac.analysis.calculate_stats",
        "peekOfCode": "class Stats():\n    def __init__(self,perc_return, at_frequency = NATURAL) -> None:\n        self.perc_return = perc_return\n        self.at_frequency = at_frequency\n    def _sum_at_frequency(self):\n        if self.at_frequency == NATURAL:\n            return self.perc_return\n        at_frequency_str_dict = {YEAR: \"Y\", WEEK: \"7D\", MONTH: \"1M\"}\n        at_frequency_str = at_frequency_str_dict[self.at_frequency]\n        perc_return_at_freq = self.perc_return.resample(at_frequency_str).sum()",
        "detail": "build.lib.almanac.analysis.calculate_stats",
        "documentation": {}
    },
    {
        "label": "correlationEstimate",
        "kind": 6,
        "importPath": "build.lib.almanac.analysis.handcrafting",
        "description": "build.lib.almanac.analysis.handcrafting",
        "peekOfCode": "class correlationEstimate(object):\n    def __init__(self, values: pd.DataFrame):\n        columns = values.columns\n        values = values.values\n        self._values = values\n        self._columns = columns\n    def __repr__(self):\n        return str(self.as_pd())\n    def __len__(self):\n        return len(self.columns)",
        "detail": "build.lib.almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "portfolioWeights",
        "kind": 6,
        "importPath": "build.lib.almanac.analysis.handcrafting",
        "description": "build.lib.almanac.analysis.handcrafting",
        "peekOfCode": "class portfolioWeights(dict):\n    @property\n    def weights(self):\n        return list(self.values())\n    @property\n    def assets(self):\n        return list(self.keys())\n    def multiply_by_float(self, multiplier: float):\n        list_of_assets = self.assets\n        list_of_weights = [self[asset] for asset in list_of_assets]",
        "detail": "build.lib.almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "handcraftPortfolio",
        "kind": 6,
        "importPath": "build.lib.almanac.analysis.handcrafting",
        "description": "build.lib.almanac.analysis.handcrafting",
        "peekOfCode": "class handcraftPortfolio(object):\n    def __init__(self, correlation: correlationEstimate):\n        self._correlation = correlation\n    @property\n    def correlation(self) -> correlationEstimate:\n        return self._correlation\n    @property\n    def size(self) -> int:\n        return len(self.correlation)\n    @property",
        "detail": "build.lib.almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "cluster_correlation_matrix",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.handcrafting",
        "description": "build.lib.almanac.analysis.handcrafting",
        "peekOfCode": "def cluster_correlation_matrix(corr_matrix: correlationEstimate, cluster_size: int = 2):\n    clusters = get_list_of_clusters_for_correlation_matrix(\n        corr_matrix, cluster_size=cluster_size\n    )\n    clusters_as_names = from_cluster_index_to_asset_names(\n        clusters, corr_matrix)\n    if PRINT_TRACE:\n        print(\"Cluster split: %s\" % str(clusters_as_names))\n    return clusters_as_names\ndef get_list_of_clusters_for_correlation_matrix(",
        "detail": "build.lib.almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "get_list_of_clusters_for_correlation_matrix",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.handcrafting",
        "description": "build.lib.almanac.analysis.handcrafting",
        "peekOfCode": "def get_list_of_clusters_for_correlation_matrix(\n    corr_matrix: np.array, cluster_size: int = 2\n) -> list:\n    corr_as_np = corr_matrix.values\n    try:\n        clusters = get_list_of_clusters_for_correlation_matrix_as_np(\n            corr_as_np, cluster_size=cluster_size\n        )\n    except:\n        clusters = arbitrary_split_of_correlation_matrix(",
        "detail": "build.lib.almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "get_list_of_clusters_for_correlation_matrix_as_np",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.handcrafting",
        "description": "build.lib.almanac.analysis.handcrafting",
        "peekOfCode": "def get_list_of_clusters_for_correlation_matrix_as_np(\n    corr_as_np: np.array, cluster_size: int = 2\n) -> list:\n    d = sch.distance.pdist(corr_as_np)\n    L = sch.linkage(d, method=\"complete\")\n    cutoff = cutoff_distance_to_guarantee_N_clusters(\n        corr_as_np, L=L, cluster_size=cluster_size\n    )\n    ind = sch.fcluster(L, cutoff, \"distance\")\n    ind = list(ind)",
        "detail": "build.lib.almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "cutoff_distance_to_guarantee_N_clusters",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.handcrafting",
        "description": "build.lib.almanac.analysis.handcrafting",
        "peekOfCode": "def cutoff_distance_to_guarantee_N_clusters(\n    corr_as_np: np.array, L: np.array, cluster_size: int = 2\n):\n    # assert cluster_size==2\n    N = len(corr_as_np)\n    return L[N - cluster_size][2] - 0.000001\ndef arbitrary_split_of_correlation_matrix(\n    corr_matrix: np.array, cluster_size: int = 2\n) -> list:\n    # split correlation of 3 or more assets",
        "detail": "build.lib.almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "arbitrary_split_of_correlation_matrix",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.handcrafting",
        "description": "build.lib.almanac.analysis.handcrafting",
        "peekOfCode": "def arbitrary_split_of_correlation_matrix(\n    corr_matrix: np.array, cluster_size: int = 2\n) -> list:\n    # split correlation of 3 or more assets\n    count_assets = len(corr_matrix)\n    return arbitrary_split_for_asset_length(count_assets, cluster_size=cluster_size)\ndef arbitrary_split_for_asset_length(count_assets: int, cluster_size: int = 2) -> list:\n    return [(x % cluster_size) + 1 for x in range(count_assets)]\ndef from_cluster_index_to_asset_names(\n    clusters: list, corr_matrix: correlationEstimate",
        "detail": "build.lib.almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "arbitrary_split_for_asset_length",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.handcrafting",
        "description": "build.lib.almanac.analysis.handcrafting",
        "peekOfCode": "def arbitrary_split_for_asset_length(count_assets: int, cluster_size: int = 2) -> list:\n    return [(x % cluster_size) + 1 for x in range(count_assets)]\ndef from_cluster_index_to_asset_names(\n    clusters: list, corr_matrix: correlationEstimate\n) -> list:\n    all_clusters = list(set(clusters))\n    asset_names = corr_matrix.columns\n    list_of_asset_clusters = [\n        get_asset_names_for_cluster_index(cluster_id, clusters, asset_names)\n        for cluster_id in all_clusters",
        "detail": "build.lib.almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "from_cluster_index_to_asset_names",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.handcrafting",
        "description": "build.lib.almanac.analysis.handcrafting",
        "peekOfCode": "def from_cluster_index_to_asset_names(\n    clusters: list, corr_matrix: correlationEstimate\n) -> list:\n    all_clusters = list(set(clusters))\n    asset_names = corr_matrix.columns\n    list_of_asset_clusters = [\n        get_asset_names_for_cluster_index(cluster_id, clusters, asset_names)\n        for cluster_id in all_clusters\n    ]\n    return list_of_asset_clusters",
        "detail": "build.lib.almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "get_asset_names_for_cluster_index",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.handcrafting",
        "description": "build.lib.almanac.analysis.handcrafting",
        "peekOfCode": "def get_asset_names_for_cluster_index(\n    cluster_id: int, clusters: list, asset_names: list\n):\n    list_of_assets = [\n        asset for asset, cluster in zip(asset_names, clusters) if cluster == cluster_id\n    ]\n    return list_of_assets\nclass portfolioWeights(dict):\n    @property\n    def weights(self):",
        "detail": "build.lib.almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "flatten_list",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.handcrafting",
        "description": "build.lib.almanac.analysis.handcrafting",
        "peekOfCode": "def flatten_list(some_list):\n    flattened = [item for sublist in some_list for item in sublist]\n    return flattened\ndef one_over_n_weights_given_asset_names(list_of_asset_names: list) -> portfolioWeights:\n    weight = 1.0 / len(list_of_asset_names)\n    return portfolioWeights(\n        [(asset_name, weight) for asset_name in list_of_asset_names]\n    )\nclass handcraftPortfolio(object):\n    def __init__(self, correlation: correlationEstimate):",
        "detail": "build.lib.almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "one_over_n_weights_given_asset_names",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.handcrafting",
        "description": "build.lib.almanac.analysis.handcrafting",
        "peekOfCode": "def one_over_n_weights_given_asset_names(list_of_asset_names: list) -> portfolioWeights:\n    weight = 1.0 / len(list_of_asset_names)\n    return portfolioWeights(\n        [(asset_name, weight) for asset_name in list_of_asset_names]\n    )\nclass handcraftPortfolio(object):\n    def __init__(self, correlation: correlationEstimate):\n        self._correlation = correlation\n    @property\n    def correlation(self) -> correlationEstimate:",
        "detail": "build.lib.almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "create_sub_portfolios_from_portfolio",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.handcrafting",
        "description": "build.lib.almanac.analysis.handcrafting",
        "peekOfCode": "def create_sub_portfolios_from_portfolio(handcraft_portfolio: handcraftPortfolio):\n    clusters_as_names = cluster_correlation_matrix(\n        handcraft_portfolio.correlation)\n    sub_portfolios = create_sub_portfolios_given_clusters(\n        clusters_as_names, handcraft_portfolio\n    )\n    return sub_portfolios\ndef create_sub_portfolios_given_clusters(\n    clusters_as_names: list, handcraft_portfolio: handcraftPortfolio\n) -> list:",
        "detail": "build.lib.almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "create_sub_portfolios_given_clusters",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.handcrafting",
        "description": "build.lib.almanac.analysis.handcrafting",
        "peekOfCode": "def create_sub_portfolios_given_clusters(\n    clusters_as_names: list, handcraft_portfolio: handcraftPortfolio\n) -> list:\n    list_of_sub_portfolios = [\n        handcraft_portfolio.subset(subset_of_asset_names)\n        for subset_of_asset_names in clusters_as_names\n    ]\n    return list_of_sub_portfolios\ndef aggregate_risk_weights_over_sub_portfolios(\n    sub_portfolios: list,",
        "detail": "build.lib.almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "aggregate_risk_weights_over_sub_portfolios",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.handcrafting",
        "description": "build.lib.almanac.analysis.handcrafting",
        "peekOfCode": "def aggregate_risk_weights_over_sub_portfolios(\n    sub_portfolios: list,\n) -> portfolioWeights:\n    # sub portfolios guaranteed to be 2 long\n    # We allocate half to each\n    asset_count = len(sub_portfolios)\n    # assert asset_count == 2\n    weights_for_each_subportfolio = [1.0 / asset_count] * asset_count\n    risk_weights_by_portfolio = [\n        sub_portfolio.weights() for sub_portfolio in sub_portfolios",
        "detail": "build.lib.almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "handcrafting_algo",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.handcrafting",
        "description": "build.lib.almanac.analysis.handcrafting",
        "peekOfCode": "def handcrafting_algo(instument_returns):\n    reader = Read_csv(instument_returns)\n    all_returns = reader.pd_readcsv()\n    corr_matrix = correlationEstimate(all_returns.corr())\n    handcraft_portfolio = handcraftPortfolio(corr_matrix)\n    PRINT_TRACE = True\n    portfolio_weights = handcraft_portfolio.weights()\n    return portfolio_weights",
        "detail": "build.lib.almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "PRINT_TRACE",
        "kind": 5,
        "importPath": "build.lib.almanac.analysis.handcrafting",
        "description": "build.lib.almanac.analysis.handcrafting",
        "peekOfCode": "PRINT_TRACE = False\nclass correlationEstimate(object):\n    def __init__(self, values: pd.DataFrame):\n        columns = values.columns\n        values = values.values\n        self._values = values\n        self._columns = columns\n    def __repr__(self):\n        return str(self.as_pd())\n    def __len__(self):",
        "detail": "build.lib.almanac.analysis.handcrafting",
        "documentation": {}
    },
    {
        "label": "calculate_position_series_given_fixed_risk",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.position_sereies_fixed_risk",
        "description": "build.lib.almanac.analysis.position_sereies_fixed_risk",
        "peekOfCode": "def calculate_position_series_given_fixed_risk(capital: float,\n                                               risk_target_tau: float,\n                                               current_price: pd.Series,\n                                               fx: pd.Series,\n                                               multiplier: float,\n                                               instrument_risk_ann_perc: float) -> pd.Series:\n    #N = (Capital × τ) ÷ (Multiplier × Price × FX × σ %)\n    position_in_contracts =  capital * risk_target_tau / (multiplier * current_price * fx * instrument_risk_ann_perc)\n    return position_in_contracts",
        "detail": "build.lib.almanac.analysis.position_sereies_fixed_risk",
        "documentation": {}
    },
    {
        "label": "calculate_position_series_given_variable_risk",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.position_sereies_variable_risk",
        "description": "build.lib.almanac.analysis.position_sereies_variable_risk",
        "peekOfCode": "def calculate_position_series_given_variable_risk(\n    capital: float,\n    risk_target_tau: float,\n    fx: pd.Series,\n    multiplier: float,\n    instrument_risk: standardDeviation,\n) -> pd.Series:\n    # N = (Capital × τ) ÷ (Multiplier × Price × FX × σ %)\n    ## resolves to N = (Capital × τ) ÷ (Multiplier × FX × daily stdev price terms × 16)\n    ## for simplicity we use the daily risk in price terms, even if we calculated annualised % returns",
        "detail": "build.lib.almanac.analysis.position_sereies_variable_risk",
        "documentation": {}
    },
    {
        "label": "calculate_standard_deviation_for_risk_targeting",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.std_for_risk",
        "description": "build.lib.almanac.analysis.std_for_risk",
        "peekOfCode": "def calculate_standard_deviation_for_risk_targeting(adjusted_price: pd.Series,\n                                                    current_price: pd.Series):\n    daily_price_changes = adjusted_price.diff()\n    percentage_changes = daily_price_changes / current_price.shift(1)\n    ## Can do the whole series or recent history\n    recent_daily_std = percentage_changes.tail(30).std()\n    return recent_daily_std*(BUSINESS_DAYS_IN_YEAR**.5)\ndef calculate_variable_standard_deviation_for_risk_targeting(\n    adjusted_price: pd.Series,\n    current_price: pd.Series,",
        "detail": "build.lib.almanac.analysis.std_for_risk",
        "documentation": {}
    },
    {
        "label": "calculate_variable_standard_deviation_for_risk_targeting",
        "kind": 2,
        "importPath": "build.lib.almanac.analysis.std_for_risk",
        "description": "build.lib.almanac.analysis.std_for_risk",
        "peekOfCode": "def calculate_variable_standard_deviation_for_risk_targeting(\n    adjusted_price: pd.Series,\n    current_price: pd.Series,\n    use_perc_returns: bool = True,\n    annualise_stdev: bool = True,\n) -> pd.Series:\n    if use_perc_returns:\n        daily_returns = calculate_percentage_returns(\n            adjusted_price=adjusted_price, current_price=current_price\n        )",
        "detail": "build.lib.almanac.analysis.std_for_risk",
        "documentation": {}
    },
    {
        "label": "DEFAULT_DATE_FORMAT",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "DEFAULT_DATE_FORMAT = \"%Y-%m-%d\"\nFrequency = Enum(\"Frequency\", \"Natural Year Month Week BDay\")\nNATURAL = Frequency.Natural\nYEAR = Frequency.Year\nMONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "Frequency",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "Frequency = Enum(\"Frequency\", \"Natural Year Month Week BDay\")\nNATURAL = Frequency.Natural\nYEAR = Frequency.Year\nMONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "NATURAL",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "NATURAL = Frequency.Natural\nYEAR = Frequency.Year\nMONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "YEAR",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "YEAR = Frequency.Year\nMONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "MONTH",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "MONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "WEEK",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "WEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "BUSINESS_DAYS_IN_YEAR",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "BUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "WEEKS_PER_YEAR",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "WEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "MONTHS_PER_YEAR",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "MONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "SECONDS_PER_YEAR",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "SECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "PERIODS_PER_YEAR",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "PERIODS_PER_YEAR = {MONTH: MONTHS_PER_YEAR, WEEK: WEEKS_PER_YEAR, YEAR: 1}\nQUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "QUANT_PERCENTILE_EXTREME",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "QUANT_PERCENTILE_EXTREME = 0.01\nQUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "QUANT_PERCENTILE_STD",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "QUANT_PERCENTILE_STD = 0.3\nNORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "NORMAL_DISTR_RATIO",
        "kind": 5,
        "importPath": "build.lib.almanac.config.configs",
        "description": "build.lib.almanac.config.configs",
        "peekOfCode": "NORMAL_DISTR_RATIO = norm.ppf(QUANT_PERCENTILE_EXTREME) / norm.ppf(QUANT_PERCENTILE_STD)",
        "detail": "build.lib.almanac.config.configs",
        "documentation": {}
    },
    {
        "label": "Read_csv",
        "kind": 6,
        "importPath": "build.lib.almanac.data.data",
        "description": "build.lib.almanac.data.data",
        "peekOfCode": "class Read_csv:\n    def __init__(self, filename, date_format=\"%Y-%m-%d\", date_index_name=\"index\"):\n        self.filename = filename\n        self.date_format = date_format\n        self.date_index_name = date_index_name\n    def pd_readcsv(self) -> pd.DataFrame:\n        ans = pd.read_csv(self.filename)\n        ans.index = pd.to_datetime(ans[self.date_index_name], format=self.date_format).values\n        del ans[self.date_index_name]\n        ans.index.name = None",
        "detail": "build.lib.almanac.data.data",
        "documentation": {}
    },
    {
        "label": "Strategy1",
        "kind": 6,
        "importPath": "build.lib.almanac.strategy.strategy1",
        "description": "build.lib.almanac.strategy.strategy1",
        "peekOfCode": "class Strategy1:\n    def __init__(self, data_path: str, multiplier: int, risk_target: Union[int, float], capital: int):\n        self.data_path = data_path\n        self.multiplier = multiplier\n        self.risk_target = risk_target\n        self.capital = capital\n        self.data = self.get_data()\n        self.adjusted_price = self.data.adjusted\n        self.current_price = self.data.underlying\n        self.fx_series = pd.Series(1, index=self.data.index)",
        "detail": "build.lib.almanac.strategy.strategy1",
        "documentation": {}
    },
    {
        "label": "Strategy2",
        "kind": 6,
        "importPath": "build.lib.almanac.strategy.strategy2",
        "description": "build.lib.almanac.strategy.strategy2",
        "peekOfCode": "class Strategy2:\n    def __init__(self, data_path: str, multiplier: int, risk_target: Union[int, float], capital: int):\n        self.data_path = data_path\n        self.multiplier = multiplier\n        self.risk_target = risk_target\n        self.capital = capital\n        self.data = self.get_data()\n        self.adjusted_price = self.data.adjusted\n        self.current_price = self.data.underlying\n        self.fx_series = pd.Series(1, index=self.data.index)",
        "detail": "build.lib.almanac.strategy.strategy2",
        "documentation": {}
    },
    {
        "label": "Strategy3",
        "kind": 6,
        "importPath": "build.lib.almanac.strategy.strategy3",
        "description": "build.lib.almanac.strategy.strategy3",
        "peekOfCode": "class Strategy3:\n    def __init__(self, data_path: str, multiplier: int, risk_target: Union[int, float], capital: int):\n        self.data_path = data_path\n        self.multiplier = multiplier\n        self.risk_target = risk_target\n        self.capital = capital\n        self.data = self.get_data()\n        self.adjusted_price = self.data.adjusted\n        self.current_price = self.data.underlying\n        self.fx_series = pd.Series(1, index=self.data.index)",
        "detail": "build.lib.almanac.strategy.strategy3",
        "documentation": {}
    },
    {
        "label": "portfolio_returns",
        "kind": 5,
        "importPath": "build.lib.almanac.strategy.strategy4_handcrafting",
        "description": "build.lib.almanac.strategy.strategy4_handcrafting",
        "peekOfCode": "portfolio_returns = 'almanac/sample_data/jumbo_instrument_returns.csv'\nportfolio_weights = handcrafting_algo(portfolio_returns)\nprint(portfolio_weights)",
        "detail": "build.lib.almanac.strategy.strategy4_handcrafting",
        "documentation": {}
    },
    {
        "label": "portfolio_weights",
        "kind": 5,
        "importPath": "build.lib.almanac.strategy.strategy4_handcrafting",
        "description": "build.lib.almanac.strategy.strategy4_handcrafting",
        "peekOfCode": "portfolio_weights = handcrafting_algo(portfolio_returns)\nprint(portfolio_weights)",
        "detail": "build.lib.almanac.strategy.strategy4_handcrafting",
        "documentation": {}
    },
    {
        "label": "standardDeviation",
        "kind": 6,
        "importPath": "build.lib.almanac.utils.standardDeviation",
        "description": "build.lib.almanac.utils.standardDeviation",
        "peekOfCode": "class standardDeviation(pd.Series):\n    ## class that can be eithier % or price based standard deviation estimate\n    def __init__(\n        self,\n        adjusted_price: pd.Series,\n        current_price: pd.Series,\n        use_perc_returns: bool = True,\n        annualise_stdev: bool = True,\n    ):\n        stdev = calculate_variable_standard_deviation_for_risk_targeting(",
        "detail": "build.lib.almanac.utils.standardDeviation",
        "documentation": {}
    },
    {
        "label": "periods_per_year",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils",
        "description": "build.lib.almanac.utils.utils",
        "peekOfCode": "def periods_per_year(at_frequency: Frequency):\n    if at_frequency == NATURAL:\n        return BUSINESS_DAYS_IN_YEAR\n    else:\n        return PERIODS_PER_YEAR[at_frequency]\ndef years_in_data(some_data: pd.Series) -> float:\n    datediff = some_data.index[-1] - some_data.index[0]\n    seconds_in_data = datediff.total_seconds()\n    return seconds_in_data / SECONDS_PER_YEAR\ndef sum_at_frequency(perc_return: pd.Series,",
        "detail": "build.lib.almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "years_in_data",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils",
        "description": "build.lib.almanac.utils.utils",
        "peekOfCode": "def years_in_data(some_data: pd.Series) -> float:\n    datediff = some_data.index[-1] - some_data.index[0]\n    seconds_in_data = datediff.total_seconds()\n    return seconds_in_data / SECONDS_PER_YEAR\ndef sum_at_frequency(perc_return: pd.Series,\n                     at_frequency: Frequency = NATURAL) -> pd.Series:\n    if at_frequency == NATURAL:\n        return perc_return\n    at_frequency_str_dict = {\n        YEAR: \"Y\",",
        "detail": "build.lib.almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "sum_at_frequency",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils",
        "description": "build.lib.almanac.utils.utils",
        "peekOfCode": "def sum_at_frequency(perc_return: pd.Series,\n                     at_frequency: Frequency = NATURAL) -> pd.Series:\n    if at_frequency == NATURAL:\n        return perc_return\n    at_frequency_str_dict = {\n        YEAR: \"Y\",\n        WEEK: \"7D\",\n        MONTH: \"1M\"}\n    at_frequency_str = at_frequency_str_dict[at_frequency]\n    perc_return_at_freq = perc_return.resample(at_frequency_str).sum()",
        "detail": "build.lib.almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "ann_mean_given_frequency",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils",
        "description": "build.lib.almanac.utils.utils",
        "peekOfCode": "def ann_mean_given_frequency(perc_return_at_freq: pd.Series,\n                             at_frequency: Frequency) -> float:\n    mean_at_frequency = perc_return_at_freq.mean()\n    periods_per_year_for_frequency = periods_per_year(at_frequency)\n    annualised_mean = mean_at_frequency * periods_per_year_for_frequency\n    return annualised_mean\ndef ann_std_given_frequency(perc_return_at_freq: pd.Series,\n                            at_frequency: Frequency) -> float:\n    std_at_frequency = perc_return_at_freq.std()\n    periods_per_year_for_frequency = periods_per_year(at_frequency)",
        "detail": "build.lib.almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "ann_std_given_frequency",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils",
        "description": "build.lib.almanac.utils.utils",
        "peekOfCode": "def ann_std_given_frequency(perc_return_at_freq: pd.Series,\n                            at_frequency: Frequency) -> float:\n    std_at_frequency = perc_return_at_freq.std()\n    periods_per_year_for_frequency = periods_per_year(at_frequency)\n    annualised_std = std_at_frequency * (periods_per_year_for_frequency**.5)\n    return annualised_std\ndef demeaned_remove_zeros(x):\n    x[x == 0] = np.nan\n    return x - x.mean()",
        "detail": "build.lib.almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "demeaned_remove_zeros",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils",
        "description": "build.lib.almanac.utils.utils",
        "peekOfCode": "def demeaned_remove_zeros(x):\n    x[x == 0] = np.nan\n    return x - x.mean()",
        "detail": "build.lib.almanac.utils.utils",
        "documentation": {}
    },
    {
        "label": "periods_per_year",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "def periods_per_year(at_frequency: Frequency):\n    if at_frequency == NATURAL:\n        return BUSINESS_DAYS_IN_YEAR\n    else:\n        return PERIODS_PER_YEAR[at_frequency]\ndef years_in_data(some_data: pd.Series) -> float:\n    datediff = some_data.index[-1] - some_data.index[0]\n    seconds_in_data = datediff.total_seconds()\n    return seconds_in_data / SECONDS_PER_YEAR\ndef sum_at_frequency(perc_return: pd.Series,",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "years_in_data",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "def years_in_data(some_data: pd.Series) -> float:\n    datediff = some_data.index[-1] - some_data.index[0]\n    seconds_in_data = datediff.total_seconds()\n    return seconds_in_data / SECONDS_PER_YEAR\ndef sum_at_frequency(perc_return: pd.Series,\n                     at_frequency: Frequency = NATURAL) -> pd.Series:\n    if at_frequency == NATURAL:\n        return perc_return\n    at_frequency_str_dict = {\n        YEAR: \"Y\",",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "sum_at_frequency",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "def sum_at_frequency(perc_return: pd.Series,\n                     at_frequency: Frequency = NATURAL) -> pd.Series:\n    if at_frequency == NATURAL:\n        return perc_return\n    at_frequency_str_dict = {\n        YEAR: \"Y\",\n        WEEK: \"7D\",\n        MONTH: \"1M\"}\n    at_frequency_str = at_frequency_str_dict[at_frequency]\n    perc_return_at_freq = perc_return.resample(at_frequency_str).sum()",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "ann_mean_given_frequency",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "def ann_mean_given_frequency(perc_return_at_freq: pd.Series,\n                             at_frequency: Frequency) -> float:\n    mean_at_frequency = perc_return_at_freq.mean()\n    periods_per_year_for_frequency = periods_per_year(at_frequency)\n    annualised_mean = mean_at_frequency * periods_per_year_for_frequency\n    return annualised_mean\ndef ann_std_given_frequency(perc_return_at_freq: pd.Series,\n                            at_frequency: Frequency) -> float:\n    std_at_frequency = perc_return_at_freq.std()\n    periods_per_year_for_frequency = periods_per_year(at_frequency)",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "ann_std_given_frequency",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "def ann_std_given_frequency(perc_return_at_freq: pd.Series,\n                            at_frequency: Frequency) -> float:\n    std_at_frequency = perc_return_at_freq.std()\n    periods_per_year_for_frequency = periods_per_year(at_frequency)\n    annualised_std = std_at_frequency * (periods_per_year_for_frequency**.5)\n    return annualised_std\ndef demeaned_remove_zeros(x):\n    x[x == 0] = np.nan\n    return x - x.mean()",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "demeaned_remove_zeros",
        "kind": 2,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "def demeaned_remove_zeros(x):\n    x[x == 0] = np.nan\n    return x - x.mean()",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "DEFAULT_DATE_FORMAT",
        "kind": 5,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "DEFAULT_DATE_FORMAT = \"%Y-%m-%d\"\nFrequency = Enum(\n    \"Frequency\",\n    \"Natural Year Month Week BDay\",\n)\nNATURAL = Frequency.Natural\nYEAR = Frequency.Year\nMONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "Frequency",
        "kind": 5,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "Frequency = Enum(\n    \"Frequency\",\n    \"Natural Year Month Week BDay\",\n)\nNATURAL = Frequency.Natural\nYEAR = Frequency.Year\nMONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "NATURAL",
        "kind": 5,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "NATURAL = Frequency.Natural\nYEAR = Frequency.Year\nMONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {\n    MONTH: MONTHS_PER_YEAR,",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "YEAR",
        "kind": 5,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "YEAR = Frequency.Year\nMONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {\n    MONTH: MONTHS_PER_YEAR,\n    WEEK: WEEKS_PER_YEAR,",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "MONTH",
        "kind": 5,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "MONTH = Frequency.Month\nWEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {\n    MONTH: MONTHS_PER_YEAR,\n    WEEK: WEEKS_PER_YEAR,\n    YEAR: 1",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "WEEK",
        "kind": 5,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "WEEK = Frequency.Week\nBUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {\n    MONTH: MONTHS_PER_YEAR,\n    WEEK: WEEKS_PER_YEAR,\n    YEAR: 1\n}",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "BUSINESS_DAYS_IN_YEAR",
        "kind": 5,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "BUSINESS_DAYS_IN_YEAR = 256\nWEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {\n    MONTH: MONTHS_PER_YEAR,\n    WEEK: WEEKS_PER_YEAR,\n    YEAR: 1\n}\ndef periods_per_year(at_frequency: Frequency):",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "WEEKS_PER_YEAR",
        "kind": 5,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "WEEKS_PER_YEAR = 52.25\nMONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {\n    MONTH: MONTHS_PER_YEAR,\n    WEEK: WEEKS_PER_YEAR,\n    YEAR: 1\n}\ndef periods_per_year(at_frequency: Frequency):\n    if at_frequency == NATURAL:",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "MONTHS_PER_YEAR",
        "kind": 5,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "MONTHS_PER_YEAR = 12\nSECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {\n    MONTH: MONTHS_PER_YEAR,\n    WEEK: WEEKS_PER_YEAR,\n    YEAR: 1\n}\ndef periods_per_year(at_frequency: Frequency):\n    if at_frequency == NATURAL:\n        return BUSINESS_DAYS_IN_YEAR",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "SECONDS_PER_YEAR",
        "kind": 5,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "SECONDS_PER_YEAR = 365.25 * 24 * 60 * 60\nPERIODS_PER_YEAR = {\n    MONTH: MONTHS_PER_YEAR,\n    WEEK: WEEKS_PER_YEAR,\n    YEAR: 1\n}\ndef periods_per_year(at_frequency: Frequency):\n    if at_frequency == NATURAL:\n        return BUSINESS_DAYS_IN_YEAR\n    else:",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    },
    {
        "label": "PERIODS_PER_YEAR",
        "kind": 5,
        "importPath": "build.lib.almanac.utils.utils1",
        "description": "build.lib.almanac.utils.utils1",
        "peekOfCode": "PERIODS_PER_YEAR = {\n    MONTH: MONTHS_PER_YEAR,\n    WEEK: WEEKS_PER_YEAR,\n    YEAR: 1\n}\ndef periods_per_year(at_frequency: Frequency):\n    if at_frequency == NATURAL:\n        return BUSINESS_DAYS_IN_YEAR\n    else:\n        return PERIODS_PER_YEAR[at_frequency]",
        "detail": "build.lib.almanac.utils.utils1",
        "documentation": {}
    }
]